var require$$1 = require('path');
var require$$0 = require('fs');
var require$$0$1 = require('buffer');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var require$$1__default = /*#__PURE__*/_interopDefaultLegacy(require$$1);
var require$$0__default = /*#__PURE__*/_interopDefaultLegacy(require$$0);
var require$$0__default$1 = /*#__PURE__*/_interopDefaultLegacy(require$$0$1);

var lib$3 = {};

var lib$2 = {};

function _createForOfIteratorHelperLoose$k(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
    if (it) return (it = it.call(o)).next.bind(it);
    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
        if (it) o = it;
        var i = 0;
        return function() {
            if (i >= o.length) return {
                done: true
            };
            return {
                done: false,
                value: o[i++]
            };
        };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
Object.defineProperty(lib$2, "__esModule", {
    value: true
});
lib$2.declare = declare;
lib$2.declarePreset = void 0;
function declare(builder) {
    return function(api, options, dirname) {
        var _clonedApi2;
        var clonedApi;
        for(var _iterator = _createForOfIteratorHelperLoose$k(Object.keys(apiPolyfills)), _step; !(_step = _iterator()).done;){
            var name = _step.value;
            var _clonedApi;
            if (api[name]) continue;
            clonedApi = (_clonedApi = clonedApi) != null ? _clonedApi : copyApiObject(api);
            clonedApi[name] = apiPolyfills[name](clonedApi);
        }
        return builder((_clonedApi2 = clonedApi) != null ? _clonedApi2 : api, options || {}, dirname);
    };
}
var declarePreset = declare;
lib$2.declarePreset = declarePreset;
var apiPolyfills = {
    assertVersion: function(api) {
        return function(range) {
            throwVersionError(range, api.version);
        };
    },
    targets: function() {
        return function() {
            return {};
        };
    },
    assumption: function() {
        return function() {
            return undefined;
        };
    }
};
function copyApiObject(api) {
    var proto = null;
    if (typeof api.version === "string" && /^7\./.test(api.version)) {
        proto = Object.getPrototypeOf(api);
        if (proto && (!has$1(proto, "version") || !has$1(proto, "transform") || !has$1(proto, "template") || !has$1(proto, "types"))) {
            proto = null;
        }
    }
    return Object.assign({}, proto, api);
}
function has$1(obj, key) {
    return Object.prototype.hasOwnProperty.call(obj, key);
}
function throwVersionError(range, version) {
    if (typeof range === "number") {
        if (!Number.isInteger(range)) {
            throw new Error("Expected string or integer value.");
        }
        range = "^" + range + ".0.0-0";
    }
    if (typeof range !== "string") {
        throw new Error("Expected string or integer value.");
    }
    var limit = Error.stackTraceLimit;
    if (typeof limit === "number" && limit < 25) {
        Error.stackTraceLimit = 25;
    }
    var err;
    if (version.slice(0, 2) === "7.") {
        err = new Error('Requires Babel "^7.0.0-beta.41", but was loaded with "' + version + '". ' + "You'll need to update your @babel/core version.");
    } else {
        err = new Error('Requires Babel "' + range + '", but was loaded with "' + version + '". ' + "If you are sure you have a compatible version of @babel/core, " + "it is likely that something in your build process is loading the " + "wrong version. Inspect the stack trace of this error to look for " + 'the first entry that doesn\'t mention "@babel/core" or "babel-core" ' + "to see what is calling Babel.");
    }
    if (typeof limit === "number") {
        Error.stackTraceLimit = limit;
    }
    throw Object.assign(err, {
        code: "BABEL_VERSION_UNSUPPORTED",
        version: version,
        range: range
    });
}

Object.defineProperty(lib$3, "__esModule", {
    value: true
});
var default_1 = lib$3.default = void 0;
var _helperPluginUtils = lib$2;
var _default$5 = (0, _helperPluginUtils.declare)(function(api) {
    api.assertVersion(7);
    return {
        name: "syntax-jsx",
        manipulateOptions: function manipulateOptions(opts, parserOpts) {
            if (parserOpts.plugins.some(function(p) {
                return (Array.isArray(p) ? p[0] : p) === "typescript";
            })) {
                return;
            }
            parserOpts.plugins.push("jsx");
        }
    };
});
default_1 = lib$3.default = _default$5;

var lib$1 = {};

var isReactComponent$1 = {};

var buildMatchMemberExpression$1 = {};

var matchesPattern$1 = {};

var generated$4 = {};

var shallowEqual$1 = {};

function _createForOfIteratorHelperLoose$j(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
    if (it) return (it = it.call(o)).next.bind(it);
    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
        if (it) o = it;
        var i = 0;
        return function() {
            if (i >= o.length) return {
                done: true
            };
            return {
                done: false,
                value: o[i++]
            };
        };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
Object.defineProperty(shallowEqual$1, "__esModule", {
    value: true
});
shallowEqual$1.default = shallowEqual;
function shallowEqual(actual, expected) {
    var keys = Object.keys(expected);
    for(var _iterator = _createForOfIteratorHelperLoose$j(keys), _step; !(_step = _iterator()).done;){
        var key = _step.value;
        if (actual[key] !== expected[key]) {
            return false;
        }
    }
    return true;
}

Object.defineProperty(generated$4, "__esModule", {
    value: true
});
generated$4.isArrayExpression = isArrayExpression;
generated$4.isAssignmentExpression = isAssignmentExpression;
generated$4.isBinaryExpression = isBinaryExpression;
generated$4.isInterpreterDirective = isInterpreterDirective;
generated$4.isDirective = isDirective;
generated$4.isDirectiveLiteral = isDirectiveLiteral;
generated$4.isBlockStatement = isBlockStatement;
generated$4.isBreakStatement = isBreakStatement;
generated$4.isCallExpression = isCallExpression;
generated$4.isCatchClause = isCatchClause;
generated$4.isConditionalExpression = isConditionalExpression;
generated$4.isContinueStatement = isContinueStatement;
generated$4.isDebuggerStatement = isDebuggerStatement;
generated$4.isDoWhileStatement = isDoWhileStatement;
generated$4.isEmptyStatement = isEmptyStatement;
generated$4.isExpressionStatement = isExpressionStatement;
generated$4.isFile = isFile;
generated$4.isForInStatement = isForInStatement;
generated$4.isForStatement = isForStatement;
generated$4.isFunctionDeclaration = isFunctionDeclaration;
generated$4.isFunctionExpression = isFunctionExpression;
generated$4.isIdentifier = isIdentifier;
generated$4.isIfStatement = isIfStatement;
generated$4.isLabeledStatement = isLabeledStatement;
generated$4.isStringLiteral = isStringLiteral;
generated$4.isNumericLiteral = isNumericLiteral;
generated$4.isNullLiteral = isNullLiteral;
generated$4.isBooleanLiteral = isBooleanLiteral;
generated$4.isRegExpLiteral = isRegExpLiteral;
generated$4.isLogicalExpression = isLogicalExpression;
generated$4.isMemberExpression = isMemberExpression;
generated$4.isNewExpression = isNewExpression;
generated$4.isProgram = isProgram;
generated$4.isObjectExpression = isObjectExpression;
generated$4.isObjectMethod = isObjectMethod;
generated$4.isObjectProperty = isObjectProperty;
generated$4.isRestElement = isRestElement;
generated$4.isReturnStatement = isReturnStatement;
generated$4.isSequenceExpression = isSequenceExpression;
generated$4.isParenthesizedExpression = isParenthesizedExpression;
generated$4.isSwitchCase = isSwitchCase;
generated$4.isSwitchStatement = isSwitchStatement;
generated$4.isThisExpression = isThisExpression;
generated$4.isThrowStatement = isThrowStatement;
generated$4.isTryStatement = isTryStatement;
generated$4.isUnaryExpression = isUnaryExpression;
generated$4.isUpdateExpression = isUpdateExpression;
generated$4.isVariableDeclaration = isVariableDeclaration;
generated$4.isVariableDeclarator = isVariableDeclarator;
generated$4.isWhileStatement = isWhileStatement;
generated$4.isWithStatement = isWithStatement;
generated$4.isAssignmentPattern = isAssignmentPattern;
generated$4.isArrayPattern = isArrayPattern;
generated$4.isArrowFunctionExpression = isArrowFunctionExpression;
generated$4.isClassBody = isClassBody;
generated$4.isClassExpression = isClassExpression;
generated$4.isClassDeclaration = isClassDeclaration;
generated$4.isExportAllDeclaration = isExportAllDeclaration;
generated$4.isExportDefaultDeclaration = isExportDefaultDeclaration;
generated$4.isExportNamedDeclaration = isExportNamedDeclaration;
generated$4.isExportSpecifier = isExportSpecifier;
generated$4.isForOfStatement = isForOfStatement;
generated$4.isImportDeclaration = isImportDeclaration;
generated$4.isImportDefaultSpecifier = isImportDefaultSpecifier;
generated$4.isImportNamespaceSpecifier = isImportNamespaceSpecifier;
generated$4.isImportSpecifier = isImportSpecifier;
generated$4.isMetaProperty = isMetaProperty;
generated$4.isClassMethod = isClassMethod;
generated$4.isObjectPattern = isObjectPattern;
generated$4.isSpreadElement = isSpreadElement;
generated$4.isSuper = isSuper;
generated$4.isTaggedTemplateExpression = isTaggedTemplateExpression;
generated$4.isTemplateElement = isTemplateElement;
generated$4.isTemplateLiteral = isTemplateLiteral;
generated$4.isYieldExpression = isYieldExpression;
generated$4.isAwaitExpression = isAwaitExpression;
generated$4.isImport = isImport;
generated$4.isBigIntLiteral = isBigIntLiteral;
generated$4.isExportNamespaceSpecifier = isExportNamespaceSpecifier;
generated$4.isOptionalMemberExpression = isOptionalMemberExpression;
generated$4.isOptionalCallExpression = isOptionalCallExpression;
generated$4.isClassProperty = isClassProperty;
generated$4.isClassPrivateProperty = isClassPrivateProperty;
generated$4.isClassPrivateMethod = isClassPrivateMethod;
generated$4.isPrivateName = isPrivateName;
generated$4.isAnyTypeAnnotation = isAnyTypeAnnotation;
generated$4.isArrayTypeAnnotation = isArrayTypeAnnotation;
generated$4.isBooleanTypeAnnotation = isBooleanTypeAnnotation;
generated$4.isBooleanLiteralTypeAnnotation = isBooleanLiteralTypeAnnotation;
generated$4.isNullLiteralTypeAnnotation = isNullLiteralTypeAnnotation;
generated$4.isClassImplements = isClassImplements;
generated$4.isDeclareClass = isDeclareClass;
generated$4.isDeclareFunction = isDeclareFunction;
generated$4.isDeclareInterface = isDeclareInterface;
generated$4.isDeclareModule = isDeclareModule;
generated$4.isDeclareModuleExports = isDeclareModuleExports;
generated$4.isDeclareTypeAlias = isDeclareTypeAlias;
generated$4.isDeclareOpaqueType = isDeclareOpaqueType;
generated$4.isDeclareVariable = isDeclareVariable;
generated$4.isDeclareExportDeclaration = isDeclareExportDeclaration;
generated$4.isDeclareExportAllDeclaration = isDeclareExportAllDeclaration;
generated$4.isDeclaredPredicate = isDeclaredPredicate;
generated$4.isExistsTypeAnnotation = isExistsTypeAnnotation;
generated$4.isFunctionTypeAnnotation = isFunctionTypeAnnotation;
generated$4.isFunctionTypeParam = isFunctionTypeParam;
generated$4.isGenericTypeAnnotation = isGenericTypeAnnotation;
generated$4.isInferredPredicate = isInferredPredicate;
generated$4.isInterfaceExtends = isInterfaceExtends;
generated$4.isInterfaceDeclaration = isInterfaceDeclaration;
generated$4.isInterfaceTypeAnnotation = isInterfaceTypeAnnotation;
generated$4.isIntersectionTypeAnnotation = isIntersectionTypeAnnotation;
generated$4.isMixedTypeAnnotation = isMixedTypeAnnotation;
generated$4.isEmptyTypeAnnotation = isEmptyTypeAnnotation;
generated$4.isNullableTypeAnnotation = isNullableTypeAnnotation;
generated$4.isNumberLiteralTypeAnnotation = isNumberLiteralTypeAnnotation;
generated$4.isNumberTypeAnnotation = isNumberTypeAnnotation;
generated$4.isObjectTypeAnnotation = isObjectTypeAnnotation;
generated$4.isObjectTypeInternalSlot = isObjectTypeInternalSlot;
generated$4.isObjectTypeCallProperty = isObjectTypeCallProperty;
generated$4.isObjectTypeIndexer = isObjectTypeIndexer;
generated$4.isObjectTypeProperty = isObjectTypeProperty;
generated$4.isObjectTypeSpreadProperty = isObjectTypeSpreadProperty;
generated$4.isOpaqueType = isOpaqueType;
generated$4.isQualifiedTypeIdentifier = isQualifiedTypeIdentifier;
generated$4.isStringLiteralTypeAnnotation = isStringLiteralTypeAnnotation;
generated$4.isStringTypeAnnotation = isStringTypeAnnotation;
generated$4.isSymbolTypeAnnotation = isSymbolTypeAnnotation;
generated$4.isThisTypeAnnotation = isThisTypeAnnotation;
generated$4.isTupleTypeAnnotation = isTupleTypeAnnotation;
generated$4.isTypeofTypeAnnotation = isTypeofTypeAnnotation;
generated$4.isTypeAlias = isTypeAlias;
generated$4.isTypeAnnotation = isTypeAnnotation;
generated$4.isTypeCastExpression = isTypeCastExpression;
generated$4.isTypeParameter = isTypeParameter;
generated$4.isTypeParameterDeclaration = isTypeParameterDeclaration;
generated$4.isTypeParameterInstantiation = isTypeParameterInstantiation;
generated$4.isUnionTypeAnnotation = isUnionTypeAnnotation;
generated$4.isVariance = isVariance;
generated$4.isVoidTypeAnnotation = isVoidTypeAnnotation;
generated$4.isEnumDeclaration = isEnumDeclaration;
generated$4.isEnumBooleanBody = isEnumBooleanBody;
generated$4.isEnumNumberBody = isEnumNumberBody;
generated$4.isEnumStringBody = isEnumStringBody;
generated$4.isEnumSymbolBody = isEnumSymbolBody;
generated$4.isEnumBooleanMember = isEnumBooleanMember;
generated$4.isEnumNumberMember = isEnumNumberMember;
generated$4.isEnumStringMember = isEnumStringMember;
generated$4.isEnumDefaultedMember = isEnumDefaultedMember;
generated$4.isIndexedAccessType = isIndexedAccessType;
generated$4.isOptionalIndexedAccessType = isOptionalIndexedAccessType;
generated$4.isJSXAttribute = isJSXAttribute;
generated$4.isJSXClosingElement = isJSXClosingElement;
generated$4.isJSXElement = isJSXElement;
generated$4.isJSXEmptyExpression = isJSXEmptyExpression;
generated$4.isJSXExpressionContainer = isJSXExpressionContainer;
generated$4.isJSXSpreadChild = isJSXSpreadChild;
generated$4.isJSXIdentifier = isJSXIdentifier;
generated$4.isJSXMemberExpression = isJSXMemberExpression;
generated$4.isJSXNamespacedName = isJSXNamespacedName;
generated$4.isJSXOpeningElement = isJSXOpeningElement;
generated$4.isJSXSpreadAttribute = isJSXSpreadAttribute;
generated$4.isJSXText = isJSXText;
generated$4.isJSXFragment = isJSXFragment;
generated$4.isJSXOpeningFragment = isJSXOpeningFragment;
generated$4.isJSXClosingFragment = isJSXClosingFragment;
generated$4.isNoop = isNoop;
generated$4.isPlaceholder = isPlaceholder;
generated$4.isV8IntrinsicIdentifier = isV8IntrinsicIdentifier;
generated$4.isArgumentPlaceholder = isArgumentPlaceholder;
generated$4.isBindExpression = isBindExpression;
generated$4.isImportAttribute = isImportAttribute;
generated$4.isDecorator = isDecorator;
generated$4.isDoExpression = isDoExpression;
generated$4.isExportDefaultSpecifier = isExportDefaultSpecifier;
generated$4.isRecordExpression = isRecordExpression;
generated$4.isTupleExpression = isTupleExpression;
generated$4.isDecimalLiteral = isDecimalLiteral;
generated$4.isStaticBlock = isStaticBlock;
generated$4.isModuleExpression = isModuleExpression;
generated$4.isTopicReference = isTopicReference;
generated$4.isPipelineTopicExpression = isPipelineTopicExpression;
generated$4.isPipelineBareFunction = isPipelineBareFunction;
generated$4.isPipelinePrimaryTopicReference = isPipelinePrimaryTopicReference;
generated$4.isTSParameterProperty = isTSParameterProperty;
generated$4.isTSDeclareFunction = isTSDeclareFunction;
generated$4.isTSDeclareMethod = isTSDeclareMethod;
generated$4.isTSQualifiedName = isTSQualifiedName;
generated$4.isTSCallSignatureDeclaration = isTSCallSignatureDeclaration;
generated$4.isTSConstructSignatureDeclaration = isTSConstructSignatureDeclaration;
generated$4.isTSPropertySignature = isTSPropertySignature;
generated$4.isTSMethodSignature = isTSMethodSignature;
generated$4.isTSIndexSignature = isTSIndexSignature;
generated$4.isTSAnyKeyword = isTSAnyKeyword;
generated$4.isTSBooleanKeyword = isTSBooleanKeyword;
generated$4.isTSBigIntKeyword = isTSBigIntKeyword;
generated$4.isTSIntrinsicKeyword = isTSIntrinsicKeyword;
generated$4.isTSNeverKeyword = isTSNeverKeyword;
generated$4.isTSNullKeyword = isTSNullKeyword;
generated$4.isTSNumberKeyword = isTSNumberKeyword;
generated$4.isTSObjectKeyword = isTSObjectKeyword;
generated$4.isTSStringKeyword = isTSStringKeyword;
generated$4.isTSSymbolKeyword = isTSSymbolKeyword;
generated$4.isTSUndefinedKeyword = isTSUndefinedKeyword;
generated$4.isTSUnknownKeyword = isTSUnknownKeyword;
generated$4.isTSVoidKeyword = isTSVoidKeyword;
generated$4.isTSThisType = isTSThisType;
generated$4.isTSFunctionType = isTSFunctionType;
generated$4.isTSConstructorType = isTSConstructorType;
generated$4.isTSTypeReference = isTSTypeReference;
generated$4.isTSTypePredicate = isTSTypePredicate;
generated$4.isTSTypeQuery = isTSTypeQuery;
generated$4.isTSTypeLiteral = isTSTypeLiteral;
generated$4.isTSArrayType = isTSArrayType;
generated$4.isTSTupleType = isTSTupleType;
generated$4.isTSOptionalType = isTSOptionalType;
generated$4.isTSRestType = isTSRestType;
generated$4.isTSNamedTupleMember = isTSNamedTupleMember;
generated$4.isTSUnionType = isTSUnionType;
generated$4.isTSIntersectionType = isTSIntersectionType;
generated$4.isTSConditionalType = isTSConditionalType;
generated$4.isTSInferType = isTSInferType;
generated$4.isTSParenthesizedType = isTSParenthesizedType;
generated$4.isTSTypeOperator = isTSTypeOperator;
generated$4.isTSIndexedAccessType = isTSIndexedAccessType;
generated$4.isTSMappedType = isTSMappedType;
generated$4.isTSLiteralType = isTSLiteralType;
generated$4.isTSExpressionWithTypeArguments = isTSExpressionWithTypeArguments;
generated$4.isTSInterfaceDeclaration = isTSInterfaceDeclaration;
generated$4.isTSInterfaceBody = isTSInterfaceBody;
generated$4.isTSTypeAliasDeclaration = isTSTypeAliasDeclaration;
generated$4.isTSAsExpression = isTSAsExpression;
generated$4.isTSTypeAssertion = isTSTypeAssertion;
generated$4.isTSEnumDeclaration = isTSEnumDeclaration;
generated$4.isTSEnumMember = isTSEnumMember;
generated$4.isTSModuleDeclaration = isTSModuleDeclaration;
generated$4.isTSModuleBlock = isTSModuleBlock;
generated$4.isTSImportType = isTSImportType;
generated$4.isTSImportEqualsDeclaration = isTSImportEqualsDeclaration;
generated$4.isTSExternalModuleReference = isTSExternalModuleReference;
generated$4.isTSNonNullExpression = isTSNonNullExpression;
generated$4.isTSExportAssignment = isTSExportAssignment;
generated$4.isTSNamespaceExportDeclaration = isTSNamespaceExportDeclaration;
generated$4.isTSTypeAnnotation = isTSTypeAnnotation;
generated$4.isTSTypeParameterInstantiation = isTSTypeParameterInstantiation;
generated$4.isTSTypeParameterDeclaration = isTSTypeParameterDeclaration;
generated$4.isTSTypeParameter = isTSTypeParameter;
generated$4.isExpression = isExpression;
generated$4.isBinary = isBinary;
generated$4.isScopable = isScopable;
generated$4.isBlockParent = isBlockParent;
generated$4.isBlock = isBlock;
generated$4.isStatement = isStatement;
generated$4.isTerminatorless = isTerminatorless;
generated$4.isCompletionStatement = isCompletionStatement;
generated$4.isConditional = isConditional;
generated$4.isLoop = isLoop;
generated$4.isWhile = isWhile;
generated$4.isExpressionWrapper = isExpressionWrapper;
generated$4.isFor = isFor;
generated$4.isForXStatement = isForXStatement;
generated$4.isFunction = isFunction;
generated$4.isFunctionParent = isFunctionParent;
generated$4.isPureish = isPureish;
generated$4.isDeclaration = isDeclaration;
generated$4.isPatternLike = isPatternLike;
generated$4.isLVal = isLVal;
generated$4.isTSEntityName = isTSEntityName;
generated$4.isLiteral = isLiteral;
generated$4.isImmutable = isImmutable$2;
generated$4.isUserWhitespacable = isUserWhitespacable;
generated$4.isMethod = isMethod;
generated$4.isObjectMember = isObjectMember;
generated$4.isProperty = isProperty;
generated$4.isUnaryLike = isUnaryLike;
generated$4.isPattern = isPattern;
generated$4.isClass = isClass;
generated$4.isModuleDeclaration = isModuleDeclaration;
generated$4.isExportDeclaration = isExportDeclaration;
generated$4.isModuleSpecifier = isModuleSpecifier;
generated$4.isPrivate = isPrivate;
generated$4.isFlow = isFlow;
generated$4.isFlowType = isFlowType;
generated$4.isFlowBaseAnnotation = isFlowBaseAnnotation;
generated$4.isFlowDeclaration = isFlowDeclaration;
generated$4.isFlowPredicate = isFlowPredicate;
generated$4.isEnumBody = isEnumBody;
generated$4.isEnumMember = isEnumMember;
generated$4.isJSX = isJSX;
generated$4.isTSTypeElement = isTSTypeElement;
generated$4.isTSType = isTSType;
generated$4.isTSBaseType = isTSBaseType;
generated$4.isNumberLiteral = isNumberLiteral;
generated$4.isRegexLiteral = isRegexLiteral;
generated$4.isRestProperty = isRestProperty;
generated$4.isSpreadProperty = isSpreadProperty;
var _shallowEqual = shallowEqual$1;
function isArrayExpression(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "ArrayExpression") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isAssignmentExpression(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "AssignmentExpression") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isBinaryExpression(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "BinaryExpression") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isInterpreterDirective(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "InterpreterDirective") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isDirective(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "Directive") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isDirectiveLiteral(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "DirectiveLiteral") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isBlockStatement(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "BlockStatement") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isBreakStatement(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "BreakStatement") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isCallExpression(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "CallExpression") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isCatchClause(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "CatchClause") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isConditionalExpression(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "ConditionalExpression") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isContinueStatement(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "ContinueStatement") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isDebuggerStatement(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "DebuggerStatement") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isDoWhileStatement(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "DoWhileStatement") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isEmptyStatement(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "EmptyStatement") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isExpressionStatement(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "ExpressionStatement") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isFile(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "File") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isForInStatement(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "ForInStatement") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isForStatement(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "ForStatement") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isFunctionDeclaration(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "FunctionDeclaration") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isFunctionExpression(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "FunctionExpression") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isIdentifier(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "Identifier") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isIfStatement(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "IfStatement") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isLabeledStatement(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "LabeledStatement") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isStringLiteral(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "StringLiteral") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isNumericLiteral(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "NumericLiteral") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isNullLiteral(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "NullLiteral") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isBooleanLiteral(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "BooleanLiteral") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isRegExpLiteral(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "RegExpLiteral") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isLogicalExpression(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "LogicalExpression") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isMemberExpression(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "MemberExpression") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isNewExpression(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "NewExpression") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isProgram(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "Program") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isObjectExpression(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "ObjectExpression") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isObjectMethod(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "ObjectMethod") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isObjectProperty(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "ObjectProperty") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isRestElement(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "RestElement") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isReturnStatement(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "ReturnStatement") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isSequenceExpression(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "SequenceExpression") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isParenthesizedExpression(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "ParenthesizedExpression") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isSwitchCase(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "SwitchCase") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isSwitchStatement(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "SwitchStatement") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isThisExpression(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "ThisExpression") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isThrowStatement(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "ThrowStatement") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isTryStatement(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "TryStatement") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isUnaryExpression(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "UnaryExpression") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isUpdateExpression(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "UpdateExpression") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isVariableDeclaration(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "VariableDeclaration") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isVariableDeclarator(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "VariableDeclarator") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isWhileStatement(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "WhileStatement") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isWithStatement(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "WithStatement") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isAssignmentPattern(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "AssignmentPattern") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isArrayPattern(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "ArrayPattern") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isArrowFunctionExpression(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "ArrowFunctionExpression") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isClassBody(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "ClassBody") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isClassExpression(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "ClassExpression") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isClassDeclaration(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "ClassDeclaration") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isExportAllDeclaration(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "ExportAllDeclaration") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isExportDefaultDeclaration(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "ExportDefaultDeclaration") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isExportNamedDeclaration(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "ExportNamedDeclaration") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isExportSpecifier(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "ExportSpecifier") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isForOfStatement(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "ForOfStatement") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isImportDeclaration(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "ImportDeclaration") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isImportDefaultSpecifier(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "ImportDefaultSpecifier") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isImportNamespaceSpecifier(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "ImportNamespaceSpecifier") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isImportSpecifier(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "ImportSpecifier") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isMetaProperty(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "MetaProperty") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isClassMethod(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "ClassMethod") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isObjectPattern(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "ObjectPattern") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isSpreadElement(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "SpreadElement") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isSuper(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "Super") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isTaggedTemplateExpression(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "TaggedTemplateExpression") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isTemplateElement(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "TemplateElement") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isTemplateLiteral(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "TemplateLiteral") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isYieldExpression(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "YieldExpression") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isAwaitExpression(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "AwaitExpression") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isImport(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "Import") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isBigIntLiteral(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "BigIntLiteral") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isExportNamespaceSpecifier(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "ExportNamespaceSpecifier") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isOptionalMemberExpression(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "OptionalMemberExpression") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isOptionalCallExpression(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "OptionalCallExpression") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isClassProperty(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "ClassProperty") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isClassPrivateProperty(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "ClassPrivateProperty") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isClassPrivateMethod(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "ClassPrivateMethod") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isPrivateName(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "PrivateName") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isAnyTypeAnnotation(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "AnyTypeAnnotation") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isArrayTypeAnnotation(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "ArrayTypeAnnotation") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isBooleanTypeAnnotation(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "BooleanTypeAnnotation") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isBooleanLiteralTypeAnnotation(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "BooleanLiteralTypeAnnotation") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isNullLiteralTypeAnnotation(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "NullLiteralTypeAnnotation") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isClassImplements(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "ClassImplements") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isDeclareClass(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "DeclareClass") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isDeclareFunction(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "DeclareFunction") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isDeclareInterface(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "DeclareInterface") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isDeclareModule(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "DeclareModule") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isDeclareModuleExports(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "DeclareModuleExports") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isDeclareTypeAlias(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "DeclareTypeAlias") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isDeclareOpaqueType(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "DeclareOpaqueType") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isDeclareVariable(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "DeclareVariable") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isDeclareExportDeclaration(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "DeclareExportDeclaration") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isDeclareExportAllDeclaration(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "DeclareExportAllDeclaration") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isDeclaredPredicate(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "DeclaredPredicate") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isExistsTypeAnnotation(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "ExistsTypeAnnotation") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isFunctionTypeAnnotation(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "FunctionTypeAnnotation") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isFunctionTypeParam(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "FunctionTypeParam") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isGenericTypeAnnotation(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "GenericTypeAnnotation") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isInferredPredicate(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "InferredPredicate") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isInterfaceExtends(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "InterfaceExtends") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isInterfaceDeclaration(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "InterfaceDeclaration") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isInterfaceTypeAnnotation(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "InterfaceTypeAnnotation") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isIntersectionTypeAnnotation(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "IntersectionTypeAnnotation") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isMixedTypeAnnotation(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "MixedTypeAnnotation") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isEmptyTypeAnnotation(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "EmptyTypeAnnotation") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isNullableTypeAnnotation(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "NullableTypeAnnotation") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isNumberLiteralTypeAnnotation(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "NumberLiteralTypeAnnotation") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isNumberTypeAnnotation(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "NumberTypeAnnotation") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isObjectTypeAnnotation(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "ObjectTypeAnnotation") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isObjectTypeInternalSlot(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "ObjectTypeInternalSlot") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isObjectTypeCallProperty(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "ObjectTypeCallProperty") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isObjectTypeIndexer(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "ObjectTypeIndexer") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isObjectTypeProperty(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "ObjectTypeProperty") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isObjectTypeSpreadProperty(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "ObjectTypeSpreadProperty") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isOpaqueType(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "OpaqueType") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isQualifiedTypeIdentifier(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "QualifiedTypeIdentifier") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isStringLiteralTypeAnnotation(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "StringLiteralTypeAnnotation") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isStringTypeAnnotation(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "StringTypeAnnotation") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isSymbolTypeAnnotation(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "SymbolTypeAnnotation") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isThisTypeAnnotation(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "ThisTypeAnnotation") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isTupleTypeAnnotation(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "TupleTypeAnnotation") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isTypeofTypeAnnotation(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "TypeofTypeAnnotation") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isTypeAlias(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "TypeAlias") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isTypeAnnotation(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "TypeAnnotation") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isTypeCastExpression(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "TypeCastExpression") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isTypeParameter(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "TypeParameter") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isTypeParameterDeclaration(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "TypeParameterDeclaration") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isTypeParameterInstantiation(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "TypeParameterInstantiation") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isUnionTypeAnnotation(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "UnionTypeAnnotation") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isVariance(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "Variance") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isVoidTypeAnnotation(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "VoidTypeAnnotation") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isEnumDeclaration(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "EnumDeclaration") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isEnumBooleanBody(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "EnumBooleanBody") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isEnumNumberBody(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "EnumNumberBody") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isEnumStringBody(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "EnumStringBody") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isEnumSymbolBody(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "EnumSymbolBody") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isEnumBooleanMember(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "EnumBooleanMember") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isEnumNumberMember(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "EnumNumberMember") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isEnumStringMember(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "EnumStringMember") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isEnumDefaultedMember(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "EnumDefaultedMember") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isIndexedAccessType(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "IndexedAccessType") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isOptionalIndexedAccessType(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "OptionalIndexedAccessType") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isJSXAttribute(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "JSXAttribute") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isJSXClosingElement(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "JSXClosingElement") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isJSXElement(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "JSXElement") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isJSXEmptyExpression(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "JSXEmptyExpression") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isJSXExpressionContainer(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "JSXExpressionContainer") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isJSXSpreadChild(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "JSXSpreadChild") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isJSXIdentifier(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "JSXIdentifier") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isJSXMemberExpression(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "JSXMemberExpression") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isJSXNamespacedName(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "JSXNamespacedName") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isJSXOpeningElement(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "JSXOpeningElement") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isJSXSpreadAttribute(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "JSXSpreadAttribute") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isJSXText(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "JSXText") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isJSXFragment(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "JSXFragment") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isJSXOpeningFragment(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "JSXOpeningFragment") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isJSXClosingFragment(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "JSXClosingFragment") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isNoop(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "Noop") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isPlaceholder(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "Placeholder") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isV8IntrinsicIdentifier(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "V8IntrinsicIdentifier") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isArgumentPlaceholder(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "ArgumentPlaceholder") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isBindExpression(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "BindExpression") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isImportAttribute(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "ImportAttribute") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isDecorator(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "Decorator") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isDoExpression(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "DoExpression") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isExportDefaultSpecifier(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeType === "ExportDefaultSpecifier") {
        if (typeof opts === "undefined") {
            return true;
        } else {
            return (0, _shallowEqual.default)(node, opts);
        }
    }
    return false;
}
function isRecordExpression(node, opts) {
    if (!node) return false;
    var nodeType = node.type;
    if (nodeTyp
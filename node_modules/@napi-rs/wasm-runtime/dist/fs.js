function _mergeNamespaces(n, m) {
	m.forEach(function (e) {
		e && typeof e !== 'string' && !Array.isArray(e) && Object.keys(e).forEach(function (k) {
			if (k !== 'default' && !(k in n)) {
				var d = Object.getOwnPropertyDescriptor(e, k);
				Object.defineProperty(n, k, d.get ? d : {
					enumerable: true,
					get: function () { return e[k]; }
				});
			}
		});
	});
	return Object.freeze(n);
}

var commonjsGlobal$1 = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof undefined !== 'undefined' ? undefined : typeof self !== 'undefined' ? self : {};

function getDefaultExportFromCjs$1 (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function getAugmentedNamespace(n) {
  if (Object.prototype.hasOwnProperty.call(n, '__esModule')) return n;
  var f = n.default;
	if (typeof f == "function") {
		var a = function a () {
			if (this instanceof a) {
        return Reflect.construct(f, arguments, this.constructor);
			}
			return f.apply(this, arguments);
		};
		a.prototype = f.prototype;
  } else a = {};
  Object.defineProperty(a, '__esModule', {value: true});
	Object.keys(n).forEach(function (k) {
		var d = Object.getOwnPropertyDescriptor(n, k);
		Object.defineProperty(a, k, d.get ? d : {
			enumerable: true,
			get: function () {
				return n[k];
			}
		});
	});
	return a;
}

var lib$2 = {exports: {}};

var Stats = {};

var constants$2 = {};

var hasRequiredConstants$2;

function requireConstants$2 () {
	if (hasRequiredConstants$2) return constants$2;
	hasRequiredConstants$2 = 1;
	Object.defineProperty(constants$2, "__esModule", { value: true });
	constants$2.constants = void 0;
	constants$2.constants = {
	    O_RDONLY: 0,
	    O_WRONLY: 1,
	    O_RDWR: 2,
	    S_IFMT: 61440,
	    S_IFREG: 32768,
	    S_IFDIR: 16384,
	    S_IFCHR: 8192,
	    S_IFBLK: 24576,
	    S_IFIFO: 4096,
	    S_IFLNK: 40960,
	    S_IFSOCK: 49152,
	    O_CREAT: 64,
	    O_EXCL: 128,
	    O_NOCTTY: 256,
	    O_TRUNC: 512,
	    O_APPEND: 1024,
	    O_DIRECTORY: 65536,
	    O_NOATIME: 262144,
	    O_NOFOLLOW: 131072,
	    O_SYNC: 1052672,
	    O_SYMLINK: 2097152,
	    O_DIRECT: 16384,
	    O_NONBLOCK: 2048,
	    S_IRWXU: 448,
	    S_IRUSR: 256,
	    S_IWUSR: 128,
	    S_IXUSR: 64,
	    S_IRWXG: 56,
	    S_IRGRP: 32,
	    S_IWGRP: 16,
	    S_IXGRP: 8,
	    S_IRWXO: 7,
	    S_IROTH: 4,
	    S_IWOTH: 2,
	    S_IXOTH: 1,
	    F_OK: 0,
	    R_OK: 4,
	    W_OK: 2,
	    X_OK: 1,
	    UV_FS_SYMLINK_DIR: 1,
	    UV_FS_SYMLINK_JUNCTION: 2,
	    UV_FS_COPYFILE_EXCL: 1,
	    UV_FS_COPYFILE_FICLONE: 2,
	    UV_FS_COPYFILE_FICLONE_FORCE: 4,
	    COPYFILE_EXCL: 1,
	    COPYFILE_FICLONE: 2,
	    COPYFILE_FICLONE_FORCE: 4,
	};
	
	return constants$2;
}

var hasRequiredStats;

function requireStats () {
	if (hasRequiredStats) return Stats;
	hasRequiredStats = 1;
	Object.defineProperty(Stats, "__esModule", { value: true });
	Stats.Stats = void 0;
	const constants_1 = requireConstants$2();
	const { S_IFMT, S_IFDIR, S_IFREG, S_IFBLK, S_IFCHR, S_IFLNK, S_IFIFO, S_IFSOCK } = constants_1.constants;
	/**
	 * Statistics about a file/directory, like `fs.Stats`.
	 */
	let Stats$1 = class Stats {
	    static build(node, bigint = false) {
	        const stats = new Stats();
	        const { uid, gid, atime, mtime, ctime } = node;
	        const getStatNumber = !bigint ? number => number : number => BigInt(number);
	        // Copy all values on Stats from Node, so that if Node values
	        // change, values on Stats would still be the old ones,
	        // just like in Node fs.
	        stats.uid = getStatNumber(uid);
	        stats.gid = getStatNumber(gid);
	        stats.rdev = getStatNumber(node.rdev);
	        stats.blksize = getStatNumber(4096);
	        stats.ino = getStatNumber(node.ino);
	        stats.size = getStatNumber(node.getSize());
	        stats.blocks = getStatNumber(1);
	        stats.atime = atime;
	        stats.mtime = mtime;
	        stats.ctime = ctime;
	        stats.birthtime = ctime;
	        stats.atimeMs = getStatNumber(atime.getTime());
	        stats.mtimeMs = getStatNumber(mtime.getTime());
	        const ctimeMs = getStatNumber(ctime.getTime());
	        stats.ctimeMs = ctimeMs;
	        stats.birthtimeMs = ctimeMs;
	        if (bigint) {
	            stats.atimeNs = BigInt(atime.getTime()) * BigInt(1000000);
	            stats.mtimeNs = BigInt(mtime.getTime()) * BigInt(1000000);
	            const ctimeNs = BigInt(ctime.getTime()) * BigInt(1000000);
	            stats.ctimeNs = ctimeNs;
	            stats.birthtimeNs = ctimeNs;
	        }
	        stats.dev = getStatNumber(0);
	        stats.mode = getStatNumber(node.mode);
	        stats.nlink = getStatNumber(node.nlink);
	        return stats;
	    }
	    _checkModeProperty(property) {
	        return (Number(this.mode) & S_IFMT) === property;
	    }
	    isDirectory() {
	        return this._checkModeProperty(S_IFDIR);
	    }
	    isFile() {
	        return this._checkModeProperty(S_IFREG);
	    }
	    isBlockDevice() {
	        return this._checkModeProperty(S_IFBLK);
	    }
	    isCharacterDevice() {
	        return this._checkModeProperty(S_IFCHR);
	    }
	    isSymbolicLink() {
	        return this._checkModeProperty(S_IFLNK);
	    }
	    isFIFO() {
	        return this._checkModeProperty(S_IFIFO);
	    }
	    isSocket() {
	        return this._checkModeProperty(S_IFSOCK);
	    }
	};
	Stats.Stats = Stats$1;
	Stats.default = Stats$1;
	
	return Stats;
}

var Dirent = {};

var encoding = {};

var buffer$2 = {};

var base64Js = {};

var hasRequiredBase64Js;

function requireBase64Js () {
	if (hasRequiredBase64Js) return base64Js;
	hasRequiredBase64Js = 1;

	base64Js.byteLength = byteLength;
	base64Js.toByteArray = toByteArray;
	base64Js.fromByteArray = fromByteArray;

	var lookup = [];
	var revLookup = [];
	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;

	var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
	for (var i = 0, len = code.length; i < len; ++i) {
	  lookup[i] = code[i];
	  revLookup[code.charCodeAt(i)] = i;
	}

	// Support decoding URL-safe base64 strings, as Node.js does.
	// See: https://en.wikipedia.org/wiki/Base64#URL_applications
	revLookup['-'.charCodeAt(0)] = 62;
	revLookup['_'.charCodeAt(0)] = 63;

	function getLens (b64) {
	  var len = b64.length;

	  if (len % 4 > 0) {
	    throw new Error('Invalid string. Length must be a multiple of 4')
	  }

	  // Trim off extra bytes after placeholder bytes are found
	  // See: https://github.com/beatgammit/base64-js/issues/42
	  var validLen = b64.indexOf('=');
	  if (validLen === -1) validLen = len;

	  var placeHoldersLen = validLen === len
	    ? 0
	    : 4 - (validLen % 4);

	  return [validLen, placeHoldersLen]
	}

	// base64 is 4/3 + up to two characters of the original data
	function byteLength (b64) {
	  var lens = getLens(b64);
	  var validLen = lens[0];
	  var placeHoldersLen = lens[1];
	  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
	}

	function _byteLength (b64, validLen, placeHoldersLen) {
	  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
	}

	function toByteArray (b64) {
	  var tmp;
	  var lens = getLens(b64);
	  var validLen = lens[0];
	  var placeHoldersLen = lens[1];

	  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));

	  var curByte = 0;

	  // if there are placeholders, only get up to the last complete 4 chars
	  var len = placeHoldersLen > 0
	    ? validLen - 4
	    : validLen;

	  var i;
	  for (i = 0; i < len; i += 4) {
	    tmp =
	      (revLookup[b64.charCodeAt(i)] << 18) |
	      (revLookup[b64.charCodeAt(i + 1)] << 12) |
	      (revLookup[b64.charCodeAt(i + 2)] << 6) |
	      revLookup[b64.charCodeAt(i + 3)];
	    arr[curByte++] = (tmp >> 16) & 0xFF;
	    arr[curByte++] = (tmp >> 8) & 0xFF;
	    arr[curByte++] = tmp & 0xFF;
	  }

	  if (placeHoldersLen === 2) {
	    tmp =
	      (revLookup[b64.charCodeAt(i)] << 2) |
	      (revLookup[b64.charCodeAt(i + 1)] >> 4);
	    arr[curByte++] = tmp & 0xFF;
	  }

	  if (placeHoldersLen === 1) {
	    tmp =
	      (revLookup[b64.charCodeAt(i)] << 10) |
	      (revLookup[b64.charCodeAt(i + 1)] << 4) |
	      (revLookup[b64.charCodeAt(i + 2)] >> 2);
	    arr[curByte++] = (tmp >> 8) & 0xFF;
	    arr[curByte++] = tmp & 0xFF;
	  }

	  return arr
	}

	function tripletToBase64 (num) {
	  return lookup[num >> 18 & 0x3F] +
	    lookup[num >> 12 & 0x3F] +
	    lookup[num >> 6 & 0x3F] +
	    lookup[num & 0x3F]
	}

	function encodeChunk (uint8, start, end) {
	  var tmp;
	  var output = [];
	  for (var i = start; i < end; i += 3) {
	    tmp =
	      ((uint8[i] << 16) & 0xFF0000) +
	      ((uint8[i + 1] << 8) & 0xFF00) +
	      (uint8[i + 2] & 0xFF);
	    output.push(tripletToBase64(tmp));
	  }
	  return output.join('')
	}

	function fromByteArray (uint8) {
	  var tmp;
	  var len = uint8.length;
	  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
	  var parts = [];
	  var maxChunkLength = 16383; // must be multiple of 3

	  // go through the array every three bytes, we'll deal with trailing stuff later
	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
	    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
	  }

	  // pad the end with zeros, but make sure to not forget the extra bytes
	  if (extraBytes === 1) {
	    tmp = uint8[len - 1];
	    parts.push(
	      lookup[tmp >> 2] +
	      lookup[(tmp << 4) & 0x3F] +
	      '=='
	    );
	  } else if (extraBytes === 2) {
	    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
	    parts.push(
	      lookup[tmp >> 10] +
	      lookup[(tmp >> 4) & 0x3F] +
	      lookup[(tmp << 2) & 0x3F] +
	      '='
	    );
	  }

	  return parts.join('')
	}
	return base64Js;
}

var base64JsExports = requireBase64Js();

var ieee754 = {};

/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */

var hasRequiredIeee754;

function requireIeee754 () {
	if (hasRequiredIeee754) return ieee754;
	hasRequiredIeee754 = 1;
	ieee754.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m;
	  var eLen = (nBytes * 8) - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var nBits = -7;
	  var i = isLE ? (nBytes - 1) : 0;
	  var d = isLE ? -1 : 1;
	  var s = buffer[offset + i];

	  i += d;

	  e = s & ((1 << (-nBits)) - 1);
	  s >>= (-nBits);
	  nBits += eLen;
	  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1);
	  e >>= (-nBits);
	  nBits += mLen;
	  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias;
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen);
	    e = e - eBias;
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	};

	ieee754.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c;
	  var eLen = (nBytes * 8) - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
	  var i = isLE ? 0 : (nBytes - 1);
	  var d = isLE ? 1 : -1;
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

	  value = Math.abs(value);

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0;
	    e = eMax;
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2);
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--;
	      c *= 2;
	    }
	    if (e + eBias >= 1) {
	      value += rt / c;
	    } else {
	      value += rt * Math.pow(2, 1 - eBias);
	    }
	    if (value * c >= 2) {
	      e++;
	      c /= 2;
	    }

	    if (e + eBias >= eMax) {
	      m = 0;
	      e = eMax;
	    } else if (e + eBias >= 1) {
	      m = ((value * c) - 1) * Math.pow(2, mLen);
	      e = e + eBias;
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
	      e = 0;
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m;
	  eLen += mLen;
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128;
	};
	return ieee754;
}

var ieee754Exports = requireIeee754();

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

const customInspectSymbol =
  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation
    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation
    : null;

const INSPECT_MAX_BYTES = 50;

const K_MAX_LENGTH = 0x7fffffff;
const kMaxLength = K_MAX_LENGTH;

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  );
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    const arr = new Uint8Array(1);
    const proto = { foo: function () { return 42 } };
    Object.setPrototypeOf(proto, Uint8Array.prototype);
    Object.setPrototypeOf(arr, proto);
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
});

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
});

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  const buf = new Uint8Array(length);
  Object.setPrototypeOf(buf, Buffer.prototype);
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192; // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayView(value)
  }

  if (value == null) {
    throw new TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof SharedArrayBuffer !== 'undefined' &&
      (isInstance(value, SharedArrayBuffer) ||
      (value && isInstance(value.buffer, SharedArrayBuffer)))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  const valueOf = value.valueOf && value.valueOf();
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  const b = fromObject(value);
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
};

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
Object.setPrototypeOf(Buffer, Uint8Array);

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size);
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
};

function allocUnsafe (size) {
  assertSize(size);
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
};

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8';
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  const length = byteLength(string, encoding) | 0;
  let buf = createBuffer(length);

  const actual = buf.write(string, encoding);

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual);
  }

  return buf
}

function fromArrayLike (array) {
  const length = array.length < 0 ? 0 : checked(array.length) | 0;
  const buf = createBuffer(length);
  for (let i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255;
  }
  return buf
}

function fromArrayView (arrayView) {
  if (isInstance(arrayView, Uint8Array)) {
    const copy = new Uint8Array(arrayView);
    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)
  }
  return fromArrayLike(arrayView)
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  let buf;
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array);
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset);
  } else {
    buf = new Uint8Array(array, byteOffset, length);
  }

  // Return an augmented `Uint8Array` instance
  Object.setPrototypeOf(buf, Buffer.prototype);

  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    const len = checked(obj.length) | 0;
    const buf = createBuffer(len);

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len);
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0;
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
};

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  let x = a.length;
  let y = b.length;

  for (let i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
};

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
};

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  let i;
  if (length === undefined) {
    length = 0;
    for (i = 0; i < list.length; ++i) {
      length += list[i].length;
    }
  }

  const buffer = Buffer.allocUnsafe(length);
  let pos = 0;
  for (i = 0; i < list.length; ++i) {
    let buf = list[i];
    if (isInstance(buf, Uint8Array)) {
      if (pos + buf.length > buffer.length) {
        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf);
        buf.copy(buffer, pos);
      } else {
        Uint8Array.prototype.set.call(
          buffer,
          buf,
          pos
        );
      }
    } else if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    } else {
      buf.copy(buffer, pos);
    }
    pos += buf.length;
  }
  return buffer
};

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  const len = string.length;
  const mustMatch = (arguments.length > 2 && arguments[2] === true);
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  let loweredCase = false;
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
}
Buffer.byteLength = byteLength;

function slowToString (encoding, start, end) {
  let loweredCase = false;

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0;
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length;
  }

  if (end <= 0) {
    return ''
  }

  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0;
  start >>>= 0;

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8';

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase();
        loweredCase = true;
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true;

function swap (b, n, m) {
  const i = b[n];
  b[n] = b[m];
  b[m] = i;
}

Buffer.prototype.swap16 = function swap16 () {
  const len = this.length;
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (let i = 0; i < len; i += 2) {
    swap(this, i, i + 1);
  }
  return this
};

Buffer.prototype.swap32 = function swap32 () {
  const len = this.length;
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (let i = 0; i < len; i += 4) {
    swap(this, i, i + 3);
    swap(this, i + 1, i + 2);
  }
  return this
};

Buffer.prototype.swap64 = function swap64 () {
  const len = this.length;
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (let i = 0; i < len; i += 8) {
    swap(this, i, i + 7);
    swap(this, i + 1, i + 6);
    swap(this, i + 2, i + 5);
    swap(this, i + 3, i + 4);
  }
  return this
};

Buffer.prototype.toString = function toString () {
  const length = this.length;
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
};

Buffer.prototype.toLocaleString = Buffer.prototype.toString;

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
};

Buffer.prototype.inspect = function inspect () {
  let str = '';
  const max = INSPECT_MAX_BYTES;
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();
  if (this.length > max) str += ' ... ';
  return '<Buffer ' + str + '>'
};
if (customInspectSymbol) {
  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength);
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0;
  }
  if (end === undefined) {
    end = target ? target.length : 0;
  }
  if (thisStart === undefined) {
    thisStart = 0;
  }
  if (thisEnd === undefined) {
    thisEnd = this.length;
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0;
  end >>>= 0;
  thisStart >>>= 0;
  thisEnd >>>= 0;

  if (this === target) return 0

  let x = thisEnd - thisStart;
  let y = end - start;
  const len = Math.min(x, y);

  const thisCopy = this.slice(thisStart, thisEnd);
  const targetCopy = target.slice(start, end);

  for (let i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i];
      y = targetCopy[i];
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
};

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset;
    byteOffset = 0;
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff;
  } else if (byteOffset < -2147483648) {
    byteOffset = -2147483648;
  }
  byteOffset = +byteOffset; // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1);
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1;
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0;
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding);
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF; // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  let indexSize = 1;
  let arrLength = arr.length;
  let valLength = val.length;

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase();
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2;
      arrLength /= 2;
      valLength /= 2;
      byteOffset /= 2;
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  let i;
  if (dir) {
    let foundIndex = -1;
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i;
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex;
        foundIndex = -1;
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
    for (i = byteOffset; i >= 0; i--) {
      let found = true;
      for (let j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false;
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
};

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
};

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
};

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0;
  const remaining = buf.length - offset;
  if (!length) {
    length = remaining;
  } else {
    length = Number(length);
    if (length > remaining) {
      length = remaining;
    }
  }

  const strLen = string.length;

  if (length > strLen / 2) {
    length = strLen / 2;
  }
  let i;
  for (i = 0; i < length; ++i) {
    const parsed = parseInt(string.substr(i * 2, 2), 16);
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed;
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8';
    length = this.length;
    offset = 0;
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset;
    length = this.length;
    offset = 0;
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0;
    if (isFinite(length)) {
      length = length >>> 0;
      if (encoding === undefined) encoding = 'utf8';
    } else {
      encoding = length;
      length = undefined;
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  const remaining = this.length - offset;
  if (length === undefined || length > remaining) length = remaining;

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8';

  let loweredCase = false;
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
      case 'latin1':
      case 'binary':
        return asciiWrite(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
};

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
};

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64JsExports.fromByteArray(buf)
  } else {
    return base64JsExports.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end);
  const res = [];

  let i = start;
  while (i < end) {
    const firstByte = buf[i];
    let codePoint = null;
    let bytesPerSequence = (firstByte > 0xEF)
      ? 4
      : (firstByte > 0xDF)
          ? 3
          : (firstByte > 0xBF)
              ? 2
              : 1;

    if (i + bytesPerSequence <= end) {
      let secondByte, thirdByte, fourthByte, tempCodePoint;

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte;
          }
          break
        case 2:
          secondByte = buf[i + 1];
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint;
            }
          }
          break
        case 3:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint;
            }
          }
          break
        case 4:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          fourthByte = buf[i + 3];
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint;
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD;
      bytesPerSequence = 1;
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000;
      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
      codePoint = 0xDC00 | codePoint & 0x3FF;
    }

    res.push(codePoint);
    i += bytesPerSequence;
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
const MAX_ARGUMENTS_LENGTH = 0x1000;

function decodeCodePointsArray (codePoints) {
  const len = codePoints.length;
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  let res = '';
  let i = 0;
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    );
  }
  return res
}

function asciiSlice (buf, start, end) {
  let ret = '';
  end = Math.min(buf.length, end);

  for (let i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F);
  }
  return ret
}

function latin1Slice (buf, start, end) {
  let ret = '';
  end = Math.min(buf.length, end);

  for (let i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i]);
  }
  return ret
}

function hexSlice (buf, start, end) {
  const len = buf.length;

  if (!start || start < 0) start = 0;
  if (!end || end < 0 || end > len) end = len;

  let out = '';
  for (let i = start; i < end; ++i) {
    out += hexSliceLookupTable[buf[i]];
  }
  return out
}

function utf16leSlice (buf, start, end) {
  const bytes = buf.slice(start, end);
  let res = '';
  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
  for (let i = 0; i < bytes.length - 1; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256));
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  const len = this.length;
  start = ~~start;
  end = end === undefined ? len : ~~end;

  if (start < 0) {
    start += len;
    if (start < 0) start = 0;
  } else if (start > len) {
    start = len;
  }

  if (end < 0) {
    end += len;
    if (end < 0) end = 0;
  } else if (end > len) {
    end = len;
  }

  if (end < start) end = start;

  const newBuf = this.subarray(start, end);
  // Return an augmented `Uint8Array` instance
  Object.setPrototypeOf(newBuf, Buffer.prototype);

  return newBuf
};

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUintLE =
Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);

  let val = this[offset];
  let mul = 1;
  let i = 0;
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }

  return val
};

Buffer.prototype.readUintBE =
Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length);
  }

  let val = this[offset + --byteLength];
  let mul = 1;
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul;
  }

  return val
};

Buffer.prototype.readUint8 =
Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 1, this.length);
  return this[offset]
};

Buffer.prototype.readUint16LE =
Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] | (this[offset + 1] << 8)
};

Buffer.prototype.readUint16BE =
Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 2, this.length);
  return (this[offset] << 8) | this[offset + 1]
};

Buffer.prototype.readUint32LE =
Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
};

Buffer.prototype.readUint32BE =
Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
};

Buffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {
  offset = offset >>> 0;
  validateNumber(offset, 'offset');
  const first = this[offset];
  const last = this[offset + 7];
  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8);
  }

  const lo = first +
    this[++offset] * 2 ** 8 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 24;

  const hi = this[++offset] +
    this[++offset] * 2 ** 8 +
    this[++offset] * 2 ** 16 +
    last * 2 ** 24;

  return BigInt(lo) + (BigInt(hi) << BigInt(32))
});

Buffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {
  offset = offset >>> 0;
  validateNumber(offset, 'offset');
  const first = this[offset];
  const last = this[offset + 7];
  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8);
  }

  const hi = first * 2 ** 24 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    this[++offset];

  const lo = this[++offset] * 2 ** 24 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    last;

  return (BigInt(hi) << BigInt(32)) + BigInt(lo)
});

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);

  let val = this[offset];
  let mul = 1;
  let i = 0;
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }
  mul *= 0x80;

  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

  return val
};

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);

  let i = byteLength;
  let mul = 1;
  let val = this[offset + --i];
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul;
  }
  mul *= 0x80;

  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

  return val
};

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 1, this.length);
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
};

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 2, this.length);
  const val = this[offset] | (this[offset + 1] << 8);
  return (val & 0x8000) ? val | 0xFFFF0000 : val
};

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 2, this.length);
  const val = this[offset + 1] | (this[offset] << 8);
  return (val & 0x8000) ? val | 0xFFFF0000 : val
};

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
};

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
};

Buffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {
  offset = offset >>> 0;
  validateNumber(offset, 'offset');
  const first = this[offset];
  const last = this[offset + 7];
  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8);
  }

  const val = this[offset + 4] +
    this[offset + 5] * 2 ** 8 +
    this[offset + 6] * 2 ** 16 +
    (last << 24); // Overflow

  return (BigInt(val) << BigInt(32)) +
    BigInt(first +
    this[++offset] * 2 ** 8 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 24)
});

Buffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {
  offset = offset >>> 0;
  validateNumber(offset, 'offset');
  const first = this[offset];
  const last = this[offset + 7];
  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8);
  }

  const val = (first << 24) + // Overflow
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    this[++offset];

  return (BigInt(val) << BigInt(32)) +
    BigInt(this[++offset] * 2 ** 24 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    last)
});

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);
  return ieee754Exports.read(this, offset, true, 23, 4)
};

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 4, this.length);
  return ieee754Exports.read(this, offset, false, 23, 4)
};

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 8, this.length);
  return ieee754Exports.read(this, offset, true, 52, 8)
};

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0;
  if (!noAssert) checkOffset(offset, 8, this.length);
  return ieee754Exports.read(this, offset, false, 52, 8)
};

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUintLE =
Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;
  if (!noAssert) {
    const maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  let mul = 1;
  let i = 0;
  this[offset] = value & 0xFF;
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF;
  }

  return offset + byteLength
};

Buffer.prototype.writeUintBE =
Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset >>> 0;
  byteLength = byteLength >>> 0;
  if (!noAssert) {
    const maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  let i = byteLength - 1;
  let mul = 1;
  this[offset + i] = value & 0xFF;
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF;
  }

  return offset + byteLength
};

Buffer.prototype.writeUint8 =
Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
  this[offset] = (value & 0xff);
  return offset + 1
};

Buffer.prototype.writeUint16LE =
Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
  this[offset] = (value & 0xff);
  this[offset + 1] = (value >>> 8);
  return offset + 2
};

Buffer.prototype.writeUint16BE =
Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
  this[offset] = (value >>> 8);
  this[offset + 1] = (value & 0xff);
  return offset + 2
};

Buffer.prototype.writeUint32LE =
Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
  this[offset + 3] = (value >>> 24);
  this[offset + 2] = (value >>> 16);
  this[offset + 1] = (value >>> 8);
  this[offset] = (value & 0xff);
  return offset + 4
};

Buffer.prototype.writeUint32BE =
Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
  this[offset] = (value >>> 24);
  this[offset + 1] = (value >>> 16);
  this[offset + 2] = (value >>> 8);
  this[offset + 3] = (value & 0xff);
  return offset + 4
};

function wrtBigUInt64LE (buf, value, offset, min, max) {
  checkIntBI(value, min, max, buf, offset, 7);

  let lo = Number(value & BigInt(0xffffffff));
  buf[offset++] = lo;
  lo = lo >> 8;
  buf[offset++] = lo;
  lo = lo >> 8;
  buf[offset++] = lo;
  lo = lo >> 8;
  buf[offset++] = lo;
  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
  buf[offset++] = hi;
  hi = hi >> 8;
  buf[offset++] = hi;
  hi = hi >> 8;
  buf[offset++] = hi;
  hi = hi >> 8;
  buf[offset++] = hi;
  return offset
}

function wrtBigUInt64BE (buf, value, offset, min, max) {
  checkIntBI(value, min, max, buf, offset, 7);

  let lo = Number(value & BigInt(0xffffffff));
  buf[offset + 7] = lo;
  lo = lo >> 8;
  buf[offset + 6] = lo;
  lo = lo >> 8;
  buf[offset + 5] = lo;
  lo = lo >> 8;
  buf[offset + 4] = lo;
  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
  buf[offset + 3] = hi;
  hi = hi >> 8;
  buf[offset + 2] = hi;
  hi = hi >> 8;
  buf[offset + 1] = hi;
  hi = hi >> 8;
  buf[offset] = hi;
  return offset + 8
}

Buffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {
  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))
});

Buffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {
  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))
});

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) {
    const limit = Math.pow(2, (8 * byteLength) - 1);

    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  let i = 0;
  let mul = 1;
  let sub = 0;
  this[offset] = value & 0xFF;
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1;
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
  }

  return offset + byteLength
};

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) {
    const limit = Math.pow(2, (8 * byteLength) - 1);

    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  let i = byteLength - 1;
  let mul = 1;
  let sub = 0;
  this[offset + i] = value & 0xFF;
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1;
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
  }

  return offset + byteLength
};

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -128);
  if (value < 0) value = 0xff + value + 1;
  this[offset] = (value & 0xff);
  return offset + 1
};

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
  this[offset] = (value & 0xff);
  this[offset + 1] = (value >>> 8);
  return offset + 2
};

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
  this[offset] = (value >>> 8);
  this[offset + 1] = (value & 0xff);
  return offset + 2
};

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
  this[offset] = (value & 0xff);
  this[offset + 1] = (value >>> 8);
  this[offset + 2] = (value >>> 16);
  this[offset + 3] = (value >>> 24);
  return offset + 4
};

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
  if (value < 0) value = 0xffffffff + value + 1;
  this[offset] = (value >>> 24);
  this[offset + 1] = (value >>> 16);
  this[offset + 2] = (value >>> 8);
  this[offset + 3] = (value & 0xff);
  return offset + 4
};

Buffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {
  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))
});

Buffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {
  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))
});

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4);
  }
  ieee754Exports.write(buf, value, offset, littleEndian, 23, 4);
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
};

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
};

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value;
  offset = offset >>> 0;
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8);
  }
  ieee754Exports.write(buf, value, offset, littleEndian, 52, 8);
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
};

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
};

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0;
  if (!end && end !== 0) end = this.length;
  if (targetStart >= target.length) targetStart = target.length;
  if (!targetStart) targetStart = 0;
  if (end > 0 && end < start) end = start;

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length;
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start;
  }

  const len = end - start;

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end);
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    );
  }

  return len
};

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start;
      start = 0;
      end = this.length;
    } else if (typeof end === 'string') {
      encoding = end;
      end = this.length;
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      const code = val.charCodeAt(0);
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code;
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255;
  } else if (typeof val === 'boolean') {
    val = Number(val);
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0;
  end = end === undefined ? this.length : end >>> 0;

  if (!val) val = 0;

  let i;
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val;
    }
  } else {
    const bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding);
    const len = bytes.length;
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len];
    }
  }

  return this
};

// CUSTOM ERRORS
// =============

// Simplified versions from Node, changed for Buffer-only usage
const errors$3 = {};
function E (sym, getMessage, Base) {
  errors$3[sym] = class NodeError extends Base {
    constructor () {
      super();

      Object.defineProperty(this, 'message', {
        value: getMessage.apply(this, arguments),
        writable: true,
        configurable: true
      });

      // Add the error code to the name to include it in the stack trace.
      this.name = `${this.name} [${sym}]`;
      // Access the stack to generate the error message including the error code
      // from the name.
      this.stack; // eslint-disable-line no-unused-expressions
      // Reset the name to the actual name.
      delete this.name;
    }

    get code () {
      return sym
    }

    set code (value) {
      Object.defineProperty(this, 'code', {
        configurable: true,
        enumerable: true,
        value,
        writable: true
      });
    }

    toString () {
      return `${this.name} [${sym}]: ${this.message}`
    }
  };
}

E('ERR_BUFFER_OUT_OF_BOUNDS',
  function (name) {
    if (name) {
      return `${name} is outside of buffer bounds`
    }

    return 'Attempt to access memory outside buffer bounds'
  }, RangeError);
E('ERR_INVALID_ARG_TYPE',
  function (name, actual) {
    return `The "${name}" argument must be of type number. Received type ${typeof actual}`
  }, TypeError);
E('ERR_OUT_OF_RANGE',
  function (str, range, input) {
    let msg = `The value of "${str}" is out of range.`;
    let received = input;
    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
      received = addNumericalSeparator(String(input));
    } else if (typeof input === 'bigint') {
      received = String(input);
      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
        received = addNumericalSeparator(received);
      }
      received += 'n';
    }
    msg += ` It must be ${range}. Received ${received}`;
    return msg
  }, RangeError);

function addNumericalSeparator (val) {
  let res = '';
  let i = val.length;
  const start = val[0] === '-' ? 1 : 0;
  for (; i >= start + 4; i -= 3) {
    res = `_${val.slice(i - 3, i)}${res}`;
  }
  return `${val.slice(0, i)}${res}`
}

// CHECK FUNCTIONS
// ===============

function checkBounds (buf, offset, byteLength) {
  validateNumber(offset, 'offset');
  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {
    boundsError(offset, buf.length - (byteLength + 1));
  }
}

function checkIntBI (value, min, max, buf, offset, byteLength) {
  if (value > max || value < min) {
    const n = typeof min === 'bigint' ? 'n' : '';
    let range;
    {
      if (min === 0 || min === BigInt(0)) {
        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`;
      } else {
        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +
                `${(byteLength + 1) * 8 - 1}${n}`;
      }
    }
    throw new errors$3.ERR_OUT_OF_RANGE('value', range, value)
  }
  checkBounds(buf, offset, byteLength);
}

function validateNumber (value, name) {
  if (typeof value !== 'number') {
    throw new errors$3.ERR_INVALID_ARG_TYPE(name, 'number', value)
  }
}

function boundsError (value, length, type) {
  if (Math.floor(value) !== value) {
    validateNumber(value, type);
    throw new errors$3.ERR_OUT_OF_RANGE('offset', 'an integer', value)
  }

  if (length < 0) {
    throw new errors$3.ERR_BUFFER_OUT_OF_BOUNDS()
  }

  throw new errors$3.ERR_OUT_OF_RANGE('offset',
                                    `>= ${0} and <= ${length}`,
                                    value)
}

// HELPER FUNCTIONS
// ================

const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0];
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '');
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '=';
  }
  return str
}

function utf8ToBytes (string, units) {
  units = units || Infinity;
  let codePoint;
  const length = string.length;
  let leadSurrogate = null;
  const bytes = [];

  for (let i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i);

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue
        }

        // valid lead
        leadSurrogate = codePoint;

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        leadSurrogate = codePoint;
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
    }

    leadSurrogate = null;

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint);
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      );
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      );
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      );
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  const byteArray = [];
  for (let i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  let c, hi, lo;
  const byteArray = [];
  for (let i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i);
    hi = c >> 8;
    lo = c % 256;
    byteArray.push(lo);
    byteArray.push(hi);
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64JsExports.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  let i;
  for (i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i];
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
const hexSliceLookupTable = (function () {
  const alphabet = '0123456789abcdef';
  const table = new Array(256);
  for (let i = 0; i < 16; ++i) {
    const i16 = i * 16;
    for (let j = 0; j < 16; ++j) {
      table[i16 + j] = alphabet[i] + alphabet[j];
    }
  }
  return table
})();

// Return not function with Error if BigInt not supported
function defineBigIntMethod (fn) {
  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn
}

function BufferBigIntNotDefined () {
  throw new Error('BigInt not supported')
}

var buffer$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	Buffer: Buffer,
	INSPECT_MAX_BYTES: INSPECT_MAX_BYTES,
	SlowBuffer: SlowBuffer,
	kMaxLength: kMaxLength
});

var require$$0$2 = /*@__PURE__*/getAugmentedNamespace(buffer$1);

var hasRequiredBuffer$1;

function requireBuffer$1 () {
	if (hasRequiredBuffer$1) return buffer$2;
	hasRequiredBuffer$1 = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.bufferFrom = exports.bufferAllocUnsafe = exports.Buffer = void 0;
		const buffer_1 = require$$0$2;
		Object.defineProperty(exports, "Buffer", { enumerable: true, get: function () { return buffer_1.Buffer; } });
		function bufferV0P12Ponyfill(arg0, ...args) {
		    return new buffer_1.Buffer(arg0, ...args);
		}
		const bufferAllocUnsafe = buffer_1.Buffer.allocUnsafe || bufferV0P12Ponyfill;
		exports.bufferAllocUnsafe = bufferAllocUnsafe;
		const bufferFrom = buffer_1.Buffer.from || bufferV0P12Ponyfill;
		exports.bufferFrom = bufferFrom;
		
	} (buffer$2));
	return buffer$2;
}

var errors$2 = {};

var assert$1 = {exports: {}};

var hasRequiredAssert;

function requireAssert () {
	if (hasRequiredAssert) return assert$1.exports;
	hasRequiredAssert = 1;
	function assert(condition, message) {
	  if (!condition) {
	    throw new Error(message || 'Assertion failed')
	  }
	}

	assert$1.exports = assert;

	assert$1.exports.strictEqual = function strictEqual(a, b) {
	  if (a !== b) {
	    throw new Error(`Expected ${a} to strict equal ${b}`)
	  }
	};
	return assert$1.exports;
}

var browser$2 = {exports: {}};

var hasRequiredBrowser$2;

function requireBrowser$2 () {
	if (hasRequiredBrowser$2) return browser$2.exports;
	hasRequiredBrowser$2 = 1;
	// shim for using process in browser
	var process = browser$2.exports = {};

	// cached from whatever undefined is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.

	var cachedSetTimeout;
	var cachedClearTimeout;

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ());
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the undefined object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the undefined object for 'this', hopfully our context correct otherwise it will throw a undefined error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the undefined object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the undefined object for 'this', hopfully our context correct otherwise it will throw a undefined error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	process.prependListener = noop;
	process.prependOnceListener = noop;

	process.listeners = function (name) { return [] };

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };
	return browser$2.exports;
}

var browserExports = requireBrowser$2();
var process$1 = /*@__PURE__*/getDefaultExportFromCjs$1(browserExports);

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {};

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

var primordials$1 = {exports: {}};

// back-patch in primordials in user-land

const createSafeIterator = (factory, next) => {
  class SafeIterator {
    constructor(iterable) {
      this._iterator = factory(iterable);
    }
    next() {
      return next(this._iterator);
    }
    [Symbol.iterator]() {
      return this;
    }
  }
  Object.setPrototypeOf(SafeIterator.prototype, null);
  Object.freeze(SafeIterator.prototype);
  Object.freeze(SafeIterator);
  return SafeIterator;
};

function getGetter(cls, getter) {
  // TODO: __lookupGetter__ is deprecated, but Object.getOwnPropertyDescriptor
  // doesn't work on built-ins like Typed Arrays.
  return Function.prototype.call.bind(cls.prototype.__lookupGetter__(getter));
}

function getterCaller(getter) {
  return (val) => {
    return val.constructor.prototype.__lookupGetter__(getter).call(val);
  };
}

function uncurryThis(func) {
  return Function.prototype.call.bind(func);
}

const copyProps = (src, dest) => {
  Array.prototype.forEach.call(Reflect.ownKeys(src), (key) => {
    if (!Reflect.getOwnPropertyDescriptor(dest, key)) {
      Reflect.defineProperty(
        dest,
        key,
        Reflect.getOwnPropertyDescriptor(src, key));
    }
  });
};

const makeSafe = (unsafe, safe) => {
  if (Symbol.iterator in unsafe.prototype) {
    const dummy = new unsafe();
    let next; // We can reuse the same `next` method.

    Array.prototype.forEach.call(Reflect.ownKeys(unsafe.prototype), (key) => {
      if (!Reflect.getOwnPropertyDescriptor(safe.prototype, key)) {
        const desc = Reflect.getOwnPropertyDescriptor(unsafe.prototype, key);
        if (typeof desc.value === 'function' && desc.value.length === 0) {
            const called = Function.prototype.call.call(desc.value, dummy) || {};
            if (Symbol.iterator in (typeof called === "object" ? called : {})) {
                const createIterator = uncurryThis(desc.value);
                if (next == null) {
                    next = uncurryThis(createIterator(dummy).next);
                }
                const SafeIterator = createSafeIterator(createIterator, next);
                desc.value = function() {
                    return new SafeIterator(this);
                };
            }
        }
        Reflect.defineProperty(safe.prototype, key, desc);
      }
    });
  } else {
    copyProps(unsafe.prototype, safe.prototype);
  }
  copyProps(unsafe, safe);

  Object.setPrototypeOf(safe.prototype, null);
  Object.freeze(safe.prototype);
  Object.freeze(safe);
  return safe;
};

const StringIterator =
  Function.prototype.call.bind(String.prototype[Symbol.iterator]);
const StringIteratorPrototype = Reflect.getPrototypeOf(StringIterator(''));

function ErrorCaptureStackTrace(targetObject) {
  const stack = new Error().stack;
  // Remove the second line, which is this function
  targetObject.stack = stack.replace(/.*\n.*/, '$1');
}

primordials$1.exports = {
  makeSafe, // exported for testing
  internalBinding(mod) {
    if (mod === 'config') {
      return {
        hasIntl: false,
      };
    }
    throw new Error(`unknown module: "${mod}"`);
  },
  Array,
  ArrayIsArray: Array.isArray,
  ArrayPrototypeFilter: Function.prototype.call.bind(Array.prototype.filter),
  ArrayPrototypeForEach: Function.prototype.call.bind(Array.prototype.forEach),
  ArrayPrototypeIncludes:
    Function.prototype.call.bind(Array.prototype.includes),
  ArrayPrototypeIndexOf: Function.prototype.call.bind(Array.prototype.indexOf),
  ArrayPrototypeJoin: Function.prototype.call.bind(Array.prototype.join),
  ArrayPrototypeMap: Function.prototype.call.bind(Array.prototype.map),
  ArrayPrototypePop: Function.prototype.call.bind(Array.prototype.pop),
  ArrayPrototypePush: Function.prototype.call.bind(Array.prototype.push),
  ArrayPrototypePushApply: Function.apply.bind(Array.prototype.push),
  ArrayPrototypeSlice: Function.prototype.call.bind(Array.prototype.slice),
  ArrayPrototypeSort: Function.prototype.call.bind(Array.prototype.sort),
  ArrayPrototypeSplice: Function.prototype.call.bind(Array.prototype.splice),
  ArrayPrototypeUnshift: Function.prototype.call.bind(Array.prototype.unshift),
  BigIntPrototypeValueOf:
    Function.prototype.call.bind(BigInt.prototype.valueOf),
  BooleanPrototypeValueOf:
    Function.prototype.call.bind(Boolean.prototype.valueOf),
  DatePrototypeGetTime: Function.prototype.call.bind(Date.prototype.getTime),
  DatePrototypeToISOString:
    Function.prototype.call.bind(Date.prototype.toISOString),
  DatePrototypeToString:
    Function.prototype.call.bind(Date.prototype.toString),
  ErrorCaptureStackTrace,
  ErrorPrototypeToString:
    Function.prototype.call.bind(Error.prototype.toString),
  FunctionPrototypeBind: Function.prototype.call.bind(Function.prototype.bind),
  FunctionPrototypeCall:
    Function.prototype.call.bind(Function.prototype.call),
  FunctionPrototypeToString:
    Function.prototype.call.bind(Function.prototype.toString),
  globalThis: (typeof globalThis === 'undefined') ? commonjsGlobal : globalThis,
  JSONStringify: JSON.stringify,
  MapPrototypeGetSize: getGetter(Map, 'size'),
  MapPrototypeEntries: Function.prototype.call.bind(Map.prototype.entries),
  MathFloor: Math.floor,
  MathMax: Math.max,
  MathMin: Math.min,
  MathRound: Math.round,
  MathSqrt: Math.sqrt,
  MathTrunc: Math.trunc,
  Number,
  NumberIsFinite: Number.isFinite,
  NumberIsNaN: Number.isNaN,
  NumberParseFloat: Number.parseFloat,
  NumberParseInt: Number.parseInt,
  NumberPrototypeToString: Function.prototype.call.bind(Number.prototype.toString),
  NumberPrototypeValueOf:
    Function.prototype.call.bind(Number.prototype.valueOf),
  Object,
  ObjectAssign: Object.assign,
  ObjectCreate: Object.create,
  ObjectDefineProperty: Object.defineProperty,
  ObjectGetOwnPropertyDescriptor: Object.getOwnPropertyDescriptor,
  ObjectGetOwnPropertyNames: Object.getOwnPropertyNames,
  ObjectGetOwnPropertySymbols: Object.getOwnPropertySymbols,
  ObjectGetPrototypeOf: Object.getPrototypeOf,
  ObjectIs: Object.is,
  ObjectKeys: Object.keys,
  ObjectPrototypeHasOwnProperty:
    Function.prototype.call.bind(Object.prototype.hasOwnProperty),
  ObjectPrototypePropertyIsEnumerable:
    Function.prototype.call.bind(Object.prototype.propertyIsEnumerable),
  ObjectSeal: Object.seal,
  ObjectSetPrototypeOf: Object.setPrototypeOf,
  ReflectApply: Reflect.apply,
  ReflectOwnKeys: Reflect.ownKeys,
  RegExp,
  RegExpPrototypeExec: Function.prototype.call.bind(RegExp.prototype.exec),
  RegExpPrototypeSymbolReplace: Function.prototype.call.bind(RegExp.prototype[Symbol.replace]),
  RegExpPrototypeSymbolSplit: Function.prototype.call.bind(RegExp.prototype[Symbol.split]),
  RegExpPrototypeTest: Function.prototype.call.bind(RegExp.prototype.test),
  RegExpPrototypeToString:
    Function.prototype.call.bind(RegExp.prototype.toString),
  SafeStringIterator: createSafeIterator(
    StringIterator,
    Function.prototype.call.bind(StringIteratorPrototype.next),
  ),
  SafeMap: makeSafe(
    Map,
    class SafeMap extends Map {
      constructor(i) { super(i); } // eslint-disable-line no-useless-constructor
    }),
  SafeSet: makeSafe(
    Set,
    class SafeSet extends Set {
      constructor(i) { super(i); } // eslint-disable-line no-useless-constructor
    }),
  SetPrototypeGetSize: getGetter(Set, 'size'),
  SetPrototypeValues: Function.prototype.call.bind(Set.prototype.values),
  String,
  StringPrototypeCharCodeAt:
    Function.prototype.call.bind(String.prototype.charCodeAt),
  StringPrototypeCodePointAt:
    Function.prototype.call.bind(String.prototype.codePointAt),
  StringPrototypeEndsWith:
    Function.prototype.call.bind(String.prototype.endsWith),
  StringPrototypeIncludes:
    Function.prototype.call.bind(String.prototype.includes),
  StringPrototypeIndexOf:
    Function.prototype.call.bind(String.prototype.indexOf),
  StringPrototypeLastIndexOf:
    Function.prototype.call.bind(String.prototype.lastIndexOf),
  StringPrototypeNormalize:
    Function.prototype.call.bind(String.prototype.normalize),
  StringPrototypePadEnd:
    Function.prototype.call.bind(String.prototype.padEnd),
  StringPrototypePadStart:
    Function.prototype.call.bind(String.prototype.padStart),
  StringPrototypeRepeat: Function.prototype.call.bind(String.prototype.repeat),
  StringPrototypeReplace:
    Function.prototype.call.bind(String.prototype.replace),
  StringPrototypeReplaceAll:
    Function.prototype.call.bind(String.prototype.replaceAll),
  StringPrototypeSlice: Function.prototype.call.bind(String.prototype.slice),
  StringPrototypeSplit: Function.prototype.call.bind(String.prototype.split),
  StringPrototypeStartsWith: Function.prototype.call.bind(String.prototype.startsWith),
  StringPrototypeToLowerCase:
    Function.prototype.call.bind(String.prototype.toLowerCase),
  StringPrototypeTrim: Function.prototype.call.bind(String.prototype.trim),
  StringPrototypeValueOf:
    Function.prototype.call.bind(String.prototype.valueOf),
  SymbolPrototypeToString:
    Function.prototype.call.bind(Symbol.prototype.toString),
  SymbolPrototypeValueOf:
    Function.prototype.call.bind(Symbol.prototype.valueOf),
  SymbolIterator: Symbol.iterator,
  SymbolFor: Symbol.for,
  SymbolToStringTag: Symbol.toStringTag,
  TypedArrayPrototypeGetLength: getterCaller('length'),
  Uint8Array,
  uncurryThis,
};

// Node 14
/* c8 ignore start */
if (!String.prototype.replaceAll) {
  // Lifted and simplified from core-js for the moment.  Will remove when we
  // drop node 14 support.

  function requireObjectCoercible(it) {
    if (it == null) throw new TypeError("Can't call method on " + it);
    return it;
  }

  function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
    const tailPos = position + matched.length;
    const m = captures.length;
    let symbols = /\$([$&'`]|\d{1,2})/;
    return replacement.replace(symbols, (match, ch) => {
      let capture;
      switch (ch.charAt(0)) {
        case '$': return '$';
        case '&': return matched;
        case '`': return str.slice(0, position);
        case "'": return str.slice(tailPos);
        case '<':
          capture = namedCaptures[ch.slice(1, -1)];
          break;
        default: { // \d\d?
          const n = +ch;
          if (n === 0) return match;
          if (n > m) {
            const f = Math.floor(n / 10);
            if (f === 0) return match;
            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
            return match;
          }
          capture = captures[n - 1];
        }
      }
      return capture === undefined ? '' : capture;
    });
  }

  primordials$1.exports.StringPrototypeReplaceAll = (str, searchValue, replaceValue) => {
    const O = requireObjectCoercible(str);
    let IS_REG_EXP, flags, replacer, replacement;
    let position = 0;
    let endOfLastMatch = 0;
    let result = '';
    if (searchValue != null) {
      IS_REG_EXP = searchValue instanceof RegExp;
      if (IS_REG_EXP) {
        flags = searchValue.flags;
        if (!~flags.indexOf('g')) {
          throw new TypeError('`.replaceAll` does not allow non-undefined regexes');
        }
      }
      replacer = searchValue[Symbol.replace];
      if (replacer) {
        return replacer.call(searchValue, O, replaceValue);
      }
    }
    const string = String(O);
    const searchString = String(searchValue);
    const functionalReplace = (typeof replaceValue === 'function');
    if (!functionalReplace) replaceValue = String(replaceValue);
    const searchLength = searchString.length;
    const advanceBy = Math.max(1, searchLength);
    position = string.indexOf(searchString, 0);
    while (position !== -1) {
      replacement = functionalReplace ?
        String(replaceValue(searchString, position, string)) :
        getSubstitution(searchString, string, position, [], undefined, replaceValue);
      result += string.slice(endOfLastMatch, position) + replacement;
      endOfLastMatch = position + searchLength;
      position = string.indexOf(searchString, position + advanceBy);
    }
    if (endOfLastMatch < string.length) {
      result += string.slice(endOfLastMatch);
    }
    return result;
  };
}
/* c8 ignore stop */

var primordialsExports = primordials$1.exports;

const ALL_PROXIES = new WeakMap();

// Wrap Proxy's to remember their details.
class Prxy {
  constructor(target, handler) {
    const p = new Proxy(target, handler);
    ALL_PROXIES.set(p, [target, handler]);
    // eslint-disable-next-line no-constructor-return
    return p;
  }
  static getProxyDetails(obj, getFullProxy = true) {
    const deets = ALL_PROXIES.get(obj);
    if (!deets) {
      return undefined;
    }
    if (getFullProxy) {
      return deets;
    }
    return deets[0];
  }
  static revocable(target, handler) {
    const p = Proxy.revocable(target, handler);
    ALL_PROXIES.set(p.proxy, [target, handler]);
    const revoke = p.revoke;
    p.revoke = () => {
      ALL_PROXIES.set(p.proxy, [null, null]);
      revoke();
    };
    return p;
  }
}

var proxy = {
  getProxyDetails: Prxy.getProxyDetails.bind(Prxy),
  Proxy: Prxy,
};

const prxy = proxy;
const ALL_PROPERTIES = 0;
const ONLY_ENUMERABLE = 2;
const kPending = Symbol('kPending');
const kRejected = Symbol('kRejected');

function getOwnNonIndexProperties(a, filter = ONLY_ENUMERABLE) {
  const desc = Object.getOwnPropertyDescriptors(a);
  const ret = [];
  for (const [k, v] of Object.entries(desc)) {
    if (!/^(0|[1-9][0-9]*)$/.test(k) ||
        (parseInt(k, 10) >= (2 ** 32 - 1))) { // Arrays are limited in size
      if ((filter === ONLY_ENUMERABLE) && !v.enumerable) {
        continue;
      }
      ret.push(k);
    }
  }
  for (const s of Object.getOwnPropertySymbols(a)) {
    const v = Object.getOwnPropertyDescriptor(a, s);
    if ((filter === ONLY_ENUMERABLE) && !v.enumerable) {
      continue;
    }
    ret.push(s);
  }
  return ret;
}

var util$1$1 = {
  constants: {
    kPending,
    kRejected,
    ALL_PROPERTIES,
    ONLY_ENUMERABLE,
  },
  getOwnNonIndexProperties,
  getPromiseDetails() { return [kPending, undefined]; },
  getProxyDetails: prxy.getProxyDetails,
  Proxy: prxy.Proxy,
  previewEntries(val) {
    return [[], false];
  },
  getConstructorName(val) {
    if (!val || typeof val !== 'object') {
      throw new Error('Invalid object');
    }
    if (val.constructor && val.constructor.name) {
      return val.constructor.name;
    }
    const str = Object.prototype.toString.call(val);
    // e.g. [object Boolean]
    const m = str.match(/^\[object ([^\]]+)\]/);
    if (m) {
      return m[1];
    }
    return 'Object';
  },
  getExternalValue() { return BigInt(0); },
};

// eslint-disable-next-line no-control-regex
const colorRegExp = /\u001b\[\d\d?m/g;

var util$4 = {
  customInspectSymbol: Symbol.for('nodejs.util.inspect.custom'),
  isError(e) {
    return e instanceof Error;
  },
  join: Array.prototype.join.call.bind(Array.prototype.join),
  removeColors(str) {
    return String.prototype.replace.call(str, colorRegExp, '');
  },
};

function assert(p) {
  if (!p) {
    throw new Error('Assertion failed');
  }
}

assert.fail = function fail(message) {
  throw new Error(message);
};

var assert_1 = assert;

/* eslint node-core/documented-errors: "error" */

var errors$1;
var hasRequiredErrors$2;

function requireErrors$2 () {
	if (hasRequiredErrors$2) return errors$1;
	hasRequiredErrors$2 = 1;

	// The whole point behind this internal module is to allow Node.js to no
	// longer be forced to treat every error message change as a semver-major
	// change. The NodeError classes here all expose a `code` property whose
	// value statically and permanently identifies the error. While the error
	// message may change, the code should not.

	const {
	  ArrayIsArray,
	  ArrayPrototypeIncludes,
	  ArrayPrototypeIndexOf,
	  ArrayPrototypeJoin,
	  ArrayPrototypePop,
	  ArrayPrototypePush,
	  ArrayPrototypeSplice,
	  ErrorCaptureStackTrace,
	  ObjectDefineProperty,
	  ReflectApply,
	  RegExpPrototypeTest,
	  SafeMap,
	  StringPrototypeEndsWith,
	  StringPrototypeIncludes,
	  StringPrototypeSlice,
	  StringPrototypeToLowerCase,
	} = primordialsExports;

	const messages = new SafeMap();
	const codes = {};

	const classRegExp = /^([A-Z][a-z0-9]*)+$/;
	// Sorted by a rough estimate on most frequently used entries.
	const kTypes = [
	  'string',
	  'function',
	  'number',
	  'object',
	  // Accept 'Function' and 'Object' as alternative to the lower cased version.
	  'Function',
	  'Object',
	  'boolean',
	  'bigint',
	  'symbol',
	];

	let userStackTraceLimit;
	const nodeInternalPrefix = '__node_internal_';

	// Lazily loaded
	let assert;
	let internalUtilInspect = null;
	function lazyInternalUtilInspect() {
	  if (!internalUtilInspect) {
	    internalUtilInspect = requireInspect$1();
	  }
	  return internalUtilInspect;
	}

	const addCodeToName = hideStackFrames(function addCodeToName(err, name, code) {
	  // Set the stack
	  err = captureLargerStackTrace(err);
	  // Add the error code to the name to include it in the stack trace.
	  err.name = `${name} [${code}]`;
	  // Access the stack to generate the error message including the error code
	  // from the name.
	  err.stack; // eslint-disable-line no-unused-expressions
	  // Reset the name to the actual name.
	  delete err.name;
	});

	function makeNodeErrorWithCode(Base, key) {
	  return function NodeError(...args) {
	    const limit = Error.stackTraceLimit;
	    Error.stackTraceLimit = 0;
	    const error = new Base();
	    // Reset the limit and setting the name property.
	    Error.stackTraceLimit = limit;
	    const message = getMessage(key, args, error);
	    ObjectDefineProperty(error, 'message', {
	      value: message,
	      enumerable: false,
	      writable: true,
	      configurable: true,
	    });
	    ObjectDefineProperty(error, 'toString', {
	      value() {
	        return `${this.name} [${key}]: ${this.message}`;
	      },
	      enumerable: false,
	      writable: true,
	      configurable: true,
	    });
	    addCodeToName(error, Base.name, key);
	    error.code = key;
	    return error;
	  };
	}

	// This function removes unnecessary frames from Node.js core errors.
	function hideStackFrames(fn) {
	  // We rename the functions that will be hidden to cut off the stacktrace
	  // at the outermost one
	  const hidden = nodeInternalPrefix + fn.name;
	  ObjectDefineProperty(fn, 'name', { value: hidden });
	  return fn;
	}

	// Utility function for registering the error codes. Only used here. Exported
	// *only* to allow for testing.
	function E(sym, val, def) {
	  // Special case for SystemError that formats the error message differently
	  // The SystemErrors only have SystemError as their base classes.
	  messages.set(sym, val);
	  codes[sym] = makeNodeErrorWithCode(def, sym);
	}

	function getMessage(key, args, self) {
	  const msg = messages.get(key);

	  if (assert === undefined) assert = assert_1;

	  assert(typeof msg === 'function');
	  assert(
	    msg.length <= args.length, // Default options do not count.
	    `Code: ${key}; The provided arguments length (${args.length}) does not ` +
	      `match the required ones (${msg.length}).`,
	  );
	  return ReflectApply(msg, self, args);
	}

	const captureLargerStackTrace = hideStackFrames(
	  function captureLargerStackTrace(err) {
	    userStackTraceLimit = Error.stackTraceLimit;
	    Error.stackTraceLimit = Infinity;
	    ErrorCaptureStackTrace(err);
	    // Reset the limit
	    Error.stackTraceLimit = userStackTraceLimit;

	    return err;
	  });

	let maxStack_ErrorName;
	let maxStack_ErrorMessage;
	/**
	 * Returns true if `err.name` and `err.message` are equal to engine-specific
	 * values indicating max call stack size has been exceeded.
	 * "Maximum call stack size exceeded" in V8.
	 * @param {Error} err
	 * @returns {boolean}
	 */
	function isStackOverflowError(err) {
	  if (maxStack_ErrorMessage === undefined) {
	    try {
	      function overflowStack() { overflowStack(); }
	      overflowStack();
	    } catch (err) {
	      maxStack_ErrorMessage = err.message;
	      maxStack_ErrorName = err.name;
	    }
	  }

	  return err && err.name === maxStack_ErrorName &&
	         err.message === maxStack_ErrorMessage;
	}

	errors$1 = {
	  codes,
	  hideStackFrames,
	  isStackOverflowError,
	};

	E('ERR_INVALID_ARG_TYPE',
	  (name, expected, actual) => {
	    assert(typeof name === 'string', "'name' must be a string");
	    if (!ArrayIsArray(expected)) {
	      expected = [expected];
	    }

	    let msg = 'The ';
	    if (StringPrototypeEndsWith(name, ' argument')) {
	      // For cases like 'first argument'
	      msg += `${name} `;
	    } else {
	      const type = StringPrototypeIncludes(name, '.') ? 'property' : 'argument';
	      msg += `"${name}" ${type} `;
	    }
	    msg += 'must be ';

	    const types = [];
	    const instances = [];
	    const other = [];

	    for (const value of expected) {
	      assert(typeof value === 'string',
	             'All expected entries have to be of type string');
	      if (ArrayPrototypeIncludes(kTypes, value)) {
	        ArrayPrototypePush(types, StringPrototypeToLowerCase(value));
	      } else if (RegExpPrototypeTest(classRegExp, value)) {
	        ArrayPrototypePush(instances, value);
	      } else {
	        assert(value !== 'object',
	               'The value "object" should be written as "Object"');
	        ArrayPrototypePush(other, value);
	      }
	    }

	    // Special handle `object` in case other instances are allowed to outline
	    // the differences between each other.
	    if (instances.length > 0) {
	      const pos = ArrayPrototypeIndexOf(types, 'object');
	      if (pos !== -1) {
	        ArrayPrototypeSplice(types, pos, 1);
	        ArrayPrototypePush(instances, 'Object');
	      }
	    }

	    if (types.length > 0) {
	      if (types.length > 2) {
	        const last = ArrayPrototypePop(types);
	        msg += `one of type ${ArrayPrototypeJoin(types, ', ')}, or ${last}`;
	      } else if (types.length === 2) {
	        msg += `one of type ${types[0]} or ${types[1]}`;
	      } else {
	        msg += `of type ${types[0]}`;
	      }
	      if (instances.length > 0 || other.length > 0)
	        msg += ' or ';
	    }

	    if (instances.length > 0) {
	      if (instances.length > 2) {
	        const last = ArrayPrototypePop(instances);
	        msg +=
	          `an instance of ${ArrayPrototypeJoin(instances, ', ')}, or ${last}`;
	      } else {
	        msg += `an instance of ${instances[0]}`;
	        if (instances.length === 2) {
	          msg += ` or ${instances[1]}`;
	        }
	      }
	      if (other.length > 0)
	        msg += ' or ';
	    }

	    if (other.length > 0) {
	      if (other.length > 2) {
	        const last = ArrayPrototypePop(other);
	        msg += `one of ${ArrayPrototypeJoin(other, ', ')}, or ${last}`;
	      } else if (other.length === 2) {
	        msg += `one of ${other[0]} or ${other[1]}`;
	      } else {
	        if (StringPrototypeToLowerCase(other[0]) !== other[0])
	          msg += 'an ';
	        msg += `${other[0]}`;
	      }
	    }

	    if (actual == null) {
	      msg += `. Received ${actual}`;
	    } else if (typeof actual === 'function' && actual.name) {
	      msg += `. Received function ${actual.name}`;
	    } else if (typeof actual === 'object') {
	      if (actual.constructor && actual.constructor.name) {
	        msg += `. Received an instance of ${actual.constructor.name}`;
	      } else {
	        const inspected = lazyInternalUtilInspect()
	          .inspect(actual, { depth: -1 });
	        msg += `. Received ${inspected}`;
	      }
	    } else {
	      let inspected = lazyInternalUtilInspect()
	        .inspect(actual, { colors: false });
	      if (inspected.length > 25)
	        inspected = `${StringPrototypeSlice(inspected, 0, 25)}...`;
	      msg += `. Received type ${typeof actual} (${inspected})`;
	    }
	    return msg;
	  }, TypeError);
	return errors$1;
}

const { getConstructorName } = util$1$1;

// From https://mathiasbynens.be/notes/globalthis
/* c8 ignore start */ // only needed for node 10
(function() {
  if (typeof globalThis === 'object') return;
  Object.defineProperty(Object.prototype, '__magic__', {
    get: function() {
      return this;
    },
    configurable: true,
  });
  // eslint-disable-next-line no-undef
  __magic__.globalThis = __magic__;
  delete Object.prototype.__magic__;
}());
/* c8 ignore stop */

function constructorNamed(val, ...name) {
  // Pass in names rather than types, in case SharedArrayBuffer (e.g.) isn't
  // in your browser
  for (const n of name) {
    const typ = globalThis[n];
    if (typ) {
      if (val instanceof typ) {
        return true;
      }
    }
  }
  // instanceOf doesn't work across vm boundaries, so check the whole
  // inheritance chain
  while (val) {
    if (typeof val !== 'object') {
      return false;
    }
    if (name.indexOf(getConstructorName(val)) >= 0) {
      return true;
    }
    val = Object.getPrototypeOf(val);
  }
  return false;
}

function checkBox(cls) {
  return (val) => {
    if (!constructorNamed(val, cls.name)) {
      return false;
    }
    try {
      cls.prototype.valueOf.call(val);
    } catch {
      return false;
    }
    return true;
  };
}

const isStringObject = checkBox(String);
const isNumberObject = checkBox(Number);
const isBooleanObject = checkBox(Boolean);
const isBigIntObject = checkBox(BigInt);
const isSymbolObject = checkBox(Symbol);

var types = {
  isAsyncFunction(val) {
    return (typeof val === 'function') &&
      Function.prototype.toString.call(val).startsWith('async');
  },
  isGeneratorFunction(val) {
    return (typeof val === 'function') &&
      Function.prototype.toString.call(val).match(/^(async\s+)?function *\*/);
  },
  isAnyArrayBuffer(val) {
    return constructorNamed(val, 'ArrayBuffer', 'SharedArrayBuffer');
  },
  isArrayBuffer(val) {
    return constructorNamed(val, 'ArrayBuffer');
  },
  isArgumentsObject(val) {
    const cond = (val !== null) &&
      (typeof val === 'object') &&
      !Array.isArray(val) &&
      (typeof val.length === 'number') &&
      (val.length === (val.length | 0)) &&
      (val.length >= 0);
    if (cond) {
      const prop = Object.getOwnPropertyDescriptor(val, 'callee');
      return prop && !prop.enumerable;
    }
    return false;
  },
  isBoxedPrimitive(val) {
    return isNumberObject(val) ||
      isStringObject(val) ||
      isBooleanObject(val) ||
      isBigIntObject(val) ||
      isSymbolObject(val);
  },
  isDataView(val) {
    return constructorNamed(val, 'DataView');
  },
  isExternal(val) {
    return (typeof val === 'object') &&
      (Object.isFrozen(val)) &&
      (Object.getPrototypeOf(val) == null);
  },
  isMap(val) {
    if (!constructorNamed(val, 'Map')) {
      return false;
    }
    try {
      val.has();
    } catch {
      return false;
    }
    return true;
  },
  isMapIterator(val) {
    return Object.prototype.toString.call(Object.getPrototypeOf(val)) ===
      '[object Map Iterator]';
  },
  isModuleNamespaceObject(val) {
    // TODO: this is weak and easily faked
    return val &&
      (typeof val === 'object') &&
      (val[Symbol.toStringTag] === 'Module');
  },
  isNativeError(val) {
    return (val instanceof Error) && constructorNamed(
      val,
      'Error',
      'EvalError',
      'RangeError',
      'ReferenceError',
      'SyntaxError',
      'TypeError',
      'URIError',
      'AggregateError');
  },
  isPromise(val) {
    return constructorNamed(val, 'Promise');
  },
  isSet(val) {
    if (!constructorNamed(val, 'Set')) {
      return false;
    }
    try {
      val.has();
    } catch {
      return false;
    }
    return true;
  },
  isSetIterator(val) {
    return Object.prototype.toString.call(Object.getPrototypeOf(val)) ===
      '[object Set Iterator]';
  },
  isWeakMap(val) {
    return constructorNamed(val, 'WeakMap');
  },
  isWeakSet(val) {
    return constructorNamed(val, 'WeakSet');
  },
  isRegExp(val) {
    return constructorNamed(val, 'RegExp');
  },
  isDate(val) {
    if (constructorNamed(val, 'Date')) {
      try {
        Date.prototype.getTime.call(val); // Throws for pseudo-dates
        return true;
      } catch {
        // Ignored
      }
    }
    return false;
  },
  isTypedArray(val) {
    return constructorNamed(
      val,
      'Int8Array',
      'Uint8Array',
      'Uint8ClampedArray',
      'Int16Array',
      'Uint16Array',
      'Int32Array',
      'Uint32Array',
      'Float32Array',
      'Float64Array',
      'BigInt64Array',
      'BigUint64Array',
    );
  },
  isStringObject,
  isNumberObject,
  isBooleanObject,
  isBigIntObject};

var realm = {};

// This is a snapshot from node 18.11.0
const builtinModules = [
  '_http_agent',
  '_http_client',
  '_http_common',
  '_http_incoming',
  '_http_outgoing',
  '_http_server',
  '_stream_duplex',
  '_stream_passthrough',
  '_stream_readable',
  '_stream_transform',
  '_stream_wrap',
  '_stream_writable',
  '_tls_common',
  '_tls_wrap',
  'assert',
  'assert/strict',
  'async_hooks',
  'buffer',
  'child_process',
  'cluster',
  'console',
  'constants',
  'crypto',
  'dgram',
  'diagnostics_channel',
  'dns',
  'dns/promises',
  'domain',
  'events',
  'fs',
  'fs/promises',
  'http',
  'http2',
  'https',
  'inspector',
  'module',
  'Module',
  'net',
  'os',
  'path',
  'path/posix',
  'path/win32',
  'perf_hooks',
  'process',
  'punycode',
  'querystring',
  'readline',
  'readline/promises',
  'repl',
  'stream',
  'stream/consumers',
  'stream/promises',
  'stream/web',
  'string_decoder',
  'sys',
  'timers',
  'timers/promises',
  'tls',
  'trace_events',
  'tty',
  'url',
  'util',
  'util/types',
  'v8',
  'vm',
  'wasi',
  'worker_threads',
  'zlib',
];

realm.BuiltinModule = {
  exists(s) {
    return s.startsWith('internal/') || builtinModules.indexOf(s) !== -1;
  },
};

var validators$1;
var hasRequiredValidators$1;

function requireValidators$1 () {
	if (hasRequiredValidators$1) return validators$1;
	hasRequiredValidators$1 = 1;

	const {
	  ArrayIsArray,
	} = primordialsExports;

	const {
	  hideStackFrames,
	  codes: {
	    ERR_INVALID_ARG_TYPE,
	  },
	} = requireErrors$2();

	/**
	 * @param {unknown} value
	 * @param {string} name
	 * @param {{
	 *   allowArray?: boolean,
	 *   allowFunction?: boolean,
	 *   nullable?: boolean
	 * }} [options]
	 */
	const validateObject = hideStackFrames(
	  (value, name, options) => {
	    const useDefaultOptions = options == null;
	    const allowArray = useDefaultOptions ? false : options.allowArray;
	    const allowFunction = useDefaultOptions ? false : options.allowFunction;
	    const nullable = useDefaultOptions ? false : options.nullable;
	    if ((!nullable && value === null) ||
	        (!allowArray && ArrayIsArray(value)) ||
	        (typeof value !== 'object' && (
	          !allowFunction || typeof value !== 'function'
	        ))) {
	      throw new ERR_INVALID_ARG_TYPE(name, 'Object', value);
	    }
	  });

	function validateString(value, name) {
	  if (typeof value !== 'string')
	    throw new ERR_INVALID_ARG_TYPE(name, 'string', value);
	}

	validators$1 = {
	  validateObject,
	  validateString,
	};
	return validators$1;
}

var constants$1;
var hasRequiredConstants$1;

function requireConstants$1 () {
	if (hasRequiredConstants$1) return constants$1;
	hasRequiredConstants$1 = 1;

	constants$1 = {
	  // Non-alphabetic chars.
	  CHAR_DOT: 46, /* . */
	  CHAR_FORWARD_SLASH: 47, /* / */
	  CHAR_BACKWARD_SLASH: 92, /* \ */
	};
	return constants$1;
}

var path;
var hasRequiredPath;

function requirePath () {
	if (hasRequiredPath) return path;
	hasRequiredPath = 1;

	const {
	  StringPrototypeCharCodeAt,
	  StringPrototypeLastIndexOf,
	  StringPrototypeSlice,
	} = primordialsExports;

	const {
	  CHAR_DOT,
	  CHAR_FORWARD_SLASH,
	} = requireConstants$1();
	const {
	  validateString,
	} = requireValidators$1();

	function posixCwd() {
	  return '/'; // Fake for the web case
	}

	function isPosixPathSeparator(code) {
	  return code === CHAR_FORWARD_SLASH;
	}

	// Resolves . and .. elements in a path with directory names
	function normalizeString(path, allowAboveRoot, separator, isPathSeparator) {
	  let res = '';
	  let lastSegmentLength = 0;
	  let lastSlash = -1;
	  let dots = 0;
	  let code = 0;
	  for (let i = 0; i <= path.length; ++i) {
	    if (i < path.length)
	      code = StringPrototypeCharCodeAt(path, i);
	    else if (isPathSeparator(code))
	      break;
	    else
	      code = CHAR_FORWARD_SLASH;

	    if (isPathSeparator(code)) {
	      if (lastSlash === i - 1 || dots === 1) ; else if (dots === 2) {
	        if (res.length < 2 || lastSegmentLength !== 2 ||
	            StringPrototypeCharCodeAt(res, res.length - 1) !== CHAR_DOT ||
	            StringPrototypeCharCodeAt(res, res.length - 2) !== CHAR_DOT) {
	          if (res.length > 2) {
	            const lastSlashIndex = StringPrototypeLastIndexOf(res, separator);
	            if (lastSlashIndex === -1) {
	              res = '';
	              lastSegmentLength = 0;
	            } else {
	              res = StringPrototypeSlice(res, 0, lastSlashIndex);
	              lastSegmentLength =
	                res.length - 1 - StringPrototypeLastIndexOf(res, separator);
	            }
	            lastSlash = i;
	            dots = 0;
	            continue;
	          } else if (res.length !== 0) {
	            res = '';
	            lastSegmentLength = 0;
	            lastSlash = i;
	            dots = 0;
	            continue;
	          }
	        }
	        if (allowAboveRoot) {
	          res += res.length > 0 ? `${separator}..` : '..';
	          lastSegmentLength = 2;
	        }
	      } else {
	        if (res.length > 0)
	          res += `${separator}${StringPrototypeSlice(path, lastSlash + 1, i)}`;
	        else
	          res = StringPrototypeSlice(path, lastSlash + 1, i);
	        lastSegmentLength = i - lastSlash - 1;
	      }
	      lastSlash = i;
	      dots = 0;
	    } else if (code === CHAR_DOT && dots !== -1) {
	      ++dots;
	    } else {
	      dots = -1;
	    }
	  }
	  return res;
	}

	function resolve(...args) {
	  let resolvedPath = '';
	  let resolvedAbsolute = false;

	  for (let i = args.length - 1; i >= -1 && !resolvedAbsolute; i--) {
	    const path = i >= 0 ? args[i] : posixCwd();

	    validateString(path, 'path');

	    // Skip empty entries
	    if (path.length === 0) {
	      continue;
	    }

	    resolvedPath = `${path}/${resolvedPath}`;
	    resolvedAbsolute =
	      StringPrototypeCharCodeAt(path, 0) === CHAR_FORWARD_SLASH;
	  }

	  // At this point the path should be resolved to a full absolute path, but
	  // handle relative paths to be safe (might happen when process.cwd() fails)

	  // Normalize the path
	  resolvedPath = normalizeString(resolvedPath, !resolvedAbsolute, '/',
	                                 isPosixPathSeparator);

	  if (resolvedAbsolute) {
	    return `/${resolvedPath}`;
	  }
	  return resolvedPath.length > 0 ? resolvedPath : '.';
	}

	path = {
	  resolve,
	};
	return path;
}

var url$1;
var hasRequiredUrl$1;

function requireUrl$1 () {
	if (hasRequiredUrl$1) return url$1;
	hasRequiredUrl$1 = 1;

	// The main use case is browsers, and I rarely test on Windows, so all of the
	// Windows-specific stuff is removed.

	const {
	  StringPrototypeCharCodeAt,
	  StringPrototypeIncludes,
	  StringPrototypeReplace,
	} = primordialsExports;

	const {
	  CHAR_FORWARD_SLASH,
	} = requireConstants$1();
	const path = requirePath();

	const percentRegEx = /%/g;
	const backslashRegEx = /\\/g;
	const newlineRegEx = /\n/g;
	const carriageReturnRegEx = /\r/g;
	const tabRegEx = /\t/g;

	function encodePathChars(filepath) {
	  if (StringPrototypeIncludes(filepath, '%'))
	    filepath = StringPrototypeReplace(filepath, percentRegEx, '%25');
	  // In posix, backslash is a valid character in paths:
	  if (StringPrototypeIncludes(filepath, '\\'))
	    filepath = StringPrototypeReplace(filepath, backslashRegEx, '%5C');
	  if (StringPrototypeIncludes(filepath, '\n'))
	    filepath = StringPrototypeReplace(filepath, newlineRegEx, '%0A');
	  if (StringPrototypeIncludes(filepath, '\r'))
	    filepath = StringPrototypeReplace(filepath, carriageReturnRegEx, '%0D');
	  if (StringPrototypeIncludes(filepath, '\t'))
	    filepath = StringPrototypeReplace(filepath, tabRegEx, '%09');
	  return filepath;
	}

	function pathToFileURL(filepath) {
	  const outURL = new URL('file://');

	  let resolved = path.resolve(filepath);
	  // path.resolve strips trailing slashes so we must add them back
	  const filePathLast = StringPrototypeCharCodeAt(filepath,
	                                                 filepath.length - 1);
	  if ((filePathLast === CHAR_FORWARD_SLASH) &&
	      resolved[resolved.length - 1] !== path.sep)
	    resolved += '/';
	  outURL.pathname = encodePathChars(resolved);

	  return outURL;
	}

	url$1 = {
	  pathToFileURL,
	};
	return url$1;
}

var buffer = {};

var hasRequiredBuffer;

function requireBuffer () {
	if (hasRequiredBuffer) return buffer;
	hasRequiredBuffer = 1;

	class Buffer {
	  hexSlice(start = 0, end) {
	    return Array.prototype.map.call(
	      this.slice(start, end),
	      (x) => ('00' + x.toString(16)).slice(-2))
	      .join('');
	  }
	}

	buffer.Buffer = Buffer;
	return buffer;
}

var inspect_1;
var hasRequiredInspect$1;

function requireInspect$1 () {
	if (hasRequiredInspect$1) return inspect_1;
	hasRequiredInspect$1 = 1;

	const primordials = primordialsExports;
	const {
	  internalBinding,
	  Array,
	  ArrayIsArray,
	  ArrayPrototypeFilter,
	  ArrayPrototypeForEach,
	  ArrayPrototypeIncludes,
	  ArrayPrototypeIndexOf,
	  ArrayPrototypeJoin,
	  ArrayPrototypeMap,
	  ArrayPrototypePop,
	  ArrayPrototypePush,
	  ArrayPrototypePushApply,
	  ArrayPrototypeSlice,
	  ArrayPrototypeSplice,
	  ArrayPrototypeSort,
	  ArrayPrototypeUnshift,
	  BigIntPrototypeValueOf,
	  BooleanPrototypeValueOf,
	  DatePrototypeGetTime,
	  DatePrototypeToISOString,
	  DatePrototypeToString,
	  ErrorPrototypeToString,
	  FunctionPrototypeBind,
	  FunctionPrototypeCall,
	  FunctionPrototypeToString,
	  JSONStringify,
	  MapPrototypeGetSize,
	  MapPrototypeEntries,
	  MathFloor,
	  MathMax,
	  MathMin,
	  MathRound,
	  MathSqrt,
	  MathTrunc,
	  Number,
	  NumberIsFinite,
	  NumberIsNaN,
	  NumberParseFloat,
	  NumberParseInt,
	  NumberPrototypeToString,
	  NumberPrototypeValueOf,
	  Object,
	  ObjectAssign,
	  ObjectDefineProperty,
	  ObjectGetOwnPropertyDescriptor,
	  ObjectGetOwnPropertyNames,
	  ObjectGetOwnPropertySymbols,
	  ObjectGetPrototypeOf,
	  ObjectIs,
	  ObjectKeys,
	  ObjectPrototypeHasOwnProperty,
	  ObjectPrototypePropertyIsEnumerable,
	  ObjectSeal,
	  ObjectSetPrototypeOf,
	  ReflectApply,
	  ReflectOwnKeys,
	  RegExp,
	  RegExpPrototypeExec,
	  RegExpPrototypeSymbolReplace,
	  RegExpPrototypeSymbolSplit,
	  RegExpPrototypeToString,
	  SafeStringIterator,
	  SafeMap,
	  SafeSet,
	  SetPrototypeGetSize,
	  SetPrototypeValues,
	  String,
	  StringPrototypeCharCodeAt,
	  StringPrototypeCodePointAt,
	  StringPrototypeIncludes,
	  StringPrototypeIndexOf,
	  StringPrototypeLastIndexOf,
	  StringPrototypeNormalize,
	  StringPrototypePadEnd,
	  StringPrototypePadStart,
	  StringPrototypeRepeat,
	  StringPrototypeReplaceAll,
	  StringPrototypeSlice,
	  StringPrototypeSplit,
	  StringPrototypeEndsWith,
	  StringPrototypeStartsWith,
	  StringPrototypeToLowerCase,
	  StringPrototypeTrim,
	  StringPrototypeValueOf,
	  SymbolPrototypeToString,
	  SymbolPrototypeValueOf,
	  SymbolIterator,
	  SymbolToStringTag,
	  TypedArrayPrototypeGetLength,
	  TypedArrayPrototypeGetSymbolToStringTag,
	  Uint8Array,
	  globalThis,
	  uncurryThis,
	} = primordials;

	const {
	  constants: {
	    ALL_PROPERTIES,
	    ONLY_ENUMERABLE,
	    kPending,
	    kRejected,
	  },
	  getOwnNonIndexProperties,
	  getPromiseDetails,
	  getProxyDetails,
	  previewEntries,
	  getConstructorName: internalGetConstructorName,
	  getExternalValue,
	  Proxy,
	} = util$1$1;

	const {
	  customInspectSymbol,
	  isError,
	  join,
	  removeColors,
	} = util$4;

	const {
	  isStackOverflowError,
	} = requireErrors$2();

	const {
	  isAsyncFunction,
	  isGeneratorFunction,
	  isAnyArrayBuffer,
	  isArrayBuffer,
	  isArgumentsObject,
	  isBoxedPrimitive,
	  isDataView,
	  isExternal,
	  isMap,
	  isMapIterator,
	  isModuleNamespaceObject,
	  isNativeError,
	  isPromise,
	  isSet,
	  isSetIterator,
	  isWeakMap,
	  isWeakSet,
	  isRegExp,
	  isDate,
	  isTypedArray,
	  isStringObject,
	  isNumberObject,
	  isBooleanObject,
	  isBigIntObject,
	} = types;

	const assert = assert_1;

	const { BuiltinModule } = realm;
	const {
	  validateObject,
	  validateString,
	} = requireValidators$1();

	let hexSlice;
	let internalUrl;

	function pathToFileUrlHref(filepath) {
	  // Maintain node 14 compat
	  // internalUrl ??= require('./internal/url');
	  internalUrl = (internalUrl == null) ? requireUrl$1() : internalUrl;
	  return internalUrl.pathToFileURL(filepath).href;
	}

	const builtInObjects = new SafeSet(
	  ArrayPrototypeFilter(
	    ObjectGetOwnPropertyNames(globalThis),
	    (e) => RegExpPrototypeExec(/^[A-Z][a-zA-Z0-9]+$/, e) !== null,
	  ),
	);

	// https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot
	const isUndetectableObject = (v) => typeof v === 'undefined' && v !== undefined;

	// These options must stay in sync with `getUserOptions`. So if any option will
	// be added or removed, `getUserOptions` must also be updated accordingly.
	const inspectDefaultOptions = ObjectSeal({
	  showHidden: false,
	  depth: 2,
	  colors: false,
	  customInspect: true,
	  showProxy: false,
	  maxArrayLength: 100,
	  maxStringLength: 10000,
	  breakLength: 80,
	  compact: 3,
	  sorted: false,
	  getters: false,
	  numericSeparator: false,
	});

	const kObjectType = 0;
	const kArrayType = 1;
	const kArrayExtrasType = 2;

	/* eslint-disable no-control-regex */
	// Work-arounds for Safari not implementing negative look-behinds.
	// Remove all of this once Safari 16.4 is rolled out "enough".
	let strEscapeSequencesRegExp,
	  strEscapeSequencesReplacer,
	  strEscapeSequencesRegExpSingle,
	  strEscapeSequencesReplacerSingle,
	  extractedSplitNewLines;
	try {
	  // Change from regex literals to RegExp constructors to avoid unrecoverable
	  // syntax error at load time.
	  strEscapeSequencesRegExp =
	    // eslint-disable-next-line max-len
	    new RegExp('[\\x00-\\x1f\\x27\\x5c\\x7f-\\x9f]|[\\ud800-\\udbff](?![\\udc00-\\udfff])|(?<![\\ud800-\\udbff])[\\udc00-\\udfff]');
	  strEscapeSequencesReplacer =
	    new RegExp(
	      // eslint-disable-next-line max-len
	      '[\x00-\\x1f\\x27\\x5c\\x7f-\\x9f]|[\\ud800-\\udbff](?![\\udc00-\\udfff])|(?<![\\ud800-\\udbff])[\\udc00-\\udfff]',
	      'g',
	    );
	  strEscapeSequencesRegExpSingle =
	    // eslint-disable-next-line max-len
	    new RegExp('[\\x00-\\x1f\\x5c\\x7f-\\x9f]|[\\ud800-\\udbff](?![\\udc00-\\udfff])|(?<![\\ud800-\\udbff])[\\udc00-\\udfff]');
	  strEscapeSequencesReplacerSingle =
	    // eslint-disable-next-line max-len
	    new RegExp('[\\x00-\\x1f\\x5c\\x7f-\\x9f]|[\\ud800-\\udbff](?![\\udc00-\\udfff])|(?<![\\ud800-\\udbff])[\\udc00-\\udfff]', 'g');
	  const extractedNewLineRe = new RegExp('(?<=\\n)');
	  extractedSplitNewLines = (value) => RegExpPrototypeSymbolSplit(extractedNewLineRe, value);
	  /* c8 ignore start */
	  // CI doesn't run in an elderly runtime
	} catch {
	  // These are from a previous version of node,
	  // see commit 76372607a6743cc75eae50ca58657c9e8a654428
	  // dated 2021-12-06
	  strEscapeSequencesRegExp = /[\x00-\x1f\x27\x5c\x7f-\x9f]/;
	  strEscapeSequencesReplacer = /[\x00-\x1f\x27\x5c\x7f-\x9f]/g;
	  strEscapeSequencesRegExpSingle = /[\x00-\x1f\x5c\x7f-\x9f]/;
	  strEscapeSequencesReplacerSingle = /[\x00-\x1f\x5c\x7f-\x9f]/g;
	  extractedSplitNewLines = (value) => {
	    const lines = RegExpPrototypeSymbolSplit(/\n/, value);
	    const last = ArrayPrototypePop(lines);
	    const nlLines = ArrayPrototypeMap(lines, (line) => line + '\n');
	    if (last !== '') {
	      nlLines.push(last);
	    }
	    return nlLines;
	  };
	}
	/* c8 ignore stop */
	/* eslint-enable no-control-regex */

	const keyStrRegExp = /^[a-zA-Z_][a-zA-Z_0-9]*$/;
	const numberRegExp = /^(0|[1-9][0-9]*)$/;

	const coreModuleRegExp = /^ {4}at (?:[^/\\(]+ \(|)node:(.+):\d+:\d+\)?$/;
	const nodeModulesRegExp = /[/\\]node_modules[/\\](.+?)(?=[/\\])/g;

	const classRegExp = /^(\s+[^(]*?)\s*{/;
	// eslint-disable-next-line node-core/no-unescaped-regexp-dot
	const stripCommentsRegExp = /(\/\/.*?\n)|(\/\*(.|\n)*?\*\/)/g;

	const kMinLineLength = 16;

	// Constants to map the iterator state.
	const kWeak = 0;
	const kIterator = 1;
	const kMapEntries = 2;

	// Escaped control characters (plus the single quote and the backslash). Use
	// empty strings to fill up unused entries.
	const meta = [
	  '\\x00', '\\x01', '\\x02', '\\x03', '\\x04', '\\x05', '\\x06', '\\x07', // x07
	  '\\b', '\\t', '\\n', '\\x0B', '\\f', '\\r', '\\x0E', '\\x0F',           // x0F
	  '\\x10', '\\x11', '\\x12', '\\x13', '\\x14', '\\x15', '\\x16', '\\x17', // x17
	  '\\x18', '\\x19', '\\x1A', '\\x1B', '\\x1C', '\\x1D', '\\x1E', '\\x1F', // x1F
	  '', '', '', '', '', '', '', "\\'", '', '', '', '', '', '', '', '',      // x2F
	  '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',         // x3F
	  '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',         // x4F
	  '', '', '', '', '', '', '', '', '', '', '', '', '\\\\', '', '', '',     // x5F
	  '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '',         // x6F
	  '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '\\x7F',    // x7F
	  '\\x80', '\\x81', '\\x82', '\\x83', '\\x84', '\\x85', '\\x86', '\\x87', // x87
	  '\\x88', '\\x89', '\\x8A', '\\x8B', '\\x8C', '\\x8D', '\\x8E', '\\x8F', // x8F
	  '\\x90', '\\x91', '\\x92', '\\x93', '\\x94', '\\x95', '\\x96', '\\x97', // x97
	  '\\x98', '\\x99', '\\x9A', '\\x9B', '\\x9C', '\\x9D', '\\x9E', '\\x9F', // x9F
	];

	// Regex used for ansi escape code splitting
	// Adopted from https://github.com/chalk/ansi-regex/blob/HEAD/index.js
	// License: MIT, authors: @sindresorhus, Qix-, arjunmehta and LitoMore
	// Matches all ansi escape code sequences in a string
	const ansiPattern = '[\\u001B\\u009B][[\\]()#;?]*' +
	  '(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*' +
	  '|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)' +
	  '|(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))';
	const ansi = new RegExp(ansiPattern, 'g');

	let getStringWidth;

	function getUserOptions(ctx, isCrossContext) {
	  const ret = {
	    stylize: ctx.stylize,
	    showHidden: ctx.showHidden,
	    depth: ctx.depth,
	    colors: ctx.colors,
	    customInspect: ctx.customInspect,
	    showProxy: ctx.showProxy,
	    maxArrayLength: ctx.maxArrayLength,
	    maxStringLength: ctx.maxStringLength,
	    breakLength: ctx.breakLength,
	    compact: ctx.compact,
	    sorted: ctx.sorted,
	    getters: ctx.getters,
	    numericSeparator: ctx.numericSeparator,
	    ...ctx.userOptions,
	  };

	  // Typically, the target value will be an instance of `Object`. If that is
	  // *not* the case, the object may come from another vm.Context, and we want
	  // to avoid passing it objects from this Context in that case, so we remove
	  // the prototype from the returned object itself + the `stylize()` function,
	  // and remove all other non-primitives, including non-primitive user options.
	  if (isCrossContext) {
	    ObjectSetPrototypeOf(ret, null);
	    for (const key of ObjectKeys(ret)) {
	      if ((typeof ret[key] === 'object' || typeof ret[key] === 'function') &&
	          ret[key] !== null) {
	        delete ret[key];
	      }
	    }
	    ret.stylize = ObjectSetPrototypeOf((value, flavour) => {
	      let stylized;
	      try {
	        stylized = `${ctx.stylize(value, flavour)}`;
	      } catch {
	        // Continue regardless of error.
	      }

	      if (typeof stylized !== 'string') return value;
	      // `stylized` is a string as it should be, which is safe to pass along.
	      return stylized;
	    }, null);
	  }

	  return ret;
	}

	/**
	 * Echos the value of any input. Tries to print the value out
	 * in the best way possible given the different types.
	 * @param {any} value The value to print out.
	 * @param {object} opts Optional options object that alters the output.
	 */
	/* Legacy: value, showHidden, depth, colors */
	function inspect(value, opts) {
	  // Default options
	  const ctx = {
	    budget: {},
	    indentationLvl: 0,
	    seen: [],
	    currentDepth: 0,
	    stylize: stylizeNoColor,
	    showHidden: inspectDefaultOptions.showHidden,
	    depth: inspectDefaultOptions.depth,
	    colors: inspectDefaultOptions.colors,
	    customInspect: inspectDefaultOptions.customInspect,
	    showProxy: inspectDefaultOptions.showProxy,
	    maxArrayLength: inspectDefaultOptions.maxArrayLength,
	    maxStringLength: inspectDefaultOptions.maxStringLength,
	    breakLength: inspectDefaultOptions.breakLength,
	    compact: inspectDefaultOptions.compact,
	    sorted: inspectDefaultOptions.sorted,
	    getters: inspectDefaultOptions.getters,
	    numericSeparator: inspectDefaultOptions.numericSeparator,
	  };
	  if (arguments.length > 1) {
	    // Legacy...
	    if (arguments.length > 2) {
	      if (arguments[2] !== undefined) {
	        ctx.depth = arguments[2];
	      }
	      if (arguments.length > 3 && arguments[3] !== undefined) {
	        ctx.colors = arguments[3];
	      }
	    }
	    // Set user-specified options
	    if (typeof opts === 'boolean') {
	      ctx.showHidden = opts;
	    } else if (opts) {
	      const optKeys = ObjectKeys(opts);
	      for (let i = 0; i < optKeys.length; ++i) {
	        const key = optKeys[i];
	        // TODO(BridgeAR): Find a solution what to do about stylize. Either make
	        // this function public or add a new API with a similar or better
	        // functionality.
	        if (
	          ObjectPrototypeHasOwnProperty(inspectDefaultOptions, key) ||
	          key === 'stylize') {
	          ctx[key] = opts[key];
	        } else if (ctx.userOptions === undefined) {
	          // This is required to pass through the actual user input.
	          ctx.userOptions = opts;
	        }
	      }
	    }
	  }
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  if (ctx.maxArrayLength === null) ctx.maxArrayLength = Infinity;
	  if (ctx.maxStringLength === null) ctx.maxStringLength = Infinity;
	  return formatValue(ctx, value, 0);
	}
	inspect.custom = customInspectSymbol;

	ObjectDefineProperty(inspect, 'defaultOptions', {
	  __proto__: null,
	  get() {
	    return inspectDefaultOptions;
	  },
	  set(options) {
	    validateObject(options, 'options');
	    return ObjectAssign(inspectDefaultOptions, options);
	  },
	});

	// Set Graphics Rendition https://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	// Each color consists of an array with the color code as first entry and the
	// reset code as second entry.
	const defaultFG = 39;
	const defaultBG = 49;
	inspect.colors = {
	  __proto__: null,
	  reset: [0, 0],
	  bold: [1, 22],
	  dim: [2, 22], // Alias: faint
	  italic: [3, 23],
	  underline: [4, 24],
	  blink: [5, 25],
	  // Swap foreground and background colors
	  inverse: [7, 27], // Alias: swapcolors, swapColors
	  hidden: [8, 28], // Alias: conceal
	  strikethrough: [9, 29], // Alias: strikeThrough, crossedout, crossedOut
	  doubleunderline: [21, 24], // Alias: doubleUnderline
	  black: [30, defaultFG],
	  red: [31, defaultFG],
	  green: [32, defaultFG],
	  yellow: [33, defaultFG],
	  blue: [34, defaultFG],
	  magenta: [35, defaultFG],
	  cyan: [36, defaultFG],
	  white: [37, defaultFG],
	  bgBlack: [40, defaultBG],
	  bgRed: [41, defaultBG],
	  bgGreen: [42, defaultBG],
	  bgYellow: [43, defaultBG],
	  bgBlue: [44, defaultBG],
	  bgMagenta: [45, defaultBG],
	  bgCyan: [46, defaultBG],
	  bgWhite: [47, defaultBG],
	  framed: [51, 54],
	  overlined: [53, 55],
	  gray: [90, defaultFG], // Alias: grey, blackBright
	  redBright: [91, defaultFG],
	  greenBright: [92, defaultFG],
	  yellowBright: [93, defaultFG],
	  blueBright: [94, defaultFG],
	  magentaBright: [95, defaultFG],
	  cyanBright: [96, defaultFG],
	  whiteBright: [97, defaultFG],
	  bgGray: [100, defaultBG], // Alias: bgGrey, bgBlackBright
	  bgRedBright: [101, defaultBG],
	  bgGreenBright: [102, defaultBG],
	  bgYellowBright: [103, defaultBG],
	  bgBlueBright: [104, defaultBG],
	  bgMagentaBright: [105, defaultBG],
	  bgCyanBright: [106, defaultBG],
	  bgWhiteBright: [107, defaultBG],
	};

	function defineColorAlias(target, alias) {
	  ObjectDefineProperty(inspect.colors, alias, {
	    __proto__: null,
	    get() {
	      return this[target];
	    },
	    set(value) {
	      this[target] = value;
	    },
	    configurable: true,
	    enumerable: false,
	  });
	}

	defineColorAlias('gray', 'grey');
	defineColorAlias('gray', 'blackBright');
	defineColorAlias('bgGray', 'bgGrey');
	defineColorAlias('bgGray', 'bgBlackBright');
	defineColorAlias('dim', 'faint');
	defineColorAlias('strikethrough', 'crossedout');
	defineColorAlias('strikethrough', 'strikeThrough');
	defineColorAlias('strikethrough', 'crossedOut');
	defineColorAlias('hidden', 'conceal');
	defineColorAlias('inverse', 'swapColors');
	defineColorAlias('inverse', 'swapcolors');
	defineColorAlias('doubleunderline', 'doubleUnderline');

	// TODO(BridgeAR): Add function style support for more complex styles.
	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = ObjectAssign({ __proto__: null }, {
	  special: 'cyan',
	  number: 'yellow',
	  bigint: 'yellow',
	  boolean: 'yellow',
	  undefined: 'grey',
	  null: 'bold',
	  string: 'green',
	  symbol: 'green',
	  date: 'magenta',
	  // "name": intentionally not styling
	  // TODO(BridgeAR): Highlight regular expressions properly.
	  regexp: 'red',
	  module: 'underline',
	});

	function addQuotes(str, quotes) {
	  if (quotes === -1) {
	    return `"${str}"`;
	  }
	  if (quotes === -2) {
	    return `\`${str}\``;
	  }
	  return `'${str}'`;
	}

	function escapeFn(str) {
	  const charCode = StringPrototypeCharCodeAt(str);
	  return meta.length > charCode ? meta[charCode] : `\\u${NumberPrototypeToString(charCode, 16)}`;
	}

	// Escape control characters, single quotes and the backslash.
	// This is similar to JSON stringify escaping.
	function strEscape(str) {
	  let escapeTest = strEscapeSequencesRegExp;
	  let escapeReplace = strEscapeSequencesReplacer;
	  let singleQuote = 39;

	  // Check for double quotes. If not present, do not escape single quotes and
	  // instead wrap the text in double quotes. If double quotes exist, check for
	  // backticks. If they do not exist, use those as fallback instead of the
	  // double quotes.
	  if (StringPrototypeIncludes(str, "'")) {
	    // This invalidates the charCode and therefore can not be matched for
	    // anymore.
	    if (!StringPrototypeIncludes(str, '"')) {
	      singleQuote = -1;
	    } else if (!StringPrototypeIncludes(str, '`') &&
	               !StringPrototypeIncludes(str, '${')) {
	      singleQuote = -2;
	    }
	    if (singleQuote !== 39) {
	      escapeTest = strEscapeSequencesRegExpSingle;
	      escapeReplace = strEscapeSequencesReplacerSingle;
	    }
	  }

	  // Some magic numbers that worked out fine while benchmarking with v8 6.0
	  if (str.length < 5000 && RegExpPrototypeExec(escapeTest, str) === null)
	    return addQuotes(str, singleQuote);
	  if (str.length > 100) {
	    str = RegExpPrototypeSymbolReplace(escapeReplace, str, escapeFn);
	    return addQuotes(str, singleQuote);
	  }

	  let result = '';
	  let last = 0;
	  for (let i = 0; i < str.length; i++) {
	    const point = StringPrototypeCharCodeAt(str, i);
	    if (point === singleQuote ||
	        point === 92 ||
	        point < 32 ||
	        (point > 126 && point < 160)) {
	      if (last === i) {
	        result += meta[point];
	      } else {
	        result += `${StringPrototypeSlice(str, last, i)}${meta[point]}`;
	      }
	      last = i + 1;
	    } else if (point >= 0xd800 && point <= 0xdfff) {
	      if (point <= 0xdbff && i + 1 < str.length) {
	        const point = StringPrototypeCharCodeAt(str, i + 1);
	        if (point >= 0xdc00 && point <= 0xdfff) {
	          i++;
	          continue;
	        }
	      }
	      result += `${StringPrototypeSlice(str, last, i)}\\u${NumberPrototypeToString(point, 16)}`;
	      last = i + 1;
	    }
	  }

	  if (last !== str.length) {
	    result += StringPrototypeSlice(str, last);
	  }
	  return addQuotes(result, singleQuote);
	}

	function stylizeWithColor(str, styleType) {
	  const style = inspect.styles[styleType];
	  if (style !== undefined) {
	    const color = inspect.colors[style];
	    if (color !== undefined)
	      return `\u001b[${color[0]}m${str}\u001b[${color[1]}m`;
	  }
	  return str;
	}

	function stylizeNoColor(str) {
	  return str;
	}

	// Return a new empty array to push in the results of the default formatter.
	function getEmptyFormatArray() {
	  return [];
	}

	function isInstanceof(object, proto) {
	  try {
	    return object instanceof proto;
	  } catch {
	    return false;
	  }
	}

	function getConstructorName(obj, ctx, recurseTimes, protoProps) {
	  let firstProto;
	  const tmp = obj;
	  while (obj || isUndetectableObject(obj)) {
	    const descriptor = ObjectGetOwnPropertyDescriptor(obj, 'constructor');
	    if (descriptor !== undefined &&
	        typeof descriptor.value === 'function' &&
	        descriptor.value.name !== '' &&
	        isInstanceof(tmp, descriptor.value)) {
	      if (protoProps !== undefined &&
	         (firstProto !== obj ||
	         !builtInObjects.has(descriptor.value.name))) {
	        addPrototypeProperties(
	          ctx, tmp, firstProto || tmp, recurseTimes, protoProps);
	      }
	      return String(descriptor.value.name);
	    }

	    obj = ObjectGetPrototypeOf(obj);
	    if (firstProto === undefined) {
	      firstProto = obj;
	    }
	  }

	  if (firstProto === null) {
	    return null;
	  }

	  const res = internalGetConstructorName(tmp);

	  if (recurseTimes > ctx.depth && ctx.depth !== null) {
	    return `${res} <Complex prototype>`;
	  }

	  const protoConstr = getConstructorName(
	    firstProto, ctx, recurseTimes + 1, protoProps);

	  if (protoConstr === null) {
	    return `${res} <${inspect(firstProto, {
	      ...ctx,
	      customInspect: false,
	      depth: -1,
	    })}>`;
	  }

	  return `${res} <${protoConstr}>`;
	}

	// This function has the side effect of adding prototype properties to the
	// `output` argument (which is an array). This is intended to highlight user
	// defined prototype properties.
	function addPrototypeProperties(ctx, main, obj, recurseTimes, output) {
	  let depth = 0;
	  let keys;
	  let keySet;
	  do {
	    if (depth !== 0 || main === obj) {
	      obj = ObjectGetPrototypeOf(obj);
	      // Stop as soon as a null prototype is encountered.
	      if (obj === null) {
	        return;
	      }
	      // Stop as soon as a built-in object type is detected.
	      const descriptor = ObjectGetOwnPropertyDescriptor(obj, 'constructor');
	      if (descriptor !== undefined &&
	          typeof descriptor.value === 'function' &&
	          builtInObjects.has(descriptor.value.name)) {
	        return;
	      }
	    }

	    if (depth === 0) {
	      keySet = new SafeSet();
	    } else {
	      ArrayPrototypeForEach(keys, (key) => keySet.add(key));
	    }
	    // Get all own property names and symbols.
	    keys = ReflectOwnKeys(obj);
	    ArrayPrototypePush(ctx.seen, main);
	    for (const key of keys) {
	      // Ignore the `constructor` property and keys that exist on layers above.
	      if (key === 'constructor' ||
	          ObjectPrototypeHasOwnProperty(main, key) ||
	          (depth !== 0 && keySet.has(key))) {
	        continue;
	      }
	      const desc = ObjectGetOwnPropertyDescriptor(obj, key);
	      if (typeof desc.value === 'function') {
	        continue;
	      }
	      const value = formatProperty(
	        ctx, obj, recurseTimes, key, kObjectType, desc, main);
	      if (ctx.colors) {
	        // Faint!
	        ArrayPrototypePush(output, `\u001b[2m${value}\u001b[22m`);
	      } else {
	        ArrayPrototypePush(output, value);
	      }
	    }
	    ArrayPrototypePop(ctx.seen);
	  // Limit the inspection to up to three prototype layers. Using `recurseTimes`
	  // is not a good choice here, because it's as if the properties are declared
	  // on the current object from the users perspective.
	  } while (++depth !== 3);
	}

	function getPrefix(constructor, tag, fallback, size = '') {
	  if (constructor === null) {
	    if (tag !== '' && fallback !== tag) {
	      return `[${fallback}${size}: null prototype] [${tag}] `;
	    }
	    return `[${fallback}${size}: null prototype] `;
	  }

	  if (tag !== '' && constructor !== tag) {
	    return `${constructor}${size} [${tag}] `;
	  }
	  return `${constructor}${size} `;
	}

	// Look up the keys of the object.
	function getKeys(value, showHidden) {
	  let keys;
	  const symbols = ObjectGetOwnPropertySymbols(value);
	  if (showHidden) {
	    keys = ObjectGetOwnPropertyNames(value);
	    if (symbols.length !== 0)
	      ArrayPrototypePushApply(keys, symbols);
	  } else {
	    // This might throw if `value` is a Module Namespace Object from an
	    // unevaluated module, but we don't want to perform the actual type
	    // check because it's expensive.
	    // TODO(devsnek): track https://github.com/tc39/ecma262/issues/1209
	    // and modify this logic as needed.
	    try {
	      keys = ObjectKeys(value);
	    } catch (err) {
	      assert(isNativeError(err) && err.name === 'ReferenceError' &&
	             isModuleNamespaceObject(value));
	      keys = ObjectGetOwnPropertyNames(value);
	    }
	    if (symbols.length !== 0) {
	      const filter = (key) => ObjectPrototypePropertyIsEnumerable(value, key);
	      ArrayPrototypePushApply(keys, ArrayPrototypeFilter(symbols, filter));
	    }
	  }
	  return keys;
	}

	function getCtxStyle(value, constructor, tag) {
	  let fallback = '';
	  if (constructor === null) {
	    fallback = internalGetConstructorName(value);
	    if (fallback === tag) {
	      fallback = 'Object';
	    }
	  }
	  return getPrefix(constructor, tag, fallback);
	}

	function formatProxy(ctx, proxy, recurseTimes) {
	  if (recurseTimes > ctx.depth && ctx.depth !== null) {
	    return ctx.stylize('Proxy [Array]', 'special');
	  }
	  recurseTimes += 1;
	  ctx.indentationLvl += 2;
	  const res = [
	    formatValue(ctx, proxy[0], recurseTimes),
	    formatValue(ctx, proxy[1], recurseTimes),
	  ];
	  ctx.indentationLvl -= 2;
	  return reduceToSingleString(
	    ctx, res, '', ['Proxy [', ']'], kArrayExtrasType, recurseTimes);
	}

	// Note: using `formatValue` directly requires the indentation level to be
	// corrected by setting `ctx.indentationLvL += diff` and then to decrease the
	// value afterwards again.
	function formatValue(ctx, value, recurseTimes, typedArray) {
	  // Primitive types cannot have properties.
	  if (typeof value !== 'object' &&
	      typeof value !== 'function' &&
	      !isUndetectableObject(value)) {
	    return formatPrimitive(ctx.stylize, value, ctx);
	  }
	  if (value === null) {
	    return ctx.stylize('null', 'null');
	  }

	  // Memorize the context for custom inspection on proxies.
	  const context = value;
	  // Always check for proxies to prevent side effects and to prevent triggering
	  // any proxy handlers.
	  const proxy = getProxyDetails(value, !!ctx.showProxy);
	  if (proxy !== undefined) {
	    if (proxy === null || proxy[0] === null) {
	      return ctx.stylize('<Revoked Proxy>', 'special');
	    }
	    if (ctx.showProxy) {
	      return formatProxy(ctx, proxy, recurseTimes);
	    }
	    value = proxy;
	  }

	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it.
	  if (ctx.customInspect) {
	    const maybeCustom = value[customInspectSymbol];
	    if (typeof maybeCustom === 'function' &&
	        // Filter out the util module, its inspect function is special.
	        maybeCustom !== inspect &&
	        // Also filter out any prototype objects using the circular check.
	        !(value.constructor && value.constructor.prototype === value)) {
	      // This makes sure the recurseTimes are reported as before while using
	      // a counter internally.
	      const depth = ctx.depth === null ? null : ctx.depth - recurseTimes;
	      const isCrossContext =
	        proxy !== undefined || !(context instanceof Object);
	      const ret = FunctionPrototypeCall(
	        maybeCustom,
	        context,
	        depth,
	        getUserOptions(ctx, isCrossContext),
	        inspect,
	      );
	      // If the custom inspection method returned `this`, don't go into
	      // infinite recursion.
	      if (ret !== context) {
	        if (typeof ret !== 'string') {
	          return formatValue(ctx, ret, recurseTimes);
	        }
	        return StringPrototypeReplaceAll(ret, '\n', `\n${StringPrototypeRepeat(' ', ctx.indentationLvl)}`);
	      }
	    }
	  }

	  // Using an array here is actually better for the average case than using
	  // a Set. `seen` will only check for the depth and will never grow too large.
	  if (ctx.seen.includes(value)) {
	    let index = 1;
	    if (ctx.circular === undefined) {
	      ctx.circular = new SafeMap();
	      ctx.circular.set(value, index);
	    } else {
	      index = ctx.circular.get(value);
	      if (index === undefined) {
	        index = ctx.circular.size + 1;
	        ctx.circular.set(value, index);
	      }
	    }
	    return ctx.stylize(`[Circular *${index}]`, 'special');
	  }

	  return formatRaw(ctx, value, recurseTimes, typedArray);
	}

	function formatRaw(ctx, value, recurseTimes, typedArray) {
	  let keys;
	  let protoProps;
	  if (ctx.showHidden && (recurseTimes <= ctx.depth || ctx.depth === null)) {
	    protoProps = [];
	  }

	  const constructor = getConstructorName(value, ctx, recurseTimes, protoProps);
	  // Reset the variable to check for this later on.
	  if (protoProps !== undefined && protoProps.length === 0) {
	    protoProps = undefined;
	  }

	  let tag = value[SymbolToStringTag];
	  // Only list the tag in case it's non-enumerable / not an own property.
	  // Otherwise we'd print this twice.
	  if (typeof tag !== 'string' ||
	      (tag !== '' &&
	      (ctx.showHidden ?
	        ObjectPrototypeHasOwnProperty :
	        ObjectPrototypePropertyIsEnumerable)(
	        value, SymbolToStringTag,
	      ))) {
	    tag = '';
	  }
	  let base = '';
	  let formatter = getEmptyFormatArray;
	  let braces;
	  let noIterator = true;
	  let i = 0;
	  const filter = ctx.showHidden ? ALL_PROPERTIES : ONLY_ENUMERABLE;

	  let extrasType = kObjectType;

	  // Iterators and the rest are split to reduce checks.
	  // We have to check all values in case the constructor is set to null.
	  // Otherwise it would not possible to identify all types properly.
	  if (SymbolIterator in value || constructor === null) {
	    noIterator = false;
	    if (ArrayIsArray(value)) {
	      // Only set the constructor for non ordinary ("Array [...]") arrays.
	      const prefix = (constructor !== 'Array' || tag !== '') ?
	        getPrefix(constructor, tag, 'Array', `(${value.length})`) :
	        '';
	      keys = getOwnNonIndexProperties(value, filter);
	      braces = [`${prefix}[`, ']'];
	      if (value.length === 0 && keys.length === 0 && protoProps === undefined)
	        return `${braces[0]}]`;
	      extrasType = kArrayExtrasType;
	      formatter = formatArray;
	    } else if (isSet(value)) {
	      const size = SetPrototypeGetSize(value);
	      const prefix = getPrefix(constructor, tag, 'Set', `(${size})`);
	      keys = getKeys(value, ctx.showHidden);
	      formatter = constructor !== null ?
	        FunctionPrototypeBind(formatSet, null, value) :
	        FunctionPrototypeBind(formatSet, null, SetPrototypeValues(value));
	      if (size === 0 && keys.length === 0 && protoProps === undefined)
	        return `${prefix}{}`;
	      braces = [`${prefix}{`, '}'];
	    } else if (isMap(value)) {
	      const size = MapPrototypeGetSize(value);
	      const prefix = getPrefix(constructor, tag, 'Map', `(${size})`);
	      keys = getKeys(value, ctx.showHidden);
	      formatter = constructor !== null ?
	        FunctionPrototypeBind(formatMap, null, value) :
	        FunctionPrototypeBind(formatMap, null, MapPrototypeEntries(value));
	      if (size === 0 && keys.length === 0 && protoProps === undefined)
	        return `${prefix}{}`;
	      braces = [`${prefix}{`, '}'];
	    } else if (isTypedArray(value)) {
	      keys = getOwnNonIndexProperties(value, filter);
	      let bound = value;
	      let fallback = '';
	      if (constructor === null) {
	        fallback = TypedArrayPrototypeGetSymbolToStringTag(value);
	        // Reconstruct the array information.
	        bound = new primordials[fallback](value);
	      }
	      const size = TypedArrayPrototypeGetLength(value);
	      const prefix = getPrefix(constructor, tag, fallback, `(${size})`);
	      braces = [`${prefix}[`, ']'];
	      if (value.length === 0 && keys.length === 0 && !ctx.showHidden)
	        return `${braces[0]}]`;
	      // Special handle the value. The original value is required below. The
	      // bound function is required to reconstruct missing information.
	      formatter = FunctionPrototypeBind(formatTypedArray, null, bound, size);
	      extrasType = kArrayExtrasType;
	    } else if (isMapIterator(value)) {
	      keys = getKeys(value, ctx.showHidden);
	      braces = getIteratorBraces('Map', tag);
	      // Add braces to the formatter parameters.
	      formatter = FunctionPrototypeBind(formatIterator, null, braces);
	    } else if (isSetIterator(value)) {
	      keys = getKeys(value, ctx.showHidden);
	      braces = getIteratorBraces('Set', tag);
	      // Add braces to the formatter parameters.
	      formatter = FunctionPrototypeBind(formatIterator, null, braces);
	    } else {
	      noIterator = true;
	    }
	  }
	  if (noIterator) {
	    keys = getKeys(value, ctx.showHidden);
	    braces = ['{', '}'];
	    if (constructor === 'Object') {
	      if (isArgumentsObject(value)) {
	        braces[0] = '[Arguments] {';
	      } else if (tag !== '') {
	        braces[0] = `${getPrefix(constructor, tag, 'Object')}{`;
	      }
	      if (keys.length === 0 && protoProps === undefined) {
	        return `${braces[0]}}`;
	      }
	    } else if (typeof value === 'function') {
	      base = getFunctionBase(value, constructor, tag);
	      if (keys.length === 0 && protoProps === undefined)
	        return ctx.stylize(base, 'special');
	    } else if (isRegExp(value)) {
	      // Make RegExps say that they are RegExps
	      base = RegExpPrototypeToString(
	        constructor !== null ? value : new RegExp(value),
	      );
	      const prefix = getPrefix(constructor, tag, 'RegExp');
	      if (prefix !== 'RegExp ')
	        base = `${prefix}${base}`;
	      if ((keys.length === 0 && protoProps === undefined) ||
	          (recurseTimes > ctx.depth && ctx.depth !== null)) {
	        return ctx.stylize(base, 'regexp');
	      }
	    } else if (isDate(value)) {
	      // Make dates with properties first say the date
	      base = NumberIsNaN(DatePrototypeGetTime(value)) ?
	        DatePrototypeToString(value) :
	        DatePrototypeToISOString(value);
	      const prefix = getPrefix(constructor, tag, 'Date');
	      if (prefix !== 'Date ')
	        base = `${prefix}${base}`;
	      if (keys.length === 0 && protoProps === undefined) {
	        return ctx.stylize(base, 'date');
	      }
	    } else if (isError(value)) {
	      base = formatError(value, constructor, tag, ctx, keys);
	      if (keys.length === 0 && protoProps === undefined)
	        return base;
	    } else if (isAnyArrayBuffer(value)) {
	      // Fast path for ArrayBuffer and SharedArrayBuffer.
	      // Can't do the same for DataView because it has a non-primitive
	      // .buffer property that we need to recurse for.
	      const arrayType = isArrayBuffer(value) ? 'ArrayBuffer' :
	        'SharedArrayBuffer';
	      const prefix = getPrefix(constructor, tag, arrayType);
	      if (typedArray === undefined) {
	        formatter = formatArrayBuffer;
	      } else if (keys.length === 0 && protoProps === undefined) {
	        return prefix +
	              `{ byteLength: ${formatNumber(ctx.stylize, value.byteLength, false)} }`;
	      }
	      braces[0] = `${prefix}{`;
	      ArrayPrototypeUnshift(keys, 'byteLength');
	    } else if (isDataView(value)) {
	      braces[0] = `${getPrefix(constructor, tag, 'DataView')}{`;
	      // .buffer goes last, it's not a primitive like the others.
	      ArrayPrototypeUnshift(keys, 'byteLength', 'byteOffset', 'buffer');
	    } else if (isPromise(value)) {
	      braces[0] = `${getPrefix(constructor, tag, 'Promise')}{`;
	      formatter = formatPromise;
	    } else if (isWeakSet(value)) {
	      braces[0] = `${getPrefix(constructor, tag, 'WeakSet')}{`;
	      formatter = ctx.showHidden ? formatWeakSet : formatWeakCollection;
	    } else if (isWeakMap(value)) {
	      braces[0] = `${getPrefix(constructor, tag, 'WeakMap')}{`;
	      formatter = ctx.showHidden ? formatWeakMap : formatWeakCollection;
	    } else if (isModuleNamespaceObject(value)) {
	      braces[0] = `${getPrefix(constructor, tag, 'Module')}{`;
	      // Special handle keys for namespace objects.
	      formatter = formatNamespaceObject.bind(null, keys);
	    } else if (isBoxedPrimitive(value)) {
	      base = getBoxedBase(value, ctx, keys, constructor, tag);
	      if (keys.length === 0 && protoProps === undefined) {
	        return base;
	      }
	    } else {
	      if (keys.length === 0 && protoProps === undefined) {
	        if (isExternal(value)) {
	          const address = getExternalValue(value).toString(16);
	          return ctx.stylize(`[External: ${address}]`, 'special');
	        }
	        return `${getCtxStyle(value, constructor, tag)}{}`;
	      }
	      braces[0] = `${getCtxStyle(value, constructor, tag)}{`;
	    }
	  }

	  if (recurseTimes > ctx.depth && ctx.depth !== null) {
	    let constructorName = StringPrototypeSlice(getCtxStyle(value, constructor, tag), 0, -1);
	    if (constructor !== null)
	      constructorName = `[${constructorName}]`;
	    return ctx.stylize(constructorName, 'special');
	  }
	  recurseTimes += 1;

	  ctx.seen.push(value);
	  ctx.currentDepth = recurseTimes;
	  let output;
	  const indentationLvl = ctx.indentationLvl;
	  try {
	    output = formatter(ctx, value, recurseTimes);
	    for (i = 0; i < keys.length; i++) {
	      ArrayPrototypePush(
	        output,
	        formatProperty(ctx, value, recurseTimes, keys[i], extrasType),
	      );
	    }
	    if (protoProps !== undefined) {
	      ArrayPrototypePushApply(output, protoProps);
	    }
	  } catch (err) {
	    const constructorName = StringPrototypeSlice(getCtxStyle(value, constructor, tag), 0, -1);
	    return handleMaxCallStackSize(ctx, err, constructorName, indentationLvl);
	  }
	  if (ctx.circular !== undefined) {
	    const index = ctx.circular.get(value);
	    if (index !== undefined) {
	      const reference = ctx.stylize(`<ref *${index}>`, 'special');
	      // Add reference always to the very beginning of the output.
	      if (ctx.compact !== true) {
	        base = base === '' ? reference : `${reference} ${base}`;
	      } else {
	        braces[0] = `${reference} ${braces[0]}`;
	      }
	    }
	  }
	  ctx.seen.pop();

	  if (ctx.sorted) {
	    const comparator = ctx.sorted === true ? undefined : ctx.sorted;
	    if (extrasType === kObjectType) {
	      ArrayPrototypeSort(output, comparator);
	    } else if (keys.length > 1) {
	      const sorted = ArrayPrototypeSort(ArrayPrototypeSlice(output, output.length - keys.length), comparator);
	      ArrayPrototypeUnshift(sorted, output, output.length - keys.length, keys.length);
	      ReflectApply(ArrayPrototypeSplice, null, sorted);
	    }
	  }

	  const res = reduceToSingleString(
	    ctx, output, base, braces, extrasType, recurseTimes, value);
	  const budget = ctx.budget[ctx.indentationLvl] || 0;
	  const newLength = budget + res.length;
	  ctx.budget[ctx.indentationLvl] = newLength;
	  // If any indentationLvl exceeds this limit, limit further inspecting to the
	  // minimum. Otherwise the recursive algorithm might continue inspecting the
	  // object even though the maximum string size (~2 ** 28 on 32 bit systems and
	  // ~2 ** 30 on 64 bit systems) exceeded. The actual output is not limited at
	  // exactly 2 ** 27 but a bit higher. This depends on the object shape.
	  // This limit also makes sure that huge objects don't block the event loop
	  // significantly.
	  if (newLength > 2 ** 27) {
	    ctx.depth = -1;
	  }
	  return res;
	}

	function getIteratorBraces(type, tag) {
	  if (tag !== `${type} Iterator`) {
	    if (tag !== '')
	      tag += '] [';
	    tag += `${type} Iterator`;
	  }
	  return [`[${tag}] {`, '}'];
	}

	function getBoxedBase(value, ctx, keys, constructor, tag) {
	  let fn;
	  let type;
	  if (isNumberObject(value)) {
	    fn = NumberPrototypeValueOf;
	    type = 'Number';
	  } else if (isStringObject(value)) {
	    fn = StringPrototypeValueOf;
	    type = 'String';
	    // For boxed Strings, we have to remove the 0-n indexed entries,
	    // since they just noisy up the output and are redundant
	    // Make boxed primitive Strings look like such
	    keys.splice(0, value.length);
	  } else if (isBooleanObject(value)) {
	    fn = BooleanPrototypeValueOf;
	    type = 'Boolean';
	  } else if (isBigIntObject(value)) {
	    fn = BigIntPrototypeValueOf;
	    type = 'BigInt';
	  } else {
	    fn = SymbolPrototypeValueOf;
	    type = 'Symbol';
	  }
	  let base = `[${type}`;
	  if (type !== constructor) {
	    if (constructor === null) {
	      base += ' (null prototype)';
	    } else {
	      base += ` (${constructor})`;
	    }
	  }
	  base += `: ${formatPrimitive(stylizeNoColor, fn(value), ctx)}]`;
	  if (tag !== '' && tag !== constructor) {
	    base += ` [${tag}]`;
	  }
	  if (keys.length !== 0 || ctx.stylize === stylizeNoColor)
	    return base;
	  return ctx.stylize(base, StringPrototypeToLowerCase(type));
	}

	function getClassBase(value, constructor, tag) {
	  const hasName = ObjectPrototypeHasOwnProperty(value, 'name');
	  const name = (hasName && value.name) || '(anonymous)';
	  let base = `class ${name}`;
	  if (constructor !== 'Function' && constructor !== null) {
	    base += ` [${constructor}]`;
	  }
	  if (tag !== '' && constructor !== tag) {
	    base += ` [${tag}]`;
	  }
	  if (constructor !== null) {
	    const superName = ObjectGetPrototypeOf(value).name;
	    if (superName) {
	      base += ` extends ${superName}`;
	    }
	  } else {
	    base += ' extends [null prototype]';
	  }
	  return `[${base}]`;
	}

	function getFunctionBase(value, constructor, tag) {
	  const stringified = FunctionPrototypeToString(value);
	  if (StringPrototypeStartsWith(stringified, 'class') && StringPrototypeEndsWith(stringified, '}')) {
	    const slice = StringPrototypeSlice(stringified, 5, -1);
	    const bracketIndex = StringPrototypeIndexOf(slice, '{');
	    if (bracketIndex !== -1 &&
	        (!StringPrototypeIncludes(StringPrototypeSlice(slice, 0, bracketIndex), '(') ||
	        // Slow path to guarantee that it's indeed a class.
	        RegExpPrototypeExec(classRegExp, RegExpPrototypeSymbolReplace(stripCommentsRegExp, slice)) !== null)
	    ) {
	      return getClassBase(value, constructor, tag);
	    }
	  }
	  let type = 'Function';
	  if (isGeneratorFunction(value)) {
	    type = `Generator${type}`;
	  }
	  if (isAsyncFunction(value)) {
	    type = `Async${type}`;
	  }
	  let base = `[${type}`;
	  if (constructor === null) {
	    base += ' (null prototype)';
	  }
	  if (value.name === '') {
	    base += ' (anonymous)';
	  } else {
	    base += `: ${value.name}`;
	  }
	  base += ']';
	  if (constructor !== type && constructor !== null) {
	    base += ` ${constructor}`;
	  }
	  if (tag !== '' && constructor !== tag) {
	    base += ` [${tag}]`;
	  }
	  return base;
	}

	function identicalSequenceRange(a, b) {
	  for (let i = 0; i < a.length - 3; i++) {
	    // Find the first entry of b that matches the current entry of a.
	    const pos = b.indexOf(a[i]);
	    if (pos !== -1) {
	      const rest = b.length - pos;
	      if (rest > 3) {
	        let len = 1;
	        const maxLen = MathMin(a.length - i, rest);
	        // Count the number of consecutive entries.
	        while (maxLen > len && a[i + len] === b[pos + len]) {
	          len++;
	        }
	        if (len > 3) {
	          return { len, offset: i };
	        }
	      }
	    }
	  }

	  return { len: 0, offset: 0 };
	}

	function getStackString(error) {
	  return error.stack ? String(error.stack) : ErrorPrototypeToString(error);
	}

	function getStackFrames(ctx, err, stack) {
	  const frames = StringPrototypeSplit(stack, '\n');

	  let cause;
	  try {
	    ({ cause } = err);
	  } catch {
	    // If 'cause' is a getter that throws, ignore it.
	  }

	  // Remove stack frames identical to frames in cause.
	  if (cause != null && isError(cause)) {
	    const causeStack = getStackString(cause);
	    const causeStackStart = StringPrototypeIndexOf(causeStack, '\n    at');
	    if (causeStackStart !== -1) {
	      const causeFrames = StringPrototypeSplit(StringPrototypeSlice(causeStack, causeStackStart + 1), '\n');
	      const { len, offset } = identicalSequenceRange(frames, causeFrames);
	      if (len > 0) {
	        const skipped = len - 2;
	        const msg = `    ... ${skipped} lines matching cause stack trace ...`;
	        frames.splice(offset + 1, skipped, ctx.stylize(msg, 'undefined'));
	      }
	    }
	  }
	  return frames;
	}

	function improveStack(stack, constructor, name, tag) {
	  // A stack trace may contain arbitrary data. Only manipulate the output
	  // for "regular errors" (errors that "look normal") for now.
	  let len = name.length;

	  if (constructor === null ||
	      (StringPrototypeEndsWith(name, 'Error') &&
	      StringPrototypeStartsWith(stack, name) &&
	      (stack.length === len || stack[len] === ':' || stack[len] === '\n'))) {
	    let fallback = 'Error';
	    if (constructor === null) {
	      const start = RegExpPrototypeExec(/^([A-Z][a-z_ A-Z0-9[\]()-]+)(?::|\n {4}at)/, stack) ||
	      RegExpPrototypeExec(/^([a-z_A-Z0-9-]*Error)$/, stack);
	      fallback = (start && start[1]) || '';
	      len = fallback.length;
	      fallback = fallback || 'Error';
	    }
	    const prefix = StringPrototypeSlice(getPrefix(constructor, tag, fallback), 0, -1);
	    if (name !== prefix) {
	      if (StringPrototypeIncludes(prefix, name)) {
	        if (len === 0) {
	          stack = `${prefix}: ${stack}`;
	        } else {
	          stack = `${prefix}${StringPrototypeSlice(stack, len)}`;
	        }
	      } else {
	        stack = `${prefix} [${name}]${StringPrototypeSlice(stack, len)}`;
	      }
	    }
	  }
	  return stack;
	}

	function removeDuplicateErrorKeys(ctx, keys, err, stack) {
	  if (!ctx.showHidden && keys.length !== 0) {
	    for (const name of ['name', 'message', 'stack']) {
	      const index = ArrayPrototypeIndexOf(keys, name);
	      // Only hide the property in case it's part of the original stack
	      if (index !== -1 && StringPrototypeIncludes(stack, err[name])) {
	        ArrayPrototypeSplice(keys, index, 1);
	      }
	    }
	  }
	}

	function markNodeModules(ctx, line) {
	  let tempLine = '';
	  let nodeModule;
	  let pos = 0;
	  while ((nodeModule = nodeModulesRegExp.exec(line)) !== null) {
	    // '/node_modules/'.length === 14
	    tempLine += StringPrototypeSlice(line, pos, nodeModule.index + 14);
	    tempLine += ctx.stylize(nodeModule[1], 'module');
	    pos = nodeModule.index + nodeModule[0].length;
	  }
	  if (pos !== 0) {
	    line = tempLine + StringPrototypeSlice(line, pos);
	  }
	  return line;
	}

	function markCwd(ctx, line, workingDirectory) {
	  let cwdStartPos = StringPrototypeIndexOf(line, workingDirectory);
	  let tempLine = '';
	  let cwdLength = workingDirectory.length;
	  if (cwdStartPos !== -1) {
	    if (StringPrototypeSlice(line, cwdStartPos - 7, cwdStartPos) === 'file://') {
	      cwdLength += 7;
	      cwdStartPos -= 7;
	    }
	    const start = line[cwdStartPos - 1] === '(' ? cwdStartPos - 1 : cwdStartPos;
	    const end = start !== cwdStartPos && StringPrototypeEndsWith(line, ')') ? -1 : line.length;
	    const workingDirectoryEndPos = cwdStartPos + cwdLength + 1;
	    const cwdSlice = StringPrototypeSlice(line, start, workingDirectoryEndPos);

	    tempLine += StringPrototypeSlice(line, 0, start);
	    tempLine += ctx.stylize(cwdSlice, 'undefined');
	    tempLine += StringPrototypeSlice(line, workingDirectoryEndPos, end);
	    if (end === -1) {
	      tempLine += ctx.stylize(')', 'undefined');
	    }
	  } else {
	    tempLine += line;
	  }
	  return tempLine;
	}

	function safeGetCWD() {
	  let workingDirectory;
	  try {
	    workingDirectory = process$1.cwd();
	  } catch {
	    return;
	  }
	  return workingDirectory;
	}

	function formatError(err, constructor, tag, ctx, keys) {
	  const name = err.name != null ? String(err.name) : 'Error';
	  let stack = getStackString(err);

	  removeDuplicateErrorKeys(ctx, keys, err, stack);

	  if ('cause' in err &&
	      (keys.length === 0 || !ArrayPrototypeIncludes(keys, 'cause'))) {
	    ArrayPrototypePush(keys, 'cause');
	  }

	  // Print errors aggregated into AggregateError
	  if (ArrayIsArray(err.errors) &&
	      (keys.length === 0 || !ArrayPrototypeIncludes(keys, 'errors'))) {
	    ArrayPrototypePush(keys, 'errors');
	  }

	  stack = improveStack(stack, constructor, name, tag);

	  // Ignore the error message if it's contained in the stack.
	  let pos = (err.message && StringPrototypeIndexOf(stack, err.message)) || -1;
	  if (pos !== -1)
	    pos += err.message.length;
	  // Wrap the error in brackets in case it has no stack trace.
	  const stackStart = StringPrototypeIndexOf(stack, '\n    at', pos);
	  if (stackStart === -1) {
	    stack = `[${stack}]`;
	  } else {
	    let newStack = StringPrototypeSlice(stack, 0, stackStart);
	    const stackFramePart = StringPrototypeSlice(stack, stackStart + 1);
	    const lines = getStackFrames(ctx, err, stackFramePart);
	    if (ctx.colors) {
	      // Highlight userland code and node modules.
	      const workingDirectory = safeGetCWD();
	      let esmWorkingDirectory;
	      for (let line of lines) {
	        const core = RegExpPrototypeExec(coreModuleRegExp, line);
	        if (core !== null && BuiltinModule.exists(core[1])) {
	          newStack += `\n${ctx.stylize(line, 'undefined')}`;
	        } else {
	          newStack += '\n';

	          line = markNodeModules(ctx, line);
	          if (workingDirectory !== undefined) {
	            let newLine = markCwd(ctx, line, workingDirectory);
	            if (newLine === line) {
	              // Maintain node 14 compat
	              // esmWorkingDirectory ??= pathToFileUrlHref(workingDirectory);
	              esmWorkingDirectory =
	                (esmWorkingDirectory == null) ? pathToFileUrlHref(workingDirectory) : esmWorkingDirectory;
	              newLine = markCwd(ctx, line, esmWorkingDirectory);
	            }
	            line = newLine;
	          }

	          newStack += line;
	        }
	      }
	    } else {
	      newStack += `\n${ArrayPrototypeJoin(lines, '\n')}`;
	    }
	    stack = newStack;
	  }
	  // The message and the stack have to be indented as well!
	  if (ctx.indentationLvl !== 0) {
	    const indentation = StringPrototypeRepeat(' ', ctx.indentationLvl);
	    stack = StringPrototypeReplaceAll(stack, '\n', `\n${indentation}`);
	  }
	  return stack;
	}

	function groupArrayElements(ctx, output, value) {
	  let totalLength = 0;
	  let maxLength = 0;
	  let i = 0;
	  let outputLength = output.length;
	  if (ctx.maxArrayLength < output.length) {
	    // This makes sure the "... n more items" part is not taken into account.
	    outputLength--;
	  }
	  const separatorSpace = 2; // Add 1 for the space and 1 for the separator.
	  const dataLen = new Array(outputLength);
	  // Calculate the total length of all output entries and the individual max
	  // entries length of all output entries. We have to remove colors first,
	  // otherwise the length would not be calculated properly.
	  for (; i < outputLength; i++) {
	    const len = getStringWidth(output[i], ctx.colors);
	    dataLen[i] = len;
	    totalLength += len + separatorSpace;
	    if (maxLength < len)
	      maxLength = len;
	  }
	  // Add two to `maxLength` as we add a single whitespace character plus a comma
	  // in-between two entries.
	  const actualMax = maxLength + separatorSpace;
	  // Check if at least three entries fit next to each other and prevent grouping
	  // of arrays that contains entries of very different length (i.e., if a single
	  // entry is longer than 1/5 of all other entries combined). Otherwise the
	  // space in-between small entries would be enormous.
	  if (actualMax * 3 + ctx.indentationLvl < ctx.breakLength &&
	      (totalLength / actualMax > 5 || maxLength <= 6)) {

	    const approxCharHeights = 2.5;
	    const averageBias = MathSqrt(actualMax - totalLength / output.length);
	    const biasedMax = MathMax(actualMax - 3 - averageBias, 1);
	    // Dynamically check how many columns seem possible.
	    const columns = MathMin(
	      // Ideally a square should be drawn. We expect a character to be about 2.5
	      // times as high as wide. This is the area formula to calculate a square
	      // which contains n rectangles of size `actualMax * approxCharHeights`.
	      // Divide that by `actualMax` to receive the correct number of columns.
	      // The added bias increases the columns for short entries.
	      MathRound(
	        MathSqrt(
	          approxCharHeights * biasedMax * outputLength,
	        ) / biasedMax,
	      ),
	      // Do not exceed the breakLength.
	      MathFloor((ctx.breakLength - ctx.indentationLvl) / actualMax),
	      // Limit array grouping for small `compact` modes as the user requested
	      // minimal grouping.
	      ctx.compact * 4,
	      // Limit the columns to a maximum of fifteen.
	      15,
	    );
	    // Return with the original output if no grouping should happen.
	    if (columns <= 1) {
	      return output;
	    }
	    const tmp = [];
	    const maxLineLength = [];
	    for (let i = 0; i < columns; i++) {
	      let lineMaxLength = 0;
	      for (let j = i; j < output.length; j += columns) {
	        if (dataLen[j] > lineMaxLength)
	          lineMaxLength = dataLen[j];
	      }
	      lineMaxLength += separatorSpace;
	      maxLineLength[i] = lineMaxLength;
	    }
	    let order = StringPrototypePadStart;
	    if (value !== undefined) {
	      for (let i = 0; i < output.length; i++) {
	        if (typeof value[i] !== 'number' && typeof value[i] !== 'bigint') {
	          order = StringPrototypePadEnd;
	          break;
	        }
	      }
	    }
	    // Each iteration creates a single line of grouped entries.
	    for (let i = 0; i < outputLength; i += columns) {
	      // The last lines may contain less entries than columns.
	      const max = MathMin(i + columns, outputLength);
	      let str = '';
	      let j = i;
	      for (; j < max - 1; j++) {
	        // Calculate extra color padding in case it's active. This has to be
	        // done line by line as some lines might contain more colors than
	        // others.
	        const padding = maxLineLength[j - i] + output[j].length - dataLen[j];
	        str += order(`${output[j]}, `, padding, ' ');
	      }
	      if (order === StringPrototypePadStart) {
	        const padding = maxLineLength[j - i] +
	                        output[j].length -
	                        dataLen[j] -
	                        separatorSpace;
	        str += StringPrototypePadStart(output[j], padding, ' ');
	      } else {
	        str += output[j];
	      }
	      ArrayPrototypePush(tmp, str);
	    }
	    if (ctx.maxArrayLength < output.length) {
	      ArrayPrototypePush(tmp, output[outputLength]);
	    }
	    output = tmp;
	  }
	  return output;
	}

	function handleMaxCallStackSize(ctx, err, constructorName, indentationLvl) {
	  if (isStackOverflowError(err)) {
	    ctx.seen.pop();
	    ctx.indentationLvl = indentationLvl;
	    return ctx.stylize(
	      `[${constructorName}: Inspection interrupted ` +
	        'prematurely. Maximum call stack size exceeded.]',
	      'special',
	    );
	  }
	  assert.fail(err.stack);
	}

	function addNumericSeparator(integerString) {
	  let result = '';
	  let i = integerString.length;
	  const start = StringPrototypeStartsWith(integerString, '-') ? 1 : 0;
	  for (; i >= start + 4; i -= 3) {
	    result = `_${StringPrototypeSlice(integerString, i - 3, i)}${result}`;
	  }
	  return i === integerString.length ?
	    integerString :
	    `${StringPrototypeSlice(integerString, 0, i)}${result}`;
	}

	function addNumericSeparatorEnd(integerString) {
	  let result = '';
	  let i = 0;
	  for (; i < integerString.length - 3; i += 3) {
	    result += `${StringPrototypeSlice(integerString, i, i + 3)}_`;
	  }
	  return i === 0 ?
	    integerString :
	    `${result}${StringPrototypeSlice(integerString, i)}`;
	}

	const remainingText = (remaining) => `... ${remaining} more item${remaining > 1 ? 's' : ''}`;

	function formatNumber(fn, number, numericSeparator) {
	  if (!numericSeparator) {
	    // Format -0 as '-0'. Checking `number === -0` won't distinguish 0 from -0.
	    if (ObjectIs(number, -0)) {
	      return fn('-0', 'number');
	    }
	    return fn(`${number}`, 'number');
	  }
	  const integer = MathTrunc(number);
	  const string = String(integer);
	  if (integer === number) {
	    if (!NumberIsFinite(number) || StringPrototypeIncludes(string, 'e')) {
	      return fn(string, 'number');
	    }
	    return fn(`${addNumericSeparator(string)}`, 'number');
	  }
	  if (NumberIsNaN(number)) {
	    return fn(string, 'number');
	  }
	  return fn(`${
	    addNumericSeparator(string)
	  }.${
	    addNumericSeparatorEnd(
	      StringPrototypeSlice(String(number), string.length + 1),
	    )
	  }`, 'number');
	}

	function formatBigInt(fn, bigint, numericSeparator) {
	  const string = String(bigint);
	  if (!numericSeparator) {
	    return fn(`${string}n`, 'bigint');
	  }
	  return fn(`${addNumericSeparator(string)}n`, 'bigint');
	}

	function formatPrimitive(fn, value, ctx) {
	  if (typeof value === 'string') {
	    let trailer = '';
	    if (value.length > ctx.maxStringLength) {
	      const remaining = value.length - ctx.maxStringLength;
	      value = StringPrototypeSlice(value, 0, ctx.maxStringLength);
	      trailer = `... ${remaining} more character${remaining > 1 ? 's' : ''}`;
	    }
	    if (ctx.compact !== true &&
	        // We do not support handling unicode characters width with
	        // the readline getStringWidth function as there are
	        // performance implications.
	        value.length > kMinLineLength &&
	        value.length > ctx.breakLength - ctx.indentationLvl - 4) {
	      return ArrayPrototypeJoin(
	        ArrayPrototypeMap(
	          extractedSplitNewLines(value),
	          (line) => fn(strEscape(line), 'string'),
	        ),
	        ` +\n${StringPrototypeRepeat(' ', ctx.indentationLvl + 2)}`,
	      ) + trailer;
	    }
	    return fn(strEscape(value), 'string') + trailer;
	  }
	  if (typeof value === 'number')
	    return formatNumber(fn, value, ctx.numericSeparator);
	  if (typeof value === 'bigint')
	    return formatBigInt(fn, value, ctx.numericSeparator);
	  if (typeof value === 'boolean')
	    return fn(`${value}`, 'boolean');
	  if (typeof value === 'undefined')
	    return fn('undefined', 'undefined');
	  // es6 symbol primitive
	  return fn(SymbolPrototypeToString(value), 'symbol');
	}

	function formatNamespaceObject(keys, ctx, value, recurseTimes) {
	  const output = new Array(keys.length);
	  for (let i = 0; i < keys.length; i++) {
	    try {
	      output[i] = formatProperty(ctx, value, recurseTimes, keys[i],
	                                 kObjectType);
	    } catch (err) {
	      assert(isNativeError(err) && err.name === 'ReferenceError');
	      // Use the existing functionality. This makes sure the indentation and
	      // line breaks are always correct. Otherwise it is very difficult to keep
	      // this aligned, even though this is a hacky way of dealing with this.
	      const tmp = { [keys[i]]: '' };
	      output[i] = formatProperty(ctx, tmp, recurseTimes, keys[i], kObjectType);
	      const pos = StringPrototypeLastIndexOf(output[i], ' ');
	      // We have to find the last whitespace and have to replace that value as
	      // it will be visualized as a regular string.
	      output[i] = StringPrototypeSlice(output[i], 0, pos + 1) +
	                  ctx.stylize('<uninitialized>', 'special');
	    }
	  }
	  // Reset the keys to an empty array. This prevents duplicated inspection.
	  keys.length = 0;
	  return output;
	}

	// The array is sparse and/or has extra keys
	function formatSpecialArray(ctx, value, recurseTimes, maxLength, output, i) {
	  const keys = ObjectKeys(value);
	  let index = i;
	  for (; i < keys.length && output.length < maxLength; i++) {
	    const key = keys[i];
	    const tmp = +key;
	    // Arrays can only have up to 2^32 - 1 entries
	    if (tmp > 2 ** 32 - 2) {
	      break;
	    }
	    if (`${index}` !== key) {
	      if (RegExpPrototypeExec(numberRegExp, key) === null) {
	        break;
	      }
	      const emptyItems = tmp - index;
	      const ending = emptyItems > 1 ? 's' : '';
	      const message = `<${emptyItems} empty item${ending}>`;
	      ArrayPrototypePush(output, ctx.stylize(message, 'undefined'));
	      index = tmp;
	      if (output.length === maxLength) {
	        break;
	      }
	    }
	    ArrayPrototypePush(output, formatProperty(ctx, value, recurseTimes, key, kArrayType));
	    index++;
	  }
	  const remaining = value.length - index;
	  if (output.length !== maxLength) {
	    if (remaining > 0) {
	      const ending = remaining > 1 ? 's' : '';
	      const message = `<${remaining} empty item${ending}>`;
	      ArrayPrototypePush(output, ctx.stylize(message, 'undefined'));
	    }
	  } else if (remaining > 0) {
	    ArrayPrototypePush(output, remainingText(remaining));
	  }
	  return output;
	}

	function formatArrayBuffer(ctx, value) {
	  let buffer;
	  try {
	    buffer = new Uint8Array(value);
	  } catch {
	    return [ctx.stylize('(detached)', 'special')];
	  }
	  if (hexSlice === undefined)
	    hexSlice = uncurryThis(requireBuffer().Buffer.prototype.hexSlice);
	  let str = StringPrototypeTrim(RegExpPrototypeSymbolReplace(
	    /(.{2})/g,
	    hexSlice(buffer, 0, MathMin(ctx.maxArrayLength, buffer.length)),
	    '$1 ',
	  ));
	  const remaining = buffer.length - ctx.maxArrayLength;
	  if (remaining > 0)
	    str += ` ... ${remaining} more byte${remaining > 1 ? 's' : ''}`;
	  return [`${ctx.stylize('[Uint8Contents]', 'special')}: <${str}>`];
	}

	function formatArray(ctx, value, recurseTimes) {
	  const valLen = value.length;
	  const len = MathMin(MathMax(0, ctx.maxArrayLength), valLen);

	  const remaining = valLen - len;
	  const output = [];
	  for (let i = 0; i < len; i++) {
	    // Special handle sparse arrays.
	    if (!ObjectPrototypeHasOwnProperty(value, i)) {
	      return formatSpecialArray(ctx, value, recurseTimes, len, output, i);
	    }
	    ArrayPrototypePush(output, formatProperty(ctx, value, recurseTimes, i, kArrayType));
	  }
	  if (remaining > 0) {
	    ArrayPrototypePush(output, remainingText(remaining));
	  }
	  return output;
	}

	function formatTypedArray(value, length, ctx, ignored, recurseTimes) {
	  const maxLength = MathMin(MathMax(0, ctx.maxArrayLength), length);
	  const remaining = value.length - maxLength;
	  const output = new Array(maxLength);
	  const elementFormatter = value.length > 0 && typeof value[0] === 'number' ?
	    formatNumber :
	    formatBigInt;
	  for (let i = 0; i < maxLength; ++i) {
	    output[i] = elementFormatter(ctx.stylize, value[i], ctx.numericSeparator);
	  }
	  if (remaining > 0) {
	    output[maxLength] = remainingText(remaining);
	  }
	  if (ctx.showHidden) {
	    // .buffer goes last, it's not a primitive like the others.
	    // All besides `BYTES_PER_ELEMENT` are actually getters.
	    ctx.indentationLvl += 2;
	    for (const key of [
	      'BYTES_PER_ELEMENT',
	      'length',
	      'byteLength',
	      'byteOffset',
	      'buffer',
	    ]) {
	      const str = formatValue(ctx, value[key], recurseTimes, true);
	      ArrayPrototypePush(output, `[${key}]: ${str}`);
	    }
	    ctx.indentationLvl -= 2;
	  }
	  return output;
	}

	function formatSet(value, ctx, ignored, recurseTimes) {
	  const length = value.size;
	  const maxLength = MathMin(MathMax(0, ctx.maxArrayLength), length);
	  const remaining = length - maxLength;
	  const output = [];
	  ctx.indentationLvl += 2;
	  let i = 0;
	  for (const v of value) {
	    if (i >= maxLength) break;
	    ArrayPrototypePush(output, formatValue(ctx, v, recurseTimes));
	    i++;
	  }
	  if (remaining > 0) {
	    ArrayPrototypePush(output, remainingText(remaining));
	  }
	  ctx.indentationLvl -= 2;
	  return output;
	}

	function formatMap(value, ctx, ignored, recurseTimes) {
	  const length = value.size;
	  const maxLength = MathMin(MathMax(0, ctx.maxArrayLength), length);
	  const remaining = length - maxLength;
	  const output = [];
	  ctx.indentationLvl += 2;
	  let i = 0;
	  for (const { 0: k, 1: v } of value) {
	    if (i >= maxLength) break;
	    ArrayPrototypePush(
	      output,
	      `${formatValue(ctx, k, recurseTimes)} => ${formatValue(ctx, v, recurseTimes)}`,
	    );
	    i++;
	  }
	  if (remaining > 0) {
	    ArrayPrototypePush(output, remainingText(remaining));
	  }
	  ctx.indentationLvl -= 2;
	  return output;
	}

	function formatSetIterInner(ctx, recurseTimes, entries, state) {
	  const maxArrayLength = MathMax(ctx.maxArrayLength, 0);
	  const maxLength = MathMin(maxArrayLength, entries.length);
	  const output = new Array(maxLength);
	  ctx.indentationLvl += 2;
	  for (let i = 0; i < maxLength; i++) {
	    output[i] = formatValue(ctx, entries[i], recurseTimes);
	  }
	  ctx.indentationLvl -= 2;
	  if (state === kWeak && !ctx.sorted) {
	    // Sort all entries to have a halfway reliable output (if more entries than
	    // retrieved ones exist, we can not reliably return the same output) if the
	    // output is not sorted anyway.
	    ArrayPrototypeSort(output);
	  }
	  const remaining = entries.length - maxLength;
	  if (remaining > 0) {
	    ArrayPrototypePush(output, remainingText(remaining));
	  }
	  return output;
	}

	function formatMapIterInner(ctx, recurseTimes, entries, state) {
	  const maxArrayLength = MathMax(ctx.maxArrayLength, 0);
	  // Entries exist as [key1, val1, key2, val2, ...]
	  const len = entries.length / 2;
	  const remaining = len - maxArrayLength;
	  const maxLength = MathMin(maxArrayLength, len);
	  const output = new Array(maxLength);
	  let i = 0;
	  ctx.indentationLvl += 2;
	  if (state === kWeak) {
	    for (; i < maxLength; i++) {
	      const pos = i * 2;
	      output[i] =
	        `${formatValue(ctx, entries[pos], recurseTimes)} => ${formatValue(ctx, entries[pos + 1], recurseTimes)}`;
	    }
	    // Sort all entries to have a halfway reliable output (if more entries than
	    // retrieved ones exist, we can not reliably return the same output) if the
	    // output is not sorted anyway.
	    if (!ctx.sorted)
	      ArrayPrototypeSort(output);
	  } else {
	    for (; i < maxLength; i++) {
	      const pos = i * 2;
	      const res = [
	        formatValue(ctx, entries[pos], recurseTimes),
	        formatValue(ctx, entries[pos + 1], recurseTimes),
	      ];
	      output[i] = reduceToSingleString(
	        ctx, res, '', ['[', ']'], kArrayExtrasType, recurseTimes);
	    }
	  }
	  ctx.indentationLvl -= 2;
	  if (remaining > 0) {
	    ArrayPrototypePush(output, remainingText(remaining));
	  }
	  return output;
	}

	function formatWeakCollection(ctx) {
	  return [ctx.stylize('<items unknown>', 'special')];
	}

	function formatWeakSet(ctx, value, recurseTimes) {
	  const entries = previewEntries(value);
	  return formatSetIterInner(ctx, recurseTimes, entries, kWeak);
	}

	function formatWeakMap(ctx, value, recurseTimes) {
	  const entries = previewEntries(value);
	  return formatMapIterInner(ctx, recurseTimes, entries, kWeak);
	}

	function formatIterator(braces, ctx, value, recurseTimes) {
	  const { 0: entries, 1: isKeyValue } = previewEntries(value, true);
	  if (isKeyValue) {
	    // Mark entry iterators as such.
	    braces[0] = RegExpPrototypeSymbolReplace(/ Iterator] {$/, braces[0], ' Entries] {');
	    return formatMapIterInner(ctx, recurseTimes, entries, kMapEntries);
	  }

	  return formatSetIterInner(ctx, recurseTimes, entries, kIterator);
	}

	function formatPromise(ctx, value, recurseTimes) {
	  let output;
	  const { 0: state, 1: result } = getPromiseDetails(value);
	  if (state === kPending) {
	    output = [ctx.stylize('<pending>', 'special')];
	  } else {
	    ctx.indentationLvl += 2;
	    const str = formatValue(ctx, result, recurseTimes);
	    ctx.indentationLvl -= 2;
	    output = [
	      state === kRejected ?
	        `${ctx.stylize('<rejected>', 'special')} ${str}` :
	        str,
	    ];
	  }
	  return output;
	}

	function formatProperty(ctx, value, recurseTimes, key, type, desc,
	                        original = value) {
	  let name, str;
	  let extra = ' ';
	  desc = desc || ObjectGetOwnPropertyDescriptor(value, key) ||
	    { value: value[key], enumerable: true };
	  if (desc.value !== undefined) {
	    const diff = (ctx.compact !== true || type !== kObjectType) ? 2 : 3;
	    ctx.indentationLvl += diff;
	    str = formatValue(ctx, desc.value, recurseTimes);
	    if (diff === 3 && ctx.breakLength < getStringWidth(str, ctx.colors)) {
	      extra = `\n${StringPrototypeRepeat(' ', ctx.indentationLvl)}`;
	    }
	    ctx.indentationLvl -= diff;
	  } else if (desc.get !== undefined) {
	    const label = desc.set !== undefined ? 'Getter/Setter' : 'Getter';
	    const s = ctx.stylize;
	    const sp = 'special';
	    if (ctx.getters && (ctx.getters === true ||
	          (ctx.getters === 'get' && desc.set === undefined) ||
	          (ctx.getters === 'set' && desc.set !== undefined))) {
	      try {
	        const tmp = FunctionPrototypeCall(desc.get, original);
	        ctx.indentationLvl += 2;
	        if (tmp === null) {
	          str = `${s(`[${label}:`, sp)} ${s('null', 'null')}${s(']', sp)}`;
	        } else if (typeof tmp === 'object') {
	          str = `${s(`[${label}]`, sp)} ${formatValue(ctx, tmp, recurseTimes)}`;
	        } else {
	          const primitive = formatPrimitive(s, tmp, ctx);
	          str = `${s(`[${label}:`, sp)} ${primitive}${s(']', sp)}`;
	        }
	        ctx.indentationLvl -= 2;
	      } catch (err) {
	        const message = `<Inspection threw (${err.message})>`;
	        str = `${s(`[${label}:`, sp)} ${message}${s(']', sp)}`;
	      }
	    } else {
	      str = ctx.stylize(`[${label}]`, sp);
	    }
	  } else if (desc.set !== undefined) {
	    str = ctx.stylize('[Setter]', 'special');
	  } else {
	    str = ctx.stylize('undefined', 'undefined');
	  }
	  if (type === kArrayType) {
	    return str;
	  }
	  if (typeof key === 'symbol') {
	    const tmp = RegExpPrototypeSymbolReplace(
	      strEscapeSequencesReplacer,
	      SymbolPrototypeToString(key),
	      escapeFn,
	    );
	    name = `[${ctx.stylize(tmp, 'symbol')}]`;
	  } else if (key === '__proto__') {
	    name = "['__proto__']";
	  } else if (desc.enumerable === false) {
	    const tmp = RegExpPrototypeSymbolReplace(
	      strEscapeSequencesReplacer,
	      key,
	      escapeFn,
	    );
	    name = `[${tmp}]`;
	  } else if (RegExpPrototypeExec(keyStrRegExp, key) !== null) {
	    name = ctx.stylize(key, 'name');
	  } else {
	    name = ctx.stylize(strEscape(key), 'string');
	  }
	  return `${name}:${extra}${str}`;
	}

	function isBelowBreakLength(ctx, output, start, base) {
	  // Each entry is separated by at least a comma. Thus, we start with a total
	  // length of at least `output.length`. In addition, some cases have a
	  // whitespace in-between each other that is added to the total as well.
	  // TODO(BridgeAR): Add unicode support. Use the readline getStringWidth
	  // function. Check the performance overhead and make it an opt-in in case it's
	  // significant.
	  let totalLength = output.length + start;
	  if (totalLength + output.length > ctx.breakLength)
	    return false;
	  for (let i = 0; i < output.length; i++) {
	    if (ctx.colors) {
	      totalLength += removeColors(output[i]).length;
	    } else {
	      totalLength += output[i].length;
	    }
	    if (totalLength > ctx.breakLength) {
	      return false;
	    }
	  }
	  // Do not line up properties on the same line if `base` contains line breaks.
	  return base === '' || !StringPrototypeIncludes(base, '\n');
	}

	function reduceToSingleString(
	  ctx, output, base, braces, extrasType, recurseTimes, value) {
	  if (ctx.compact !== true) {
	    if (typeof ctx.compact === 'number' && ctx.compact >= 1) {
	      // Memorize the original output length. In case the output is grouped,
	      // prevent lining up the entries on a single line.
	      const entries = output.length;
	      // Group array elements together if the array contains at least six
	      // separate entries.
	      if (extrasType === kArrayExtrasType && entries > 6) {
	        output = groupArrayElements(ctx, output, value);
	      }
	      // `ctx.currentDepth` is set to the most inner depth of the currently
	      // inspected object part while `recurseTimes` is the actual current depth
	      // that is inspected.
	      //
	      // Example:
	      //
	      // const a = { first: [ 1, 2, 3 ], second: { inner: [ 1, 2, 3 ] } }
	      //
	      // The deepest depth of `a` is 2 (a.second.inner) and `a.first` has a max
	      // depth of 1.
	      //
	      // Consolidate all entries of the local most inner depth up to
	      // `ctx.compact`, as long as the properties are smaller than
	      // `ctx.breakLength`.
	      if (ctx.currentDepth - recurseTimes < ctx.compact &&
	          entries === output.length) {
	        // Line up all entries on a single line in case the entries do not
	        // exceed `breakLength`. Add 10 as constant to start next to all other
	        // factors that may reduce `breakLength`.
	        const start = output.length + ctx.indentationLvl +
	                      braces[0].length + base.length + 10;
	        if (isBelowBreakLength(ctx, output, start, base)) {
	          const joinedOutput = join(output, ', ');
	          if (!StringPrototypeIncludes(joinedOutput, '\n')) {
	            return `${base ? `${base} ` : ''}${braces[0]} ${joinedOutput}` +
	              ` ${braces[1]}`;
	          }
	        }
	      }
	    }
	    // Line up each entry on an individual line.
	    const indentation = `\n${StringPrototypeRepeat(' ', ctx.indentationLvl)}`;
	    return `${base ? `${base} ` : ''}${braces[0]}${indentation}  ` +
	      `${join(output, `,${indentation}  `)}${indentation}${braces[1]}`;
	  }
	  // Line up all entries on a single line in case the entries do not exceed
	  // `breakLength`.
	  if (isBelowBreakLength(ctx, output, 0, base)) {
	    return `${braces[0]}${base ? ` ${base}` : ''} ${join(output, ', ')} ` +
	      braces[1];
	  }
	  const indentation = StringPrototypeRepeat(' ', ctx.indentationLvl);
	  // If the opening "brace" is too large, like in the case of "Set {",
	  // we need to force the first item to be on the next line or the
	  // items will not line up correctly.
	  const ln = base === '' && braces[0].length === 1 ?
	    ' ' : `${base ? ` ${base}` : ''}\n${indentation}  `;
	  // Line up each entry on an individual line.
	  return `${braces[0]}${ln}${join(output, `,\n${indentation}  `)} ${braces[1]}`;
	}

	function hasBuiltInToString(value) {
	  // Prevent triggering proxy traps.
	  const getFullProxy = false;
	  const proxyTarget = getProxyDetails(value, getFullProxy);
	  if (proxyTarget !== undefined) {
	    if (proxyTarget === null) {
	      return true;
	    }
	    value = proxyTarget;
	  }

	  // Count objects that have no `toString` function as built-in.
	  if (typeof value.toString !== 'function') {
	    return true;
	  }

	  // The object has a own `toString` property. Thus it's not not a built-in one.
	  if (ObjectPrototypeHasOwnProperty(value, 'toString')) {
	    return false;
	  }

	  // Find the object that has the `toString` property as own property in the
	  // prototype chain.
	  let pointer = value;
	  do {
	    pointer = ObjectGetPrototypeOf(pointer);
	  } while (!ObjectPrototypeHasOwnProperty(pointer, 'toString'));

	  // Check closer if the object is a built-in.
	  const descriptor = ObjectGetOwnPropertyDescriptor(pointer, 'constructor');
	  return descriptor !== undefined &&
	    typeof descriptor.value === 'function' &&
	    builtInObjects.has(descriptor.value.name);
	}

	const firstErrorLine = (error) => StringPrototypeSplit(error.message, '\n', 1)[0];
	let CIRCULAR_ERROR_MESSAGE;
	function tryStringify(arg) {
	  try {
	    return JSONStringify(arg);
	  } catch (err) {
	    // Populate the circular error message lazily
	    if (!CIRCULAR_ERROR_MESSAGE) {
	      try {
	        const a = {};
	        a.a = a;
	        JSONStringify(a);
	      } catch (circularError) {
	        CIRCULAR_ERROR_MESSAGE = firstErrorLine(circularError);
	      }
	    }
	    if (err.name === 'TypeError' &&
	        firstErrorLine(err) === CIRCULAR_ERROR_MESSAGE) {
	      return '[Circular]';
	    }
	    throw err;
	  }
	}

	function format(...args) {
	  return formatWithOptionsInternal(undefined, args);
	}

	function formatWithOptions(inspectOptions, ...args) {
	  validateObject(inspectOptions, 'inspectOptions', { allowArray: true });
	  return formatWithOptionsInternal(inspectOptions, args);
	}

	function formatNumberNoColor(number, options) {
	  return formatNumber(
	    stylizeNoColor,
	    number,
	    options?.numericSeparator ?? inspectDefaultOptions.numericSeparator,
	  );
	}

	function formatBigIntNoColor(bigint, options) {
	  return formatBigInt(
	    stylizeNoColor,
	    bigint,
	    options?.numericSeparator ?? inspectDefaultOptions.numericSeparator,
	  );
	}

	function formatWithOptionsInternal(inspectOptions, args) {
	  const first = args[0];
	  let a = 0;
	  let str = '';
	  let join = '';

	  if (typeof first === 'string') {
	    if (args.length === 1) {
	      return first;
	    }
	    let tempStr;
	    let lastPos = 0;

	    for (let i = 0; i < first.length - 1; i++) {
	      if (StringPrototypeCharCodeAt(first, i) === 37) { // '%'
	        const nextChar = StringPrototypeCharCodeAt(first, ++i);
	        if (a + 1 !== args.length) {
	          switch (nextChar) {
	            case 115: { // 's'
	              const tempArg = args[++a];
	              if (typeof tempArg === 'number') {
	                tempStr = formatNumberNoColor(tempArg, inspectOptions);
	              } else if (typeof tempArg === 'bigint') {
	                tempStr = formatBigIntNoColor(tempArg, inspectOptions);
	              } else if (typeof tempArg !== 'object' ||
	                         tempArg === null ||
	                         !hasBuiltInToString(tempArg)) {
	                tempStr = String(tempArg);
	              } else {
	                tempStr = inspect(tempArg, {
	                  ...inspectOptions,
	                  compact: 3,
	                  colors: false,
	                  depth: 0,
	                });
	              }
	              break;
	            }
	            case 106: // 'j'
	              tempStr = tryStringify(args[++a]);
	              break;
	            case 100: { // 'd'
	              const tempNum = args[++a];
	              if (typeof tempNum === 'bigint') {
	                tempStr = formatBigIntNoColor(tempNum, inspectOptions);
	              } else if (typeof tempNum === 'symbol') {
	                tempStr = 'NaN';
	              } else {
	                tempStr = formatNumberNoColor(Number(tempNum), inspectOptions);
	              }
	              break;
	            }
	            case 79: // 'O'
	              tempStr = inspect(args[++a], inspectOptions);
	              break;
	            case 111: // 'o'
	              tempStr = inspect(args[++a], {
	                ...inspectOptions,
	                showHidden: true,
	                showProxy: true,
	                depth: 4,
	              });
	              break;
	            case 105: { // 'i'
	              const tempInteger = args[++a];
	              if (typeof tempInteger === 'bigint') {
	                tempStr = formatBigIntNoColor(tempInteger, inspectOptions);
	              } else if (typeof tempInteger === 'symbol') {
	                tempStr = 'NaN';
	              } else {
	                tempStr = formatNumberNoColor(
	                  NumberParseInt(tempInteger), inspectOptions);
	              }
	              break;
	            }
	            case 102: { // 'f'
	              const tempFloat = args[++a];
	              if (typeof tempFloat === 'symbol') {
	                tempStr = 'NaN';
	              } else {
	                tempStr = formatNumberNoColor(
	                  NumberParseFloat(tempFloat), inspectOptions);
	              }
	              break;
	            }
	            case 99: // 'c'
	              a += 1;
	              tempStr = '';
	              break;
	            case 37: // '%'
	              str += StringPrototypeSlice(first, lastPos, i);
	              lastPos = i + 1;
	              continue;
	            default: // Any other character is not a correct placeholder
	              continue;
	          }
	          if (lastPos !== i - 1) {
	            str += StringPrototypeSlice(first, lastPos, i - 1);
	          }
	          str += tempStr;
	          lastPos = i + 1;
	        } else if (nextChar === 37) {
	          str += StringPrototypeSlice(first, lastPos, i);
	          lastPos = i + 1;
	        }
	      }
	    }
	    if (lastPos !== 0) {
	      a++;
	      join = ' ';
	      if (lastPos < first.length) {
	        str += StringPrototypeSlice(first, lastPos);
	      }
	    }
	  }

	  while (a < args.length) {
	    const value = args[a];
	    str += join;
	    str += typeof value !== 'string' ? inspect(value, inspectOptions) : value;
	    join = ' ';
	    a++;
	  }
	  return str;
	}

	function isZeroWidthCodePoint(code) {
	  return code <= 0x1F || // C0 control codes
	    (code >= 0x7F && code <= 0x9F) || // C1 control codes
	    (code >= 0x300 && code <= 0x36F) || // Combining Diacritical Marks
	    (code >= 0x200B && code <= 0x200F) || // Modifying Invisible Characters
	    // Combining Diacritical Marks for Symbols
	    (code >= 0x20D0 && code <= 0x20FF) ||
	    (code >= 0xFE00 && code <= 0xFE0F) || // Variation Selectors
	    (code >= 0xFE20 && code <= 0xFE2F) || // Combining Half Marks
	    (code >= 0xE0100 && code <= 0xE01EF); // Variation Selectors
	}

	/* c8 ignore start */
	if (internalBinding('config').hasIntl) {
	  assert(false);
	  // Can't use node internals
	  // const icu = internalBinding('icu');
	  // // icu.getStringWidth(string, ambiguousAsFullWidth, expandEmojiSequence)
	  // // Defaults: ambiguousAsFullWidth = false; expandEmojiSequence = true;
	  // // TODO(BridgeAR): Expose the options to the user. That is probably the
	  // // best thing possible at the moment, since it's difficult to know what
	  // // the receiving end supports.
	  // getStringWidth = function getStringWidth(str, removeControlChars = true) {
	  //   let width = 0;

	  //   if (removeControlChars) {
	  //     str = stripVTControlCharacters(str);
	  //   }
	  //   for (let i = 0; i < str.length; i++) {
	  //     // Try to avoid calling into C++ by first handling the ASCII portion of
	  //     // the string. If it is fully ASCII, we skip the C++ part.
	  //     const code = str.charCodeAt(i);
	  //     if (code >= 127) {
	  //       width += icu.getStringWidth(StringPrototypeNormalize(StringPrototypeSlice(str, i), 'NFC'));
	  //       break;
	  //     }
	  //     width += code >= 32 ? 1 : 0;
	  //   }
	  //   return width;
	  // };
	  /* c8 ignore stop */
	} else {
	  /**
	   * Returns the number of columns required to display the given string.
	   */
	  getStringWidth = function getStringWidth(str, removeControlChars = true) {
	    let width = 0;

	    if (removeControlChars)
	      str = stripVTControlCharacters(str);
	    str = StringPrototypeNormalize(str, 'NFC');
	    for (const char of new SafeStringIterator(str)) {
	      const code = StringPrototypeCodePointAt(char, 0);
	      if (isFullWidthCodePoint(code)) {
	        width += 2;
	      } else if (!isZeroWidthCodePoint(code)) {
	        width++;
	      }
	    }

	    return width;
	  };

	  /**
	   * Returns true if the character represented by a given
	   * Unicode code point is full-width. Otherwise returns false.
	   */
	  const isFullWidthCodePoint = (code) => {
	    // Code points are partially derived from:
	    // https://www.unicode.org/Public/UNIDATA/EastAsianWidth.txt
	    return code >= 0x1100 && (
	      code <= 0x115f ||  // Hangul Jamo
	      code === 0x2329 || // LEFT-POINTING ANGLE BRACKET
	      code === 0x232a || // RIGHT-POINTING ANGLE BRACKET
	      // CJK Radicals Supplement .. Enclosed CJK Letters and Months
	      (code >= 0x2e80 && code <= 0x3247 && code !== 0x303f) ||
	      // Enclosed CJK Letters and Months .. CJK Unified Ideographs Extension A
	      (code >= 0x3250 && code <= 0x4dbf) ||
	      // CJK Unified Ideographs .. Yi Radicals
	      (code >= 0x4e00 && code <= 0xa4c6) ||
	      // Hangul Jamo Extended-A
	      (code >= 0xa960 && code <= 0xa97c) ||
	      // Hangul Syllables
	      (code >= 0xac00 && code <= 0xd7a3) ||
	      // CJK Compatibility Ideographs
	      (code >= 0xf900 && code <= 0xfaff) ||
	      // Vertical Forms
	      (code >= 0xfe10 && code <= 0xfe19) ||
	      // CJK Compatibility Forms .. Small Form Variants
	      (code >= 0xfe30 && code <= 0xfe6b) ||
	      // Halfwidth and Fullwidth Forms
	      (code >= 0xff01 && code <= 0xff60) ||
	      (code >= 0xffe0 && code <= 0xffe6) ||
	      // Kana Supplement
	      (code >= 0x1b000 && code <= 0x1b001) ||
	      // Enclosed Ideographic Supplement
	      (code >= 0x1f200 && code <= 0x1f251) ||
	      // Miscellaneous Symbols and Pictographs 0x1f300 - 0x1f5ff
	      // Emoticons 0x1f600 - 0x1f64f
	      (code >= 0x1f300 && code <= 0x1f64f) ||
	      // CJK Unified Ideographs Extension B .. Tertiary Ideographic Plane
	      (code >= 0x20000 && code <= 0x3fffd)
	    );
	  };

	}

	/**
	 * Remove all VT control characters. Use to estimate displayed string width.
	 */
	function stripVTControlCharacters(str) {
	  validateString(str, 'str');
	  return RegExpPrototypeSymbolReplace(ansi, str, '');
	}

	const entities = {
	  34: '&quot;',
	  38: '&amp;',
	  39: '&apos;',
	  60: '&lt;',
	  62: '&gt;',
	  160: '&nbsp;',
	};

	function escapeHTML(str) {
	  return str.replace(
	    // eslint-disable-next-line no-control-regex
	    /[\u0000-\u002F\u003A-\u0040\u005B-\u0060\u007B-\u00FF]/g,
	    (c) => {
	      const code = String(c.charCodeAt(0));
	      const ent = entities[code];
	      return ent || ('&#' + code + ';');
	    },
	  );
	}

	inspect_1 = {
	  identicalSequenceRange,
	  inspect,
	  inspectDefaultOptions,
	  format,
	  formatWithOptions,
	  getStringWidth,
	  stripVTControlCharacters,
	  isZeroWidthCodePoint,
	  stylizeWithColor,
	  stylizeWithHTML(str, styleType) {
	    const style = inspect.styles[styleType];
	    if (style !== undefined) {
	      return `<span style="color:${style};">${escapeHTML(str)}</span>`;
	    }
	    return escapeHTML(str);
	  },
	  Proxy,
	};
	return inspect_1;
}

var inspectExports = requireInspect$1();
var inspect$2 = /*@__PURE__*/getDefaultExportFromCjs(inspectExports);

const {
  // The commented out things are not visible from normal node's util.
  // identicalSequenceRange,
  inspect: inspect$1,
  // inspectDefaultOptions,
  format,
  formatWithOptions,
  // getStringWidth,
  stripVTControlCharacters,
  // isZeroWidthCodePoint,
  stylizeWithColor,
  stylizeWithHTML,
  Proxy: Proxy$1,
} = inspect$2;

function isBuffer(arg) {
  return (
    arg &&
    typeof arg === 'object' &&
    typeof arg.copy === 'function' &&
    typeof arg.fill === 'function' &&
    typeof arg.readUInt8 === 'function'
  )
}

// borrow from https://github.com/isaacs/inherits
function inherits(ctor, superCtor) {
  if (superCtor) {
    ctor.super_ = superCtor;
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true,
      },
    });
  }
}

var util$3 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	format: format,
	inherits: inherits,
	inspect: inspect$1,
	isBuffer: isBuffer
});

var require$$14 = /*@__PURE__*/getAugmentedNamespace(util$3);

var hasRequiredErrors$1;

function requireErrors$1 () {
	if (hasRequiredErrors$1) return errors$2;
	hasRequiredErrors$1 = 1;
	(function (exports) {
		// The whole point behind this internal module is to allow Node.js to no
		// longer be forced to treat every error message change as a semver-major
		// change. The NodeError classes here all expose a `code` property whose
		// value statically and permanently identifies the error. While the error
		// message may change, the code should not.
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.AssertionError = exports.RangeError = exports.TypeError = exports.Error = void 0;
		exports.message = message;
		exports.E = E;
		const assert = requireAssert();
		const util = require$$14;
		const kCode = typeof Symbol === 'undefined' ? '_kCode' : Symbol('code');
		const messages = {}; // new Map();
		function makeNodeError(Base) {
		    return class NodeError extends Base {
		        constructor(key, ...args) {
		            super(message(key, args));
		            this.code = key;
		            this[kCode] = key;
		            this.name = `${super.name} [${this[kCode]}]`;
		        }
		    };
		}
		const g = typeof globalThis !== 'undefined' ? globalThis : commonjsGlobal$1;
		class AssertionError extends g.Error {
		    constructor(options) {
		        if (typeof options !== 'object' || options === null) {
		            throw new exports.TypeError('ERR_INVALID_ARG_TYPE', 'options', 'object');
		        }
		        if (options.message) {
		            super(options.message);
		        }
		        else {
		            super(`${util.inspect(options.actual).slice(0, 128)} ` +
		                `${options.operator} ${util.inspect(options.expected).slice(0, 128)}`);
		        }
		        this.generatedMessage = !options.message;
		        this.name = 'AssertionError [ERR_ASSERTION]';
		        this.code = 'ERR_ASSERTION';
		        this.actual = options.actual;
		        this.expected = options.expected;
		        this.operator = options.operator;
		        exports.Error.captureStackTrace(this, options.stackStartFunction);
		    }
		}
		exports.AssertionError = AssertionError;
		function message(key, args) {
		    assert.strictEqual(typeof key, 'string');
		    // const msg = messages.get(key);
		    const msg = messages[key];
		    assert(msg, `An invalid error message key was used: ${key}.`);
		    let fmt;
		    if (typeof msg === 'function') {
		        fmt = msg;
		    }
		    else {
		        fmt = util.format;
		        if (args === undefined || args.length === 0)
		            return msg;
		        args.unshift(msg);
		    }
		    return String(fmt.apply(null, args));
		}
		// Utility function for registering the error codes. Only used here. Exported
		// *only* to allow for testing.
		function E(sym, val) {
		    messages[sym] = typeof val === 'function' ? val : String(val);
		}
		exports.Error = makeNodeError(g.Error);
		exports.TypeError = makeNodeError(g.TypeError);
		exports.RangeError = makeNodeError(g.RangeError);
		// To declare an error message, use the E(sym, val) function above. The sym
		// must be an upper case string. The val can be either a function or a string.
		// The return value of the function must be a string.
		// Examples:
		// E('EXAMPLE_KEY1', 'This is the error value');
		// E('EXAMPLE_KEY2', (a, b) => return `${a} ${b}`);
		//
		// Once an error code has been assigned, the code itself MUST NOT change and
		// any given error code must never be reused to identify a different error.
		//
		// Any error code added here should also be added to the documentation
		//
		// Note: Please try to keep these in alphabetical order
		E('ERR_ARG_NOT_ITERABLE', '%s must be iterable');
		E('ERR_ASSERTION', '%s');
		E('ERR_BUFFER_OUT_OF_BOUNDS', bufferOutOfBounds);
		E('ERR_CHILD_CLOSED_BEFORE_REPLY', 'Child closed before reply received');
		E('ERR_CONSOLE_WRITABLE_STREAM', 'Console expects a writable stream instance for %s');
		E('ERR_CPU_USAGE', 'Unable to obtain cpu usage %s');
		E('ERR_DNS_SET_SERVERS_FAILED', (err, servers) => `c-ares failed to set servers: "${err}" [${servers}]`);
		E('ERR_FALSY_VALUE_REJECTION', 'Promise was rejected with falsy value');
		E('ERR_ENCODING_NOT_SUPPORTED', enc => `The "${enc}" encoding is not supported`);
		E('ERR_ENCODING_INVALID_ENCODED_DATA', enc => `The encoded data was not valid for encoding ${enc}`);
		E('ERR_HTTP_HEADERS_SENT', 'Cannot render headers after they are sent to the client');
		E('ERR_HTTP_INVALID_STATUS_CODE', 'Invalid status code: %s');
		E('ERR_HTTP_TRAILER_INVALID', 'Trailers are invalid with this transfer encoding');
		E('ERR_INDEX_OUT_OF_RANGE', 'Index out of range');
		E('ERR_INVALID_ARG_TYPE', invalidArgType);
		E('ERR_INVALID_ARRAY_LENGTH', (name, len, actual) => {
		    assert.strictEqual(typeof actual, 'number');
		    return `The array "${name}" (length ${actual}) must be of length ${len}.`;
		});
		E('ERR_INVALID_BUFFER_SIZE', 'Buffer size must be a multiple of %s');
		E('ERR_INVALID_CALLBACK', 'Callback must be a function');
		E('ERR_INVALID_CHAR', 'Invalid character in %s');
		E('ERR_INVALID_CURSOR_POS', 'Cannot set cursor row without setting its column');
		E('ERR_INVALID_FD', '"fd" must be a positive integer: %s');
		E('ERR_INVALID_FILE_URL_HOST', 'File URL host must be "localhost" or empty on %s');
		E('ERR_INVALID_FILE_URL_PATH', 'File URL path %s');
		E('ERR_INVALID_HANDLE_TYPE', 'This handle type cannot be sent');
		E('ERR_INVALID_IP_ADDRESS', 'Invalid IP address: %s');
		E('ERR_INVALID_OPT_VALUE', (name, value) => {
		    return `The value "${String(value)}" is invalid for option "${name}"`;
		});
		E('ERR_INVALID_OPT_VALUE_ENCODING', value => `The value "${String(value)}" is invalid for option "encoding"`);
		E('ERR_INVALID_REPL_EVAL_CONFIG', 'Cannot specify both "breakEvalOnSigint" and "eval" for REPL');
		E('ERR_INVALID_SYNC_FORK_INPUT', 'Asynchronous forks do not support Buffer, Uint8Array or string input: %s');
		E('ERR_INVALID_THIS', 'Value of "this" must be of type %s');
		E('ERR_INVALID_TUPLE', '%s must be an iterable %s tuple');
		E('ERR_INVALID_URL', 'Invalid URL: %s');
		E('ERR_INVALID_URL_SCHEME', expected => `The URL must be ${oneOf(expected, 'scheme')}`);
		E('ERR_IPC_CHANNEL_CLOSED', 'Channel closed');
		E('ERR_IPC_DISCONNECTED', 'IPC channel is already disconnected');
		E('ERR_IPC_ONE_PIPE', 'Child process can have only one IPC pipe');
		E('ERR_IPC_SYNC_FORK', 'IPC cannot be used with synchronous forks');
		E('ERR_MISSING_ARGS', missingArgs);
		E('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
		E('ERR_NAPI_CONS_FUNCTION', 'Constructor must be a function');
		E('ERR_NAPI_CONS_PROTOTYPE_OBJECT', 'Constructor.prototype must be an object');
		E('ERR_NO_CRYPTO', 'Node.js is not compiled with OpenSSL crypto support');
		E('ERR_NO_LONGER_SUPPORTED', '%s is no longer supported');
		E('ERR_PARSE_HISTORY_DATA', 'Could not parse history data in %s');
		E('ERR_SOCKET_ALREADY_BOUND', 'Socket is already bound');
		E('ERR_SOCKET_BAD_PORT', 'Port should be > 0 and < 65536');
		E('ERR_SOCKET_BAD_TYPE', 'Bad socket type specified. Valid types are: udp4, udp6');
		E('ERR_SOCKET_CANNOT_SEND', 'Unable to send data');
		E('ERR_SOCKET_CLOSED', 'Socket is closed');
		E('ERR_SOCKET_DGRAM_NOT_RUNNING', 'Not running');
		E('ERR_STDERR_CLOSE', 'process.stderr cannot be closed');
		E('ERR_STDOUT_CLOSE', 'process.stdout cannot be closed');
		E('ERR_STREAM_WRAP', 'Stream has StringDecoder set or is in objectMode');
		E('ERR_TLS_CERT_ALTNAME_INVALID', "Hostname/IP does not match certificate's altnames: %s");
		E('ERR_TLS_DH_PARAM_SIZE', size => `DH parameter size ${size} is less than 2048`);
		E('ERR_TLS_HANDSHAKE_TIMEOUT', 'TLS handshake timeout');
		E('ERR_TLS_RENEGOTIATION_FAILED', 'Failed to renegotiate');
		E('ERR_TLS_REQUIRED_SERVER_NAME', '"servername" is required parameter for Server.addContext');
		E('ERR_TLS_SESSION_ATTACK', 'TSL session renegotiation attack detected');
		E('ERR_TRANSFORM_ALREADY_TRANSFORMING', 'Calling transform done when still transforming');
		E('ERR_TRANSFORM_WITH_LENGTH_0', 'Calling transform done when writableState.length != 0');
		E('ERR_UNKNOWN_ENCODING', 'Unknown encoding: %s');
		E('ERR_UNKNOWN_SIGNAL', 'Unknown signal: %s');
		E('ERR_UNKNOWN_STDIN_TYPE', 'Unknown stdin file type');
		E('ERR_UNKNOWN_STREAM_TYPE', 'Unknown stream file type');
		E('ERR_V8BREAKITERATOR', 'Full ICU data not installed. ' + 'See https://github.com/nodejs/node/wiki/Intl');
		function invalidArgType(name, expected, actual) {
		    assert(name, 'name is required');
		    // determiner: 'must be' or 'must not be'
		    let determiner;
		    if (expected.includes('not ')) {
		        determiner = 'must not be';
		        expected = expected.split('not ')[1];
		    }
		    else {
		        determiner = 'must be';
		    }
		    let msg;
		    if (Array.isArray(name)) {
		        const names = name.map(val => `"${val}"`).join(', ');
		        msg = `The ${names} arguments ${determiner} ${oneOf(expected, 'type')}`;
		    }
		    else if (name.includes(' argument')) {
		        // for the case like 'first argument'
		        msg = `The ${name} ${determiner} ${oneOf(expected, 'type')}`;
		    }
		    else {
		        const type = name.includes('.') ? 'property' : 'argument';
		        msg = `The "${name}" ${type} ${determiner} ${oneOf(expected, 'type')}`;
		    }
		    // if actual value received, output it
		    if (arguments.length >= 3) {
		        msg += `. Received type ${actual !== null ? typeof actual : 'null'}`;
		    }
		    return msg;
		}
		function missingArgs(...args) {
		    assert(args.length > 0, 'At least one arg needs to be specified');
		    let msg = 'The ';
		    const len = args.length;
		    args = args.map(a => `"${a}"`);
		    switch (len) {
		        case 1:
		            msg += `${args[0]} argument`;
		            break;
		        case 2:
		            msg += `${args[0]} and ${args[1]} arguments`;
		            break;
		        default:
		            msg += args.slice(0, len - 1).join(', ');
		            msg += `, and ${args[len - 1]} arguments`;
		            break;
		    }
		    return `${msg} must be specified`;
		}
		function oneOf(expected, thing) {
		    assert(expected, 'expected is required');
		    assert(typeof thing === 'string', 'thing is required');
		    if (Array.isArray(expected)) {
		        const len = expected.length;
		        assert(len > 0, 'At least one expected value needs to be specified');
		        // tslint:disable-next-line
		        expected = expected.map(i => String(i));
		        if (len > 2) {
		            return `one of ${thing} ${expected.slice(0, len - 1).join(', ')}, or ` + expected[len - 1];
		        }
		        else if (len === 2) {
		            return `one of ${thing} ${expected[0]} or ${expected[1]}`;
		        }
		        else {
		            return `of ${thing} ${expected[0]}`;
		        }
		    }
		    else {
		        return `of ${thing} ${String(expected)}`;
		    }
		}
		function bufferOutOfBounds(name, isWriting) {
		    if (isWriting) {
		        return 'Attempt to write outside buffer bounds';
		    }
		    else {
		        return `"${name}" is outside of buffer bounds`;
		    }
		}
		
	} (errors$2));
	return errors$2;
}

var hasRequiredEncoding;

function requireEncoding () {
	if (hasRequiredEncoding) return encoding;
	hasRequiredEncoding = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.ENCODING_UTF8 = void 0;
		exports.assertEncoding = assertEncoding;
		exports.strToEncoding = strToEncoding;
		const buffer_1 = requireBuffer$1();
		const errors = requireErrors$1();
		exports.ENCODING_UTF8 = 'utf8';
		function assertEncoding(encoding) {
		    if (encoding && !buffer_1.Buffer.isEncoding(encoding))
		        throw new errors.TypeError('ERR_INVALID_OPT_VALUE_ENCODING', encoding);
		}
		function strToEncoding(str, encoding) {
		    if (!encoding || encoding === exports.ENCODING_UTF8)
		        return str; // UTF-8
		    if (encoding === 'buffer')
		        return new buffer_1.Buffer(str); // `buffer` encoding
		    return new buffer_1.Buffer(str).toString(encoding); // Custom encoding
		}
		
	} (encoding));
	return encoding;
}

var hasRequiredDirent;

function requireDirent () {
	if (hasRequiredDirent) return Dirent;
	hasRequiredDirent = 1;
	Object.defineProperty(Dirent, "__esModule", { value: true });
	Dirent.Dirent = void 0;
	const constants_1 = requireConstants$2();
	const encoding_1 = requireEncoding();
	const { S_IFMT, S_IFDIR, S_IFREG, S_IFBLK, S_IFCHR, S_IFLNK, S_IFIFO, S_IFSOCK } = constants_1.constants;
	/**
	 * A directory entry, like `fs.Dirent`.
	 */
	let Dirent$1 = class Dirent {
	    constructor() {
	        this.name = '';
	        this.path = '';
	        this.parentPath = '';
	        this.mode = 0;
	    }
	    static build(link, encoding) {
	        const dirent = new Dirent();
	        const { mode } = link.getNode();
	        dirent.name = (0, encoding_1.strToEncoding)(link.getName(), encoding);
	        dirent.mode = mode;
	        dirent.path = link.getParentPath();
	        dirent.parentPath = dirent.path;
	        return dirent;
	    }
	    _checkModeProperty(property) {
	        return (this.mode & S_IFMT) === property;
	    }
	    isDirectory() {
	        return this._checkModeProperty(S_IFDIR);
	    }
	    isFile() {
	        return this._checkModeProperty(S_IFREG);
	    }
	    isBlockDevice() {
	        return this._checkModeProperty(S_IFBLK);
	    }
	    isCharacterDevice() {
	        return this._checkModeProperty(S_IFCHR);
	    }
	    isSymbolicLink() {
	        return this._checkModeProperty(S_IFLNK);
	    }
	    isFIFO() {
	        return this._checkModeProperty(S_IFIFO);
	    }
	    isSocket() {
	        return this._checkModeProperty(S_IFSOCK);
	    }
	};
	Dirent.Dirent = Dirent$1;
	Dirent.default = Dirent$1;
	
	return Dirent;
}

var volume = {};

var pathBrowserify;
var hasRequiredPathBrowserify;

function requirePathBrowserify () {
	if (hasRequiredPathBrowserify) return pathBrowserify;
	hasRequiredPathBrowserify = 1;

	function assertPath(path) {
	  if (typeof path !== 'string') {
	    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));
	  }
	}

	// Resolves . and .. elements in a path with directory names
	function normalizeStringPosix(path, allowAboveRoot) {
	  var res = '';
	  var lastSegmentLength = 0;
	  var lastSlash = -1;
	  var dots = 0;
	  var code;
	  for (var i = 0; i <= path.length; ++i) {
	    if (i < path.length)
	      code = path.charCodeAt(i);
	    else if (code === 47 /*/*/)
	      break;
	    else
	      code = 47 /*/*/;
	    if (code === 47 /*/*/) {
	      if (lastSlash === i - 1 || dots === 1) ; else if (lastSlash !== i - 1 && dots === 2) {
	        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {
	          if (res.length > 2) {
	            var lastSlashIndex = res.lastIndexOf('/');
	            if (lastSlashIndex !== res.length - 1) {
	              if (lastSlashIndex === -1) {
	                res = '';
	                lastSegmentLength = 0;
	              } else {
	                res = res.slice(0, lastSlashIndex);
	                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');
	              }
	              lastSlash = i;
	              dots = 0;
	              continue;
	            }
	          } else if (res.length === 2 || res.length === 1) {
	            res = '';
	            lastSegmentLength = 0;
	            lastSlash = i;
	            dots = 0;
	            continue;
	          }
	        }
	        if (allowAboveRoot) {
	          if (res.length > 0)
	            res += '/..';
	          else
	            res = '..';
	          lastSegmentLength = 2;
	        }
	      } else {
	        if (res.length > 0)
	          res += '/' + path.slice(lastSlash + 1, i);
	        else
	          res = path.slice(lastSlash + 1, i);
	        lastSegmentLength = i - lastSlash - 1;
	      }
	      lastSlash = i;
	      dots = 0;
	    } else if (code === 46 /*.*/ && dots !== -1) {
	      ++dots;
	    } else {
	      dots = -1;
	    }
	  }
	  return res;
	}

	function _format(sep, pathObject) {
	  var dir = pathObject.dir || pathObject.root;
	  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');
	  if (!dir) {
	    return base;
	  }
	  if (dir === pathObject.root) {
	    return dir + base;
	  }
	  return dir + sep + base;
	}

	var posix = {
	  // path.resolve([from ...], to)
	  resolve: function resolve() {
	    var resolvedPath = '';
	    var resolvedAbsolute = false;
	    var cwd;

	    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
	      var path;
	      if (i >= 0)
	        path = arguments[i];
	      else {
	        if (cwd === undefined)
	          cwd = process$1.cwd();
	        path = cwd;
	      }

	      assertPath(path);

	      // Skip empty entries
	      if (path.length === 0) {
	        continue;
	      }

	      resolvedPath = path + '/' + resolvedPath;
	      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;
	    }

	    // At this point the path should be resolved to a full absolute path, but
	    // handle relative paths to be safe (might happen when process.cwd() fails)

	    // Normalize the path
	    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);

	    if (resolvedAbsolute) {
	      if (resolvedPath.length > 0)
	        return '/' + resolvedPath;
	      else
	        return '/';
	    } else if (resolvedPath.length > 0) {
	      return resolvedPath;
	    } else {
	      return '.';
	    }
	  },

	  normalize: function normalize(path) {
	    assertPath(path);

	    if (path.length === 0) return '.';

	    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;
	    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;

	    // Normalize the path
	    path = normalizeStringPosix(path, !isAbsolute);

	    if (path.length === 0 && !isAbsolute) path = '.';
	    if (path.length > 0 && trailingSeparator) path += '/';

	    if (isAbsolute) return '/' + path;
	    return path;
	  },

	  isAbsolute: function isAbsolute(path) {
	    assertPath(path);
	    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;
	  },

	  join: function join() {
	    if (arguments.length === 0)
	      return '.';
	    var joined;
	    for (var i = 0; i < arguments.length; ++i) {
	      var arg = arguments[i];
	      assertPath(arg);
	      if (arg.length > 0) {
	        if (joined === undefined)
	          joined = arg;
	        else
	          joined += '/' + arg;
	      }
	    }
	    if (joined === undefined)
	      return '.';
	    return posix.normalize(joined);
	  },

	  relative: function relative(from, to) {
	    assertPath(from);
	    assertPath(to);

	    if (from === to) return '';

	    from = posix.resolve(from);
	    to = posix.resolve(to);

	    if (from === to) return '';

	    // Trim any leading backslashes
	    var fromStart = 1;
	    for (; fromStart < from.length; ++fromStart) {
	      if (from.charCodeAt(fromStart) !== 47 /*/*/)
	        break;
	    }
	    var fromEnd = from.length;
	    var fromLen = fromEnd - fromStart;

	    // Trim any leading backslashes
	    var toStart = 1;
	    for (; toStart < to.length; ++toStart) {
	      if (to.charCodeAt(toStart) !== 47 /*/*/)
	        break;
	    }
	    var toEnd = to.length;
	    var toLen = toEnd - toStart;

	    // Compare paths to find the longest common path from root
	    var length = fromLen < toLen ? fromLen : toLen;
	    var lastCommonSep = -1;
	    var i = 0;
	    for (; i <= length; ++i) {
	      if (i === length) {
	        if (toLen > length) {
	          if (to.charCodeAt(toStart + i) === 47 /*/*/) {
	            // We get here if `from` is the exact base path for `to`.
	            // For example: from='/foo/bar'; to='/foo/bar/baz'
	            return to.slice(toStart + i + 1);
	          } else if (i === 0) {
	            // We get here if `from` is the root
	            // For example: from='/'; to='/foo'
	            return to.slice(toStart + i);
	          }
	        } else if (fromLen > length) {
	          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {
	            // We get here if `to` is the exact base path for `from`.
	            // For example: from='/foo/bar/baz'; to='/foo/bar'
	            lastCommonSep = i;
	          } else if (i === 0) {
	            // We get here if `to` is the root.
	            // For example: from='/foo'; to='/'
	            lastCommonSep = 0;
	          }
	        }
	        break;
	      }
	      var fromCode = from.charCodeAt(fromStart + i);
	      var toCode = to.charCodeAt(toStart + i);
	      if (fromCode !== toCode)
	        break;
	      else if (fromCode === 47 /*/*/)
	        lastCommonSep = i;
	    }

	    var out = '';
	    // Generate the relative path based on the path difference between `to`
	    // and `from`
	    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {
	      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {
	        if (out.length === 0)
	          out += '..';
	        else
	          out += '/..';
	      }
	    }

	    // Lastly, append the rest of the destination (`to`) path that comes after
	    // the common path parts
	    if (out.length > 0)
	      return out + to.slice(toStart + lastCommonSep);
	    else {
	      toStart += lastCommonSep;
	      if (to.charCodeAt(toStart) === 47 /*/*/)
	        ++toStart;
	      return to.slice(toStart);
	    }
	  },

	  _makeLong: function _makeLong(path) {
	    return path;
	  },

	  dirname: function dirname(path) {
	    assertPath(path);
	    if (path.length === 0) return '.';
	    var code = path.charCodeAt(0);
	    var hasRoot = code === 47 /*/*/;
	    var end = -1;
	    var matchedSlash = true;
	    for (var i = path.length - 1; i >= 1; --i) {
	      code = path.charCodeAt(i);
	      if (code === 47 /*/*/) {
	          if (!matchedSlash) {
	            end = i;
	            break;
	          }
	        } else {
	        // We saw the first non-path separator
	        matchedSlash = false;
	      }
	    }

	    if (end === -1) return hasRoot ? '/' : '.';
	    if (hasRoot && end === 1) return '//';
	    return path.slice(0, end);
	  },

	  basename: function basename(path, ext) {
	    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('"ext" argument must be a string');
	    assertPath(path);

	    var start = 0;
	    var end = -1;
	    var matchedSlash = true;
	    var i;

	    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {
	      if (ext.length === path.length && ext === path) return '';
	      var extIdx = ext.length - 1;
	      var firstNonSlashEnd = -1;
	      for (i = path.length - 1; i >= 0; --i) {
	        var code = path.charCodeAt(i);
	        if (code === 47 /*/*/) {
	            // If we reached a path separator that was not part of a set of path
	            // separators at the end of the string, stop now
	            if (!matchedSlash) {
	              start = i + 1;
	              break;
	            }
	          } else {
	          if (firstNonSlashEnd === -1) {
	            // We saw the first non-path separator, remember this index in case
	            // we need it if the extension ends up not matching
	            matchedSlash = false;
	            firstNonSlashEnd = i + 1;
	          }
	          if (extIdx >= 0) {
	            // Try to match the explicit extension
	            if (code === ext.charCodeAt(extIdx)) {
	              if (--extIdx === -1) {
	                // We matched the extension, so mark this as the end of our path
	                // component
	                end = i;
	              }
	            } else {
	              // Extension does not match, so our result is the entire path
	              // component
	              extIdx = -1;
	              end = firstNonSlashEnd;
	            }
	          }
	        }
	      }

	      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;
	      return path.slice(start, end);
	    } else {
	      for (i = path.length - 1; i >= 0; --i) {
	        if (path.charCodeAt(i) === 47 /*/*/) {
	            // If we reached a path separator that was not part of a set of path
	            // separators at the end of the string, stop now
	            if (!matchedSlash) {
	              start = i + 1;
	              break;
	            }
	          } else if (end === -1) {
	          // We saw the first non-path separator, mark this as the end of our
	          // path component
	          matchedSlash = false;
	          end = i + 1;
	        }
	      }

	      if (end === -1) return '';
	      return path.slice(start, end);
	    }
	  },

	  extname: function extname(path) {
	    assertPath(path);
	    var startDot = -1;
	    var startPart = 0;
	    var end = -1;
	    var matchedSlash = true;
	    // Track the state of characters (if any) we see before our first dot and
	    // after any path separator we find
	    var preDotState = 0;
	    for (var i = path.length - 1; i >= 0; --i) {
	      var code = path.charCodeAt(i);
	      if (code === 47 /*/*/) {
	          // If we reached a path separator that was not part of a set of path
	          // separators at the end of the string, stop now
	          if (!matchedSlash) {
	            startPart = i + 1;
	            break;
	          }
	          continue;
	        }
	      if (end === -1) {
	        // We saw the first non-path separator, mark this as the end of our
	        // extension
	        matchedSlash = false;
	        end = i + 1;
	      }
	      if (code === 46 /*.*/) {
	          // If this is our first dot, mark it as the start of our extension
	          if (startDot === -1)
	            startDot = i;
	          else if (preDotState !== 1)
	            preDotState = 1;
	      } else if (startDot !== -1) {
	        // We saw a non-dot and non-path separator before our dot, so we should
	        // have a good chance at having a non-empty extension
	        preDotState = -1;
	      }
	    }

	    if (startDot === -1 || end === -1 ||
	        // We saw a non-dot character immediately before the dot
	        preDotState === 0 ||
	        // The (right-most) trimmed path component is exactly '..'
	        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
	      return '';
	    }
	    return path.slice(startDot, end);
	  },

	  format: function format(pathObject) {
	    if (pathObject === null || typeof pathObject !== 'object') {
	      throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof pathObject);
	    }
	    return _format('/', pathObject);
	  },

	  parse: function parse(path) {
	    assertPath(path);

	    var ret = { root: '', dir: '', base: '', ext: '', name: '' };
	    if (path.length === 0) return ret;
	    var code = path.charCodeAt(0);
	    var isAbsolute = code === 47 /*/*/;
	    var start;
	    if (isAbsolute) {
	      ret.root = '/';
	      start = 1;
	    } else {
	      start = 0;
	    }
	    var startDot = -1;
	    var startPart = 0;
	    var end = -1;
	    var matchedSlash = true;
	    var i = path.length - 1;

	    // Track the state of characters (if any) we see before our first dot and
	    // after any path separator we find
	    var preDotState = 0;

	    // Get non-dir info
	    for (; i >= start; --i) {
	      code = path.charCodeAt(i);
	      if (code === 47 /*/*/) {
	          // If we reached a path separator that was not part of a set of path
	          // separators at the end of the string, stop now
	          if (!matchedSlash) {
	            startPart = i + 1;
	            break;
	          }
	          continue;
	        }
	      if (end === -1) {
	        // We saw the first non-path separator, mark this as the end of our
	        // extension
	        matchedSlash = false;
	        end = i + 1;
	      }
	      if (code === 46 /*.*/) {
	          // If this is our first dot, mark it as the start of our extension
	          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;
	        } else if (startDot !== -1) {
	        // We saw a non-dot and non-path separator before our dot, so we should
	        // have a good chance at having a non-empty extension
	        preDotState = -1;
	      }
	    }

	    if (startDot === -1 || end === -1 ||
	    // We saw a non-dot character immediately before the dot
	    preDotState === 0 ||
	    // The (right-most) trimmed path component is exactly '..'
	    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
	      if (end !== -1) {
	        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);
	      }
	    } else {
	      if (startPart === 0 && isAbsolute) {
	        ret.name = path.slice(1, startDot);
	        ret.base = path.slice(1, end);
	      } else {
	        ret.name = path.slice(startPart, startDot);
	        ret.base = path.slice(startPart, end);
	      }
	      ret.ext = path.slice(startDot, end);
	    }

	    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';

	    return ret;
	  },

	  sep: '/',
	  delimiter: ':',
	  win32: null,
	  posix: null
	};

	posix.posix = posix;

	pathBrowserify = posix;
	return pathBrowserify;
}

var node = {};

var process = {};

var hasRequiredProcess;

function requireProcess () {
	if (hasRequiredProcess) return process;
	hasRequiredProcess = 1;
	// Here we mock the undefined `process` variable in case we are not in Node's environment.
	Object.defineProperty(process, "__esModule", { value: true });
	process.createProcess = createProcess;
	/**
	 * Looks to return a `process` object, if one is available.
	 *
	 * The undefined `process` is returned if defined;
	 * otherwise `require('process')` is attempted.
	 *
	 * If that fails, `undefined` is returned.
	 *
	 * @return {IProcess | undefined}
	 */
	const maybeReturnProcess = () => {
	    if (typeof process$1 !== 'undefined') {
	        return process$1;
	    }
	    try {
	        return requireBrowser$2();
	    }
	    catch (_a) {
	        return undefined;
	    }
	};
	function createProcess() {
	    const p = maybeReturnProcess() || {};
	    if (!p.cwd)
	        p.cwd = () => '/';
	    if (!p.emitWarning)
	        p.emitWarning = (message, type) => {
	            // tslint:disable-next-line:no-console
	            console.warn(`${type}${type ? ': ' : ''}${message}`);
	        };
	    if (!p.env)
	        p.env = {};
	    return p;
	}
	process.default = createProcess();
	
	return process;
}

var events = {exports: {}};

var hasRequiredEvents;

function requireEvents () {
	if (hasRequiredEvents) return events.exports;
	hasRequiredEvents = 1;

	var R = typeof Reflect === 'object' ? Reflect : null;
	var ReflectApply = R && typeof R.apply === 'function'
	  ? R.apply
	  : function ReflectApply(target, receiver, args) {
	    return Function.prototype.apply.call(target, receiver, args);
	  };

	var ReflectOwnKeys;
	if (R && typeof R.ownKeys === 'function') {
	  ReflectOwnKeys = R.ownKeys;
	} else if (Object.getOwnPropertySymbols) {
	  ReflectOwnKeys = function ReflectOwnKeys(target) {
	    return Object.getOwnPropertyNames(target)
	      .concat(Object.getOwnPropertySymbols(target));
	  };
	} else {
	  ReflectOwnKeys = function ReflectOwnKeys(target) {
	    return Object.getOwnPropertyNames(target);
	  };
	}

	function ProcessEmitWarning(warning) {
	  if (console && console.warn) console.warn(warning);
	}

	var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
	  return value !== value;
	};

	function EventEmitter() {
	  EventEmitter.init.call(this);
	}
	events.exports = EventEmitter;
	events.exports.once = once;

	// Backwards-compat with node 0.10.x
	EventEmitter.EventEmitter = EventEmitter;

	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._eventsCount = 0;
	EventEmitter.prototype._maxListeners = undefined;

	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	var defaultMaxListeners = 10;

	function checkListener(listener) {
	  if (typeof listener !== 'function') {
	    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
	  }
	}

	Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
	  enumerable: true,
	  get: function() {
	    return defaultMaxListeners;
	  },
	  set: function(arg) {
	    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
	      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
	    }
	    defaultMaxListeners = arg;
	  }
	});

	EventEmitter.init = function() {

	  if (this._events === undefined ||
	      this._events === Object.getPrototypeOf(this)._events) {
	    this._events = Object.create(null);
	    this._eventsCount = 0;
	  }

	  this._maxListeners = this._maxListeners || undefined;
	};

	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
	  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
	    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
	  }
	  this._maxListeners = n;
	  return this;
	};

	function _getMaxListeners(that) {
	  if (that._maxListeners === undefined)
	    return EventEmitter.defaultMaxListeners;
	  return that._maxListeners;
	}

	EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
	  return _getMaxListeners(this);
	};

	EventEmitter.prototype.emit = function emit(type) {
	  var args = [];
	  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
	  var doError = (type === 'error');

	  var events = this._events;
	  if (events !== undefined)
	    doError = (doError && events.error === undefined);
	  else if (!doError)
	    return false;

	  // If there is no 'error' event listener then throw.
	  if (doError) {
	    var er;
	    if (args.length > 0)
	      er = args[0];
	    if (er instanceof Error) {
	      // Note: The comments on the `throw` lines are intentional, they show
	      // up in Node's output if this results in an unhandled exception.
	      throw er; // Unhandled 'error' event
	    }
	    // At least give some kind of context to the user
	    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
	    err.context = er;
	    throw err; // Unhandled 'error' event
	  }

	  var handler = events[type];

	  if (handler === undefined)
	    return false;

	  if (typeof handler === 'function') {
	    ReflectApply(handler, this, args);
	  } else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);
	    for (var i = 0; i < len; ++i)
	      ReflectApply(listeners[i], this, args);
	  }

	  return true;
	};

	function _addListener(target, type, listener, prepend) {
	  var m;
	  var events;
	  var existing;

	  checkListener(listener);

	  events = target._events;
	  if (events === undefined) {
	    events = target._events = Object.create(null);
	    target._eventsCount = 0;
	  } else {
	    // To avoid recursion in the case that type === "newListener"! Before
	    // adding it to the listeners, first emit "newListener".
	    if (events.newListener !== undefined) {
	      target.emit('newListener', type,
	                  listener.listener ? listener.listener : listener);

	      // Re-assign `events` because a newListener handler could have caused the
	      // this._events to be assigned to a new object
	      events = target._events;
	    }
	    existing = events[type];
	  }

	  if (existing === undefined) {
	    // Optimize the case of one listener. Don't need the extra array object.
	    existing = events[type] = listener;
	    ++target._eventsCount;
	  } else {
	    if (typeof existing === 'function') {
	      // Adding the second element, need to change to array.
	      existing = events[type] =
	        prepend ? [listener, existing] : [existing, listener];
	      // If we've already got an array, just append.
	    } else if (prepend) {
	      existing.unshift(listener);
	    } else {
	      existing.push(listener);
	    }

	    // Check for listener leak
	    m = _getMaxListeners(target);
	    if (m > 0 && existing.length > m && !existing.warned) {
	      existing.warned = true;
	      // No error code for this since it is a Warning
	      // eslint-disable-next-line no-restricted-syntax
	      var w = new Error('Possible EventEmitter memory leak detected. ' +
	                          existing.length + ' ' + String(type) + ' listeners ' +
	                          'added. Use emitter.setMaxListeners() to ' +
	                          'increase limit');
	      w.name = 'MaxListenersExceededWarning';
	      w.emitter = target;
	      w.type = type;
	      w.count = existing.length;
	      ProcessEmitWarning(w);
	    }
	  }

	  return target;
	}

	EventEmitter.prototype.addListener = function addListener(type, listener) {
	  return _addListener(this, type, listener, false);
	};

	EventEmitter.prototype.on = EventEmitter.prototype.addListener;

	EventEmitter.prototype.prependListener =
	    function prependListener(type, listener) {
	      return _addListener(this, type, listener, true);
	    };

	function onceWrapper() {
	  if (!this.fired) {
	    this.target.removeListener(this.type, this.wrapFn);
	    this.fired = true;
	    if (arguments.length === 0)
	      return this.listener.call(this.target);
	    return this.listener.apply(this.target, arguments);
	  }
	}

	function _onceWrap(target, type, listener) {
	  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
	  var wrapped = onceWrapper.bind(state);
	  wrapped.listener = listener;
	  state.wrapFn = wrapped;
	  return wrapped;
	}

	EventEmitter.prototype.once = function once(type, listener) {
	  checkListener(listener);
	  this.on(type, _onceWrap(this, type, listener));
	  return this;
	};

	EventEmitter.prototype.prependOnceListener =
	    function prependOnceListener(type, listener) {
	      checkListener(listener);
	      this.prependListener(type, _onceWrap(this, type, listener));
	      return this;
	    };

	// Emits a 'removeListener' event if and only if the listener was removed.
	EventEmitter.prototype.removeListener =
	    function removeListener(type, listener) {
	      var list, events, position, i, originalListener;

	      checkListener(listener);

	      events = this._events;
	      if (events === undefined)
	        return this;

	      list = events[type];
	      if (list === undefined)
	        return this;

	      if (list === listener || list.listener === listener) {
	        if (--this._eventsCount === 0)
	          this._events = Object.create(null);
	        else {
	          delete events[type];
	          if (events.removeListener)
	            this.emit('removeListener', type, list.listener || listener);
	        }
	      } else if (typeof list !== 'function') {
	        position = -1;

	        for (i = list.length - 1; i >= 0; i--) {
	          if (list[i] === listener || list[i].listener === listener) {
	            originalListener = list[i].listener;
	            position = i;
	            break;
	          }
	        }

	        if (position < 0)
	          return this;

	        if (position === 0)
	          list.shift();
	        else {
	          spliceOne(list, position);
	        }

	        if (list.length === 1)
	          events[type] = list[0];

	        if (events.removeListener !== undefined)
	          this.emit('removeListener', type, originalListener || listener);
	      }

	      return this;
	    };

	EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

	EventEmitter.prototype.removeAllListeners =
	    function removeAllListeners(type) {
	      var listeners, events, i;

	      events = this._events;
	      if (events === undefined)
	        return this;

	      // not listening for removeListener, no need to emit
	      if (events.removeListener === undefined) {
	        if (arguments.length === 0) {
	          this._events = Object.create(null);
	          this._eventsCount = 0;
	        } else if (events[type] !== undefined) {
	          if (--this._eventsCount === 0)
	            this._events = Object.create(null);
	          else
	            delete events[type];
	        }
	        return this;
	      }

	      // emit removeListener for all listeners on all events
	      if (arguments.length === 0) {
	        var keys = Object.keys(events);
	        var key;
	        for (i = 0; i < keys.length; ++i) {
	          key = keys[i];
	          if (key === 'removeListener') continue;
	          this.removeAllListeners(key);
	        }
	        this.removeAllListeners('removeListener');
	        this._events = Object.create(null);
	        this._eventsCount = 0;
	        return this;
	      }

	      listeners = events[type];

	      if (typeof listeners === 'function') {
	        this.removeListener(type, listeners);
	      } else if (listeners !== undefined) {
	        // LIFO order
	        for (i = listeners.length - 1; i >= 0; i--) {
	          this.removeListener(type, listeners[i]);
	        }
	      }

	      return this;
	    };

	function _listeners(target, type, unwrap) {
	  var events = target._events;

	  if (events === undefined)
	    return [];

	  var evlistener = events[type];
	  if (evlistener === undefined)
	    return [];

	  if (typeof evlistener === 'function')
	    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

	  return unwrap ?
	    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
	}

	EventEmitter.prototype.listeners = function listeners(type) {
	  return _listeners(this, type, true);
	};

	EventEmitter.prototype.rawListeners = function rawListeners(type) {
	  return _listeners(this, type, false);
	};

	EventEmitter.listenerCount = function(emitter, type) {
	  if (typeof emitter.listenerCount === 'function') {
	    return emitter.listenerCount(type);
	  } else {
	    return listenerCount.call(emitter, type);
	  }
	};

	EventEmitter.prototype.listenerCount = listenerCount;
	function listenerCount(type) {
	  var events = this._events;

	  if (events !== undefined) {
	    var evlistener = events[type];

	    if (typeof evlistener === 'function') {
	      return 1;
	    } else if (evlistener !== undefined) {
	      return evlistener.length;
	    }
	  }

	  return 0;
	}

	EventEmitter.prototype.eventNames = function eventNames() {
	  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
	};

	function arrayClone(arr, n) {
	  var copy = new Array(n);
	  for (var i = 0; i < n; ++i)
	    copy[i] = arr[i];
	  return copy;
	}

	function spliceOne(list, index) {
	  for (; index + 1 < list.length; index++)
	    list[index] = list[index + 1];
	  list.pop();
	}

	function unwrapListeners(arr) {
	  var ret = new Array(arr.length);
	  for (var i = 0; i < ret.length; ++i) {
	    ret[i] = arr[i].listener || arr[i];
	  }
	  return ret;
	}

	function once(emitter, name) {
	  return new Promise(function (resolve, reject) {
	    function errorListener(err) {
	      emitter.removeListener(name, resolver);
	      reject(err);
	    }

	    function resolver() {
	      if (typeof emitter.removeListener === 'function') {
	        emitter.removeListener('error', errorListener);
	      }
	      resolve([].slice.call(arguments));
	    }
	    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
	    if (name !== 'error') {
	      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
	    }
	  });
	}

	function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
	  if (typeof emitter.on === 'function') {
	    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
	  }
	}

	function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
	  if (typeof emitter.on === 'function') {
	    if (flags.once) {
	      emitter.once(name, listener);
	    } else {
	      emitter.on(name, listener);
	    }
	  } else if (typeof emitter.addEventListener === 'function') {
	    // EventTarget does not have `error` event semantics like Node
	    // EventEmitters, we do not listen for `error` events here.
	    emitter.addEventListener(name, function wrapListener(arg) {
	      // IE does not have builtin `{ once: true }` support so we
	      // have to do it manually.
	      if (flags.once) {
	        emitter.removeEventListener(name, wrapListener);
	      }
	      listener(arg);
	    });
	  } else {
	    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
	  }
	}
	return events.exports;
}

var hasRequiredNode;

function requireNode () {
	if (hasRequiredNode) return node;
	hasRequiredNode = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.File = exports.Link = exports.Node = exports.SEP = void 0;
		const process_1 = requireProcess();
		const buffer_1 = requireBuffer$1();
		const constants_1 = requireConstants$2();
		const events_1 = requireEvents();
		const Stats_1 = requireStats();
		const { S_IFMT, S_IFDIR, S_IFREG, S_IFLNK, S_IFCHR, O_APPEND } = constants_1.constants;
		const getuid = () => { var _a, _b; return (_b = (_a = process_1.default.getuid) === null || _a === void 0 ? void 0 : _a.call(process_1.default)) !== null && _b !== void 0 ? _b : 0; };
		const getgid = () => { var _a, _b; return (_b = (_a = process_1.default.getgid) === null || _a === void 0 ? void 0 : _a.call(process_1.default)) !== null && _b !== void 0 ? _b : 0; };
		exports.SEP = '/';
		/**
		 * Node in a file system (like i-node, v-node).
		 */
		class Node extends events_1.EventEmitter {
		    constructor(ino, mode = 0o666) {
		        super();
		        // User ID and group ID.
		        this._uid = getuid();
		        this._gid = getgid();
		        this._atime = new Date();
		        this._mtime = new Date();
		        this._ctime = new Date();
		        this.rdev = 0;
		        // Number of hard links pointing at this Node.
		        this._nlink = 1;
		        this.mode = mode;
		        this.ino = ino;
		    }
		    set ctime(ctime) {
		        this._ctime = ctime;
		    }
		    get ctime() {
		        return this._ctime;
		    }
		    set uid(uid) {
		        this._uid = uid;
		        this.ctime = new Date();
		    }
		    get uid() {
		        return this._uid;
		    }
		    set gid(gid) {
		        this._gid = gid;
		        this.ctime = new Date();
		    }
		    get gid() {
		        return this._gid;
		    }
		    set atime(atime) {
		        this._atime = atime;
		        this.ctime = new Date();
		    }
		    get atime() {
		        return this._atime;
		    }
		    set mtime(mtime) {
		        this._mtime = mtime;
		        this.ctime = new Date();
		    }
		    get mtime() {
		        return this._mtime;
		    }
		    get perm() {
		        return this.mode & 